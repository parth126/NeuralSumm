{
    "abstract_sentences": {
        "1": "We present a transition-based dependency parser that uses a convolutional neural network to compose word representations from characters.", 
        "2": "The character composition model shows great improvement over the word-lookup model, especially for parsing agglutinative languages.", 
        "3": "These improvements are even better than using pre-trained word embeddings from extra data.", 
        "4": "On the SPMRL data sets, our system outperforms the previous best greedy parser (Ballesteros et al., 2015) by a margin of 3% on average.1"
    }, 
    "body_sentences": {
        "1": "  Proceedings of the 55th Annual Meeting of the Association for Computational Linguistics (Short Papers), pages 672\u2013678 Vancouver, Canada, July 30 - August 4, 2017. c\u00a92017 Association for Computational Linguistics\nhttps://doi.org/10.18653/v1/P17-2106  1 Introduction  As with many other NLP tasks, dependency parsing also suffers from the out-of-vocabulary (OOV) problem, and probably more than others since training data with syntactical annotation is usually scarce.", 
        "2": "This problem is particularly severe when the target is a morphologically rich language.", 
        "3": "For example, in the SPMRL shared task data sets (Seddah et al., 2013, 2014), 4 out of 9 treebanks contain more than 40% word types in the development set that are never seen in the training set.", 
        "4": "One way to tackle the OOV problem is to pretrain the word embeddings, e.g., with word2vec (Mikolov et al., 2013), from a large set of unlabeled data.", 
        "5": "This comes with two main advantages: (1) more word types, which means that the vocabulary is extended by the unlabeled data, so that some of the OOVwords now have a learned representation; (2) more word tokens per type, which means that the syntactic and semantic similarities of the words are better modeled than only using the parser training data.", 
        "6": "1The parser is available at http://www.ims.", 
        "7": "uni-stuttgart.de/institut/mitarbeiter/ xiangyu/index.en.html\nPre-trained word embeddings can alleviate the OOV problem by expanding the vocabulary, but it does not model the morphological information.", 
        "8": "Instead of looking up word embeddings, many researchers propose to compose the word representation from characters for various tasks, e.g., part-of-speech tagging (dos Santos and Zadrozny, 2014; Plank et al., 2016), named entity recognition (dos Santos and Guimar\u00e3es, 2015), language modeling (Ling et al., 2015), machine translation (Costa-juss\u00e0 and Fonollosa, 2016).", 
        "9": "In particular, Ballesteros et al.", 
        "10": "(2015) use a bidirectional long short-term memory (LSTM) character model for dependency parsing.", 
        "11": "Kim et al.", 
        "12": "(2016) present a convolutional neural network (CNN) character model for language modeling, but make no comparison among the character models, and state that \u201cit remains open as to which character composition model (i.e., LSTM or CNN) performs better\u201d.", 
        "13": "We propose to apply the CNN model by Kim et al.", 
        "14": "(2016) in a greedy transition-based dependency parser with feed-forward neural networks (Chen and Manning, 2014; Weiss et al., 2015).", 
        "15": "This model requires no extra unlabeled data but performs better than using pre-trained word embeddings.", 
        "16": "Furthermore, it can be combined with word embeddings from the lookup table since they capture different aspects of word similarities.", 
        "17": "Experimental results show that the CNN model works especially well on agglutinative languages, where the OOV rates are high.", 
        "18": "On other morphologically rich languages, the CNN model also performs at least as good as the word-lookup model.", 
        "19": "Furthermore, our CNN model outperforms both the original and our re-implementation of the bidirectional LSTM model by Ballesteros et al.", 
        "20": "(2015) by a large margin.", 
        "21": "It provides empirical evidence to the aforementioned open question, suggesting that the CNN is the better character composition model for dependency parsing.", 
        "22": "672  2 Parsing Models    2.1 Baseline Parsing Model  As the baseline parsing model, we re-implement the greedy parser in Weiss et al.", 
        "23": "(2015) with some modifications, which brings about 0.5% improvement, outlined below.2 Since most treebanks contain non-projective trees, we use an approximate non-projective transition system similar to Attardi (2006).", 
        "24": "It has two additional transitions (LEFT-2 and RIGHT-2) to the Arc-Standard system (Nivre, 2004) that attach the top of the stack to the third token on the stack, or vice versa.", 
        "25": "We also extend the feature templates in Weiss et al.", 
        "26": "(2015) by extracting the children of the third token in the stack.", 
        "27": "The complete transitions and feature templates are listed in Appendix A.", 
        "28": "The feature templates consist of 24 tokens in the configuration, we look up the embeddings of the word forms, POS tags and dependency labels of each token.3 We then concatenate the embeddings Eword(ti), Etag(ti), Elabel(ti) for each token ti, and use a dense layer with ReLU non-linearity to obtain a compact representation f (ti) of the token:\nx(ti) = [Eword(ti);Etag(ti);Elabel(ti)] (1) f (ti) = max{0,Wfx(ti) + bf}\nWe concatenate the representations of the tokens and feed them through two hidden layers with ReLU non-linearity, and finally into the softmax layer to compute the probability of each transition:\nh0 = [f (t1); f (t2); ...; f (t24)] h1 = max{0,W1h0 + b1} h2 = max{0,W2h1 + b2}\np(\u22c5|t1, ..., t24) = sof tmax(W3h2 + b3) Eword , Etag, Elabel, Wf , W1, W2, W3, bf , b1, b2, b3 are all the parameters that will be learned through back propagation with averaged stochastic gradient descent in mini-batches.", 
        "29": "Note that Weiss et al.", 
        "30": "(2015) directly concatenate the embeddings of the words, tags, and labels of all the tokens together as input to the hidden layer.", 
        "31": "Instead, we first group the embeddings of the word, tag, and label of each token and compute\n2We only experiment with the greedy parser, since this paper focuses on the character-level input features and is independent of the global training and inference as in Weiss et al.", 
        "32": "(2015); Andor et al.", 
        "33": "(2016).", 
        "34": "3The tokens in the stack and buffer do not have labels yet, we use a special label <NOLABEL> instead.", 
        "35": "an intermediate representation with shared parameters, then concatenate all the representations as input to the hidden layer.", 
        "36": "2.2 LSTM Character Composition Model  To tackle the OOV problem, wewant to replace the word-lookup table with a function that composes the word representation from characters.", 
        "37": "As a baseline character model, we re-implement the bidirectional LSTM character composition model following Ballesteros et al.", 
        "38": "(2015).", 
        "39": "We replace the lookup table Eword in the baseline parser with the final outputs of the forward and backward LSTMs \u20d6\u20d6\u20d6\u20d6\u20d6\u20d6\u20d6\u20d6lstm and \u20d6\u20d6\u20d6\u20d6\u20d6\u20d6\u20d6\u20d7lstm.", 
        "40": "Equation (1) is then replaced with\nx(ti) = [\u20d6\u20d6\u20d6\u20d6\u20d6\u20d6\u20d6\u20d6lstm(ti); \u20d6\u20d6\u20d6\u20d6\u20d6\u20d6\u20d6\u20d7lstm(ti);Etag(ti);Elabel(ti)].", 
        "41": "We refer the readers to Ling et al.", 
        "42": "(2015) for the details of the bidirectional LSTM.", 
        "43": "2.3 CNN Character Composition Model  In contrast to the LSTM model, we propose to use a \u201cflat\u201d CNN as the character composition model, similar to Kim et al.", 
        "44": "(2016).4 Equation (1) is thus replaced with\nx(ti) =[cnnl1(ti); cnnl2(ti); ...; cnnlk(ti); Etag(ti);Elabel(ti)].", 
        "45": "(2)\nConcretely, the input of the model is a concatenated matrix of character embeddings C \u2208 \u211ddi\u00d7w, where di is the dimensionality of character embeddings (number of input channels) and w is the length of the padded word.5 We apply k convolutional kernels  \u2208 \u211ddo\u00d7di\u00d7lk with ReLU nonlinearity on the input, where do is the number of output channels and lk is the length of the kernel.", 
        "46": "The output of the convolution operation is Oconv \u2208 \u211ddo\u00d7(l\u2212k+1), and we apply a max-overtime pooling that takes the maximum activations of the kernel along each channel, obtaining the final output Ofinal \u2208 \u211ddo , which corresponds to the most salient n-gram representation of the word, denoted cnnlk in Equation (2).", 
        "47": "We then concatenate the outputs of several such CNNs with different lengths, so that the information from different n-grams are extracted and can interact with each other.", 
        "48": "4We do not use the highway networks since it did not improve the performance in preliminary experiments.", 
        "49": "5The details of the padding is in Appendix B.", 
        "50": "3 Experiments    3.1 Experimental Setup  We conduct our experiments on the treebanks from the SPMRL 2014 shared task (Seddah et al., 2013, 2014), which includes 9 morphologically rich languages: Arabic, Basque, French, German, Hebrew, Hungarian, Korean, Polish, and Swedish.", 
        "51": "All the treebanks are split into training, development, and test sets by the shared task organizers.", 
        "52": "We use the fine-grained predicted POS tags provided by the organizers, and evaluate the labeled attachment scores (LAS) including punctuation.", 
        "53": "We experiment with the CNN-based character composition model (CNN) along with several baselines.", 
        "54": "The first baseline (WORD) uses the wordlookup model described in Section 2.1 with randomly initialized word embeddings.", 
        "55": "The second baseline (W2V) uses pre-trained word embeddings by word2vec (Mikolov et al., 2013) with the CBOW model and default parameters on the unlabeled texts from the shared task organizers.", 
        "56": "The third baseline (LSTM) uses a bidirectional LSTM as the character composition model following Ballesteros et al.", 
        "57": "(2015).", 
        "58": "Appendix C lists the hyper-parameters of all the models.", 
        "59": "Further analysis suggests that combining the character composition models with word-lookup models could be beneficial since they capture different aspects of word similarities (orthographic vs. syntactic/semantic).", 
        "60": "We therefore experiment with four combined models in two groups: (1) randomly initialized word embeddings (LSTM+WORD vs. CNN+WORD), and (2) pre-trained word embeddings (LSTM+W2V vs. CNN+W2V).", 
        "61": "The experimental results are shown in Table 1, with Int denoting internal comparisons (with three groups) and Ext denoting external comparisons, the highest LAS in each group is marked in bold face.", 
        "62": "3.2 Internal Comparisons  In the first group, we compare the LAS of the four single models WORD, W2V, LSTM, and CNN.", 
        "63": "In macro average of all languages, the CNN model performs 2.17% higher than the WORD model, and 1.24% higher than the W2V model.", 
        "64": "The LSTM model, however, performs only 0.9% higher than the WORD model and 1.27% lower than the CNN model.", 
        "65": "The CNN model shows large improvement in four languages: three agglutinative languages (Basque, Hungarian, Korean), and one highly inflected fusional language (Polish).", 
        "66": "They all have high OOV rate, thus difficult for the baseline parser that does not model morphological information.", 
        "67": "Also, morphemes in agglutinative languages tend to have unique, unambiguous meanings, thus easier for the convolutional kernels to capture.", 
        "68": "In the second group, we observe that the additional word-lookup model does not significantly improve the CNN moodel (from 82.75% in CNN to 82.90% in CNN+WORD on average) while the LSTMmodel is improved by a much larger margin (from 81.48% in LSTM to 82.56% in LSTM+WORD on average).", 
        "69": "This suggests that the CNN model has already learned the most important information from the the word forms, while the LSTM model has not.", 
        "70": "Also, the combined CNN+WORD model is still better than the LSTM+WORD model, despite the large improvement in the latter.", 
        "71": "In the third group where pre-trained word embeddings are used, combining CNN with W2V brings an extra 0.75% LAS over the CNN model.", 
        "72": "Combining LSTM with W2V shows similar trend but with much larger improvement, yet again, CNN+W2V outperforms LSTM+W2V both on average and individually in 8 out of 9 languages.", 
        "73": "3.3 External Comparisons  We also report the results of the two models from Ballesteros et al.", 
        "74": "(2015): B15-WORD with randomly initialized word embeddings and B15-LSTM as their proposed model.", 
        "75": "Finally, we report the best published results (BestPub) on this data set (Bj\u00f6rkelund et al., 2013, 2014).", 
        "76": "On average, the B15-LSTM model improves their own baseline by 1.1%, similar to the 0.9% improvement of our LSTM model, which is much smaller than the 2.17% improvement of the CNN model.", 
        "77": "Furthermore, the CNN model is improved from a strong baseline: our WORD model performs already 2.22% higher than the B15-WORD model.", 
        "78": "Comparing the individual performances on each language, we observe that the CNN model almost always outperforms the WORD model except for Hebrew.", 
        "79": "However, both LSTM and B15-LSTM perform higher than baseline only on the three agglutinative languages (Basque, Hungarian, and Korean), and lower than baseline on the other six.", 
        "80": "Ballesteros et al.", 
        "81": "(2015) do not compare the effect of adding a word-lookup model to the LSTM model as in our second group of internal comparisons.", 
        "82": "However, Plank et al.", 
        "83": "(2016) show that combining the same LSTM character composition model with word-lookup model improves the performance of POS tagging by a very large margin.", 
        "84": "This partially confirms our hypothesis that the LSTMmodel does not learn sufficient information from the word forms.", 
        "85": "Considering both internal and external comparisons in both average and individual performances, we argue that CNN is more suitable than LSTM as character composition model for parsing.", 
        "86": "While comparing to the best published results\n(Bj\u00f6rkelund et al., 2013, 2014), we have to note that their approach uses explicit morphological features, ensemble, ranking, etc., which all can boost parsing performance.", 
        "87": "We only use a greedy parser with much fewer features, but bridge the 6 points gap between the previous best greedy parser and the best published result bymore than one half.", 
        "88": "3.4 Discussion on CNN and LSTM  We conjecture that the main reason for the better performance of CNN over LSTM is its flexibility in processing sub-word information.", 
        "89": "The CNN model uses different kernels to capture ngrams of different lengths.", 
        "90": "In our setting, a kernel with a minimum length of 3 can capture short morphemes; and with a maximum length of 9, it can practically capture a normal word.", 
        "91": "With the flexibility of capturing patterns from morphemes up to words, the CNNmodel almost always outperforms the word-lookup model.", 
        "92": "In theory, LSTM has the ability to model much longer sequences, however, it is composed step by step with recurrence.", 
        "93": "For such deep network architectures, more data would be required to learn the same sequence, in comparison to CNN which can directly use a large kernel to match the pattern.", 
        "94": "For dependency parsing, training data is usually scarce, this could be the reason that the LSTM has not utilized its full potential.", 
        "95": "3.5 Analyses on OOV and Morphology  The motivation for using character composition models is based on the hypothesis that it can address the OOV problem.", 
        "96": "To verify the hypothesis, we analyze the LAS improvements of the CNN and LSTMmodel on the development sets in two cases: (1) both the head and the dependent are in vocabu-\nlary or (2) at least one of them is out of vocabulary.", 
        "97": "Table 2 shows the results, where the two cases are denoted as \u0394IV and \u0394OOV.", 
        "98": "The general trend in the results is that the improvements of both models in the OOV case are larger than in the IV case, which means that the character composition models indeed alleviates the OOV problem.", 
        "99": "Also, CNN improves on seven languages in the IV case and eight languages in the OOV case, and it performs consistently better than LSTM in both cases.", 
        "100": "To analyze the informativeness of the morphemes at different positions, we conduct an ablation experiment.", 
        "101": "We split each word equally into three thirds, approximating the prefix, stem, and suffix.", 
        "102": "Based on that, we construct six modified versions of the development sets, in which we mask one or two third(s) of the characters in each word.", 
        "103": "Then we parse them with the CNN models trained on normal data.", 
        "104": "Table 3 shows the degradations of LAS on the six modified data sets compared to parsing the original data, where the position of \u2663 signifies the location of the masks.", 
        "105": "The three agglutinative languages Basque, Hungarian, and Korean suffer the most with masked words.", 
        "106": "In particular, the suffixes are the most informative for parsing in these three languages, since they cause the most loss while masked, and the least loss while unmasked.", 
        "107": "The pattern is quite different on the other languages, in which the distinction of informativeness among the three parts is much smaller.", 
        "108": "4 Conclusion  In this paper, we propose to use a CNN to compose word representations from characters for dependency parsing.", 
        "109": "Experiments show that the CNN model consistently improves the parsing accuracy, especially for agglutinative languages.", 
        "110": "In an external comparison on the SPMRL data sets, our system outperforms the previous best greedy parser.", 
        "111": "We also provide empirical evidence and analysis, showing that the CNN model indeed alleviates the OOV problem and that it is better suited than the LSTM in dependency parsing.", 
        "112": "Acknowledgements  This work was supported by the German Research Foundation (DFG) in project D8 of SFB 732.", 
        "113": "We also thank our collegues in the IMS, especially Anders Bj\u00f6rkelund, for valuable discussions, and the anonymous reviewers for the suggestions.", 
        "114": "A Transitions and Feature Templates    B Character Input Preprocessing  For the CNN input, we use a list of characters with fixed length to for batch processing.", 
        "115": "We add some special symbols apart from the normal alphabets, digits, and punctuations: <SOW> as the start of the word, <EOW> as the end of the word, <MUL> as multiple characters in the middle of the word squeezed into one symbol, <PAD> as padding equally on both sides, and <UNK> as characters unseen in the training data.", 
        "116": "For example, if we limit the input length to 9, a short word ein will be converted into <PAD><PAD>-<SOW>-e-i-n-<EOW>-<PAD>-<PAD>; a long word pr\u00e4chtiger will be <SOW>-p-r-\u00e4<MUL>-g-e-r-<EOW>.", 
        "117": "In practice, we set the length as 32, which is long enough for almost all the words.", 
        "118": "C Hyper-Parameters  The common hyper-parameters of all the models are tuned on the development set in favor of the WORD model:\n\u2022 100,000 training steps with random sampling of mini-batches of size 100; \u2022 test on the development set every 2,000 steps; \u2022 early stop if the LAS on the development does not improve for 3 times in a row; \u2022 learning rate of 0.1, with exponential decay rate of 0.95 for every 2,000 steps; \u2022 L2-regularization rate of 10\u22124; \u2022 averaged SGD with momentum of 0.9; \u2022 parameters are initialized following He et al.", 
        "119": "(2015); \u2022 dimensionality of the embeddings of each word, tag, and label are 256, 32, 32, respectively; \u2022 dimensionality of the hidden layers are 512, 256; \u2022 dropout on both hidden layers with rate of 0.1; \u2022 total norm constraint of the gradients is 10.", 
        "120": "The hyper-parameters for the CNN model are:\n\u2022 dimensionality of the character embedding is 32; \u2022 4 convolutional kernels of lengths 3, 5, 7, 9; \u2022 number of output channels of each kernel is 64; \u2022 fixed length for the character input is 32.", 
        "121": "The hyper-parameters for the LSTM model are:\n\u2022 128 hidden units for both LSTMs; \u2022 all the gates use orthogonal initialization; \u2022 gradient clipping of 10; \u2022 no L2-regularization on the parameters."
    }, 
    "document_id": "P17-2106.pdf.json"
}
