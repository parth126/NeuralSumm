{
    "abstract_sentences": {
        "1": "This work explores normalization for parser adaptation.", 
        "2": "Traditionally, normalization is used as separate pre-processing step.", 
        "3": "We show that integrating the normalization model into the parsing algorithm is beneficial.", 
        "4": "This way, multiple normalization candidates can be leveraged, which improves parsing performance on social media.", 
        "5": "We test this hypothesis by modifying the Berkeley parser; out-ofthe-box it achieves an F1 score of 66.52.", 
        "6": "Our integrated approach reaches a significant improvement with an F1 score of 67.36, while using the best normalization sequence results in an F1 score of only 66.94."
    }, 
    "body_sentences": {
        "1": "  Proceedings of the 55th Annual Meeting of the Association for Computational Linguistics (Short Papers), pages 491\u2013497 Vancouver, Canada, July 30 - August 4, 2017. c\u00a92017 Association for Computational Linguistics\nhttps://doi.org/10.18653/v1/P17-2078  1 Introduction  The non-canonical language use on social media introduces many difficulties for existing NLP models.", 
        "2": "For some NLP tasks, there has already been an effort to annotate enough data to train models, e.g.", 
        "3": "named entity recognition (Baldwin et al., 2015), sentiment analysis (Nakov et al., 2016) and paraphrase detection (Xu et al., 2015).", 
        "4": "For parsing social media texts, such a resource is not available yet, although there are some small treebanks that can be used for development/testing purposes (Foster et al., 2011; Kong et al., 2014; Kaljahi et al., 2015; Daiber and van der Goot, 2016).", 
        "5": "To the best of our knowledge, the only treebank big enough to train a supervised parser for user generated content is the English Web Treebank (Petrov and McDonald, 2012).", 
        "6": "This treebank consists of constituency trees from five different web domains, not including the domain of social media.", 
        "7": "The magnitude of domain adaptation problems for the social media domain becomes clear when training the Berkeley parser on newswire text, and comparing its in-domain performance with performance on the Twitter domain.", 
        "8": "The Berkeley parser achieves an F1 score above 90 on newswire text (Petrov and Klein, 2007).", 
        "9": "An empirical experiment that we carried out on a Twitter treebank shows that the F1 score drops below 70 for this domain.", 
        "10": "Annotating a new training treebank for this domain would not only be an expensive solution, the ever-changing nature of social media makes this approach less effective over time.", 
        "11": "We propose an approach in which we integrate normalization into the parsing model.", 
        "12": "The normalization model provides the parser with different normalization candidates for each word in the input sentence.", 
        "13": "Existing algorithms can then be used to find the optimal parse tree over this lattice (Bar-Hillel et al., 1961).", 
        "14": "A possible normalization lattice for the sentence \u2018this is nice\u2019 is shown in Figure 1.", 
        "15": "In this example output, the probability of \u2018as\u2019 is higher than the probability of \u2018is\u2019, whereas the most fluent word sequence would be \u2018this is nice\u2019.", 
        "16": "The parser can disambiguate this word graph because it has access to the syntactic context: \u2018is\u2019 is usually tagged as VBZ, while \u2018as\u2019 is mostly tagged as IN.", 
        "17": "This example shows the main motivation for using an integrated approach; the extra information from the normalization can be useful for parsing.", 
        "18": "491  2 Related Work  SANCL 2012 hosted a shared task on parsing the English Web Treebank (EWT) (Petrov and McDonald, 2012).", 
        "19": "A wide variety of different approaches were used: ensemble parsers, product grammars, self/up-training, word clustering, genre classification and normalization.", 
        "20": "The teams that used normalization often used simple rule-based systems, and the actual effect of normalization on the final parser performance was not tested.", 
        "21": "Foster (2010) experiment with rule-based normalization on forum data in isolation and report a performance gain of 2% in F1 score.", 
        "22": "A theoretical exploration of the effect of normalization on forum data is done by Kaljahi et al.", 
        "23": "(2015).", 
        "24": "They released the Foreebank, a treebank consisting of forum texts, annotated with normalization and constituency trees.", 
        "25": "They show that parsing manually normalized sentences results in a 2% increase of F1 score.", 
        "26": "Baldwin and Li (2015) evaluate the effect of different normalization actions on dependency parsing performance for the social media domain.", 
        "27": "They conclude that a variety of different normalization actions is useful for parsing.", 
        "28": "A more practical exploration of the effect of normalization for the social media domain is done by Zhang et al.", 
        "29": "(2013).", 
        "30": "They test the effect of automatic normalization on dependency parsing by using automatically derived parse trees of the normalized sentences as reference.", 
        "31": "Other work that uses automatic normalization is Daiber and van der Goot (2016), which compare the effect of lexical normalization with machine translation on a manually annotated dependency treebank.", 
        "32": "All previous work uses only the best normalization sequence; errors in this pre-processing step are directly propagated to the parser.", 
        "33": "For POS tagging, however, a joint approach is proposed by Li and Liu (2015).", 
        "34": "They use the nbest output of different normalization systems to generate a Viterbi encoding, based on all possible pairs of normalization candidates and their possible POS tags.", 
        "35": "Using this joint approach, they improve on both POS tagging and normalization.", 
        "36": "3 Method  We first describe how an existing normalization model is modified for this specific use.", 
        "37": "Then we discuss how we integrate this normalization into the parsing model.", 
        "38": "3.1 Normalization  We use an existing normalization model (van der Goot, 2016).", 
        "39": "This model generates candidates using the Aspell spell checker1 and a word embeddings model trained on Twitter data (Godin et al., 2015).", 
        "40": "Features from this generation are complemented with n-gram probability features of canonical text (Brants and Franz, 2006) and the Twitter domain.", 
        "41": "A random forest classifier (Breiman, 2001) is exploited for the ranking of the generated candidates.", 
        "42": "Van der Goot (2016) focused on finding the correct normalization candidate for erroneous tokens, gold error detection was assumed.", 
        "43": "Therefore, the model was trained only on the words that were normalized in the training data.", 
        "44": "Since we do not know in advance which words should be normalized, we can not use this model.", 
        "45": "Instead, we train the model on all words in the training data, including words that do not need normalization.", 
        "46": "Accordingly, we add the original token as a normalization candidate and add a binary feature to indicate this.", 
        "47": "These adaptations enable the model to learn which words should be normalized.", 
        "48": "We compare the traditional approach of only using the best normalization sequence with an integrated approach, in which the parsing model has access to multiple normalization candidates for each word.", 
        "49": "Within the integrated approach, we compare normalizing only the words unknown to the parser against normalizing all words.", 
        "50": "We refer to these approaches as \u2018UNK\u2019 and \u2018ALL\u2019, respectively.", 
        "51": "Figure 1 shows a possible output when using ALL.", 
        "52": "When using UNK, the word \u2018nice\u2019 would not have any normalization candidates.", 
        "53": "3.2 Parsing  We adapt the state-of-the-art PCFG Berkeley Parser (Petrov and Klein, 2007) to fit our needs.", 
        "54": "The main strength of this PCFG-LA parser is that it automatically learns to split constituents into finer categories during training, and thus learns a more refined grammar than a raw treebank grammar.", 
        "55": "It maintains efficiency by using a coarse-tofine parsing setup.", 
        "56": "Unknown words are clustered by prefixes, suffixes, the presence of special characters or capitals and their position in the sentence.", 
        "57": "Parsing word lattices is not a new problem.", 
        "58": "The parsing as intersection algorithm (Bar-Hillel et al., 1961) laid the theoretical background for ef-\n1www.aspell.net\nficiently deriving the best parse tree of a word lattice given a context-free grammar.", 
        "59": "Previous work on parsing a word lattice in a PCFG-LA setup includes Constant et al.", 
        "60": "(2013), and Goldberg and Elhadad (2011) for the Berkeley Parser.", 
        "61": "However, these models do not support probabilities, which are naturally provided by the normalization in our setup.", 
        "62": "Another problem is the handling of word ambiguities, which is crucial in our model.", 
        "63": "Our adaptations to the Berkeley Parser resemble the adaptations done by Goldberg and Elhadad (2011).", 
        "64": "In addition, we allow multiple words on the same position.", 
        "65": "For every POS tag in every position we only keep the highest scoring word.", 
        "66": "This suffices, since there is no syntactic ambiguity possible with only unary rules from POS tags to words, and therefore it is impossible for the lower scoring words to end up in the final parse tree.", 
        "67": "To incorporate the probability from the normalization model (Pnorm) into the chart, we combine it with the probability from the POS tag assigned by the built-in tagger of the Berkeley parser (Ppos) using the weighted harmonic mean (Rijsbergen, 1979):\nPchart = (1 + \u03b2 2) \u2217 Pnorm \u2217 Ppos\n(\u03b22 \u2217 Pnorm) + Ppos (1)\nHere, \u03b2 is the relative weight we give to the normalization and Pchart is the probability used in the parsing chart.", 
        "68": "We use this formula because it allows us to have a weighted average, in which we reward the model if both probabilities are more balanced.", 
        "69": "4 Data  The normalization model we use is supervised, i.e.", 
        "70": "it needs annotated training data from the target domain.", 
        "71": "This is readily available for Twitter; we use 2,000 manually normalized Tweets from Li and Liu (2014) as training data.", 
        "72": "We use the treebank from Foster et al.", 
        "73": "(2011) as develop and test data for our parser.", 
        "74": "It comprises 269 trees for developing and 250 trees for testing, all annotated using the annotation guidelines for the Penn Treebank (Bies et al., 1995) with some small adaptations for the Twitter domain (usernames, hashtags and urls are annotated as an NNP under an NP).", 
        "75": "For training, we use the English Web Treebank (EWT) concatenated with the standard training sections (2-21) of the Wall Street Journal (WSJ) part of the Penn treebank (Marcus et al., 1993).", 
        "76": "Some basic statistics of our training and development data can be found in Table 1.", 
        "77": "Perhaps surprisingly, the percentage of unknown words in the EWT is lower than in the WSJ.", 
        "78": "This can be explained by the fact that the WSJ texts contains lots of jargon and named entities which are not present in the Aspell dictionary.", 
        "79": "The difference in percentage of unknown words between the normalization training data and the development treebank data might be an obstacle at first sight, but this can be overcome by tuning the weight (\u03b2) when combining the normalization and parse probabilities (Equation 1).", 
        "80": "Nevertheless, the effect of normalization will be smaller when there is less noise in the data.", 
        "81": "5 Results  The parser is evaluated using the F1 score as implemented by EVALB2.", 
        "82": "All results in this section are averaged over 10 runs, using different seeds for the normalization model, unless mentioned otherwise.", 
        "83": "The performance of our model depends on two parameters: the number of normalization candidates per word \u03b1 and the weight given to the normalization \u03b2.", 
        "84": "We tuned these parameters on the development data using \u03b1 \u2208 [1-10] and \u03b2 \u2208 [0.125, 0.25, 0.5, 1, 2, 4, 8, 16] to find the optimal values.", 
        "85": "The best performance is achieved using \u03b1 = 6 and \u03b2 = 2.", 
        "86": "From this optimal setting, we will compare the effects of these variables for both the UNK and the ALL normalization strategies.", 
        "87": "Figure 2 shows the effect of using different numbers of candidates and our baseline: the vanilla Berkeley parser.", 
        "88": "Using only the single best normalization sequence (\u03b1 = 1) we can obtain an improvement of 1.7% when normalizing all tokens.", 
        "89": "If we only normalize the unknown tokens\n2nlp.cs.nyu.edu/evalb\nthe performance is slightly worse, but it still outperforms the baseline.", 
        "90": "If we use more normalization candidates, performance increases; it converges around \u03b1 = 6.", 
        "91": "At this optimal setting, the baseline is outperformed by 2.2%.", 
        "92": "However, if more than only the first candidate is used, it is not beneficial to normalize all words anymore.", 
        "93": "This is probably an effect of creating too much distance between the original sentence and the normalization.", 
        "94": "The F1 score converges for higher number of candidates, because lower ranked candidates have very low normalization probabilities and are thus unlikely to affect the final parse.", 
        "95": "The normalization model seldomly finds a correct candidate beyond \u03b1 > 2, at \u03b1 = 2 the recall for unknown words is 89.4% on the LexNorm corpus (Han and Baldwin, 2011), whereas the accuracy at \u03b1 = 6 is 91.7%.", 
        "96": "Perhaps surprisingly, the parser performance still improves when increasing \u03b1. Manual evaluation reveals that these improvements are obtained by using incorrect normalization candidates.", 
        "97": "Because these normalization candidates share some syntactic properties with the original word, they can still help in deriving a better syntactic parse.", 
        "98": "Figure 3 shows an example of this phenomenon; \u201cBono\u201d is normalized to Bono\u2019s, and is therefore tagged as an NNS, even though this tag is still not correct, the head gets tagged correctly as NP.", 
        "99": "Combined with the normalization of \u201cNOT\u201d, this results in a much better parse tree.", 
        "100": "Table 2 shows the results using different\nweights.", 
        "101": "We compare the non-integrated approach (\u03b1 = 1) with the optimal number of candidates (\u03b1 = 6).", 
        "102": "The best results are achieved when \u03b2 is 2, meaning that the normalization should get a higher weight than the POS tagger.", 
        "103": "The integrated model scores higher with almost all weights, the difference between ALL and UNK is similar as in Figure 2.", 
        "104": "For the test data, we use the parameter settings that performed best on the development treebank (UNK, \u03b1 = 6, \u03b2 = 2), and the best performing seed for the normalization model.", 
        "105": "The results on the test data are compared to the traditional approach of only using the best normalization sequence, the vanilla Berkeley parser, and the Stanford PCFG parser (Petrov and Klein, 2007) in Table 3.", 
        "106": "The integrated approach significantly outperforms the Berkeley parser as well as the traditional approach.", 
        "107": "It becomes apparent that the test part of the treebank is more difficult than the development part.", 
        "108": "Although the increase is smaller,\nnormalization still improves parser performance.", 
        "109": "On the development set, 46% of the errors which can be accounted to mistakes made by the POS tagger are solved, whereas on the test set, we only solve 16% of this theoretical upper bound.", 
        "110": "6 Discussion  The addition of multiple words on one position in the chart will probably lead to less pruning in the Berkeley parser, because more constituents in the tree will have a relatively high probability.", 
        "111": "To test if performance improvements are simply an effect of less pruning, we perform two additional experiments.", 
        "112": "Firstly, we use the vanilla Berkeley parser with lower pruning thresholds3 on the Twitter development treebank.", 
        "113": "This results in a decrease in F1 score from 70.85 to 70.64, showing that our normalization model has a different effect.", 
        "114": "Secondly, we run our proposed parsing model on the standard development part of the more canonical WSJ data (section 24).", 
        "115": "The vanilla Berkeley parser achieves an F1 score of 89.15, whereas our best performing model scores 89.12 due to overnormalization.", 
        "116": "This shows that our model does not improve performance across all domains.", 
        "117": "To test the effect of the normalization on the search space, we simply count the number of surviving constituents in the chart in the middle and final parse level.", 
        "118": "Results can be found in Table 4.", 
        "119": "There is a slight increase in the number of constituents when using normalization.", 
        "120": "A similar effect can be found for the parsing time; averaged over 10 runs, the vanilla Berkeley parser took 24.3 seconds on the development set, whereas our\n3Tested by running the parser with --accurate.", 
        "121": "We also tried to tune the thresholds even further manually, but this had similar effects.", 
        "122": "model took 24.5 seconds on the same machine.", 
        "123": "7 Conclusion  We have shown that we can significantly improve the parsing of out-of domain data by using normalization.", 
        "124": "If we use normalization as a simple pre-processing step, we observe a small improvement in performance, while higher improvements can be achieved by using an integrated approach.", 
        "125": "Improvements in parsing performance are not only an effect of using correct normalization candidates, but are also due to wrong normalization candidates which share syntactic properties with the original word.", 
        "126": "Additionally, we show that when using only the best normalization sequence, it is better to normalize all words instead of only the unknown words.", 
        "127": "However, when using an integrated approach it is better to only consider unknown words for normalization.", 
        "128": "Potential directions for future work include: allowing multiword replacements, normalization driven by the parsing model, and using lexicalized parsing so that the normalization candidates are used for more decisions in the parsing process than just assigning POS tags.", 
        "129": "To further improve the F1-score for the parsing of Tweets, complementary methods can be used: reranking, uptraining or ensembling parsers and grammars are some obvious next steps.", 
        "130": "The source code of our experiments has been made publicly available 4.", 
        "131": "Acknowledgements  We would like to thank our colleagues, especially Barbara Plank and Antonio Toral , and the anonymous reviewers for their valuable feedback.", 
        "132": "Furthermore we would like to thank Jennifer Foster for sharing the Twitter treebank.", 
        "133": "This work is part of the Parsing Algorithms for Uncertain Input project, funded by the Nuance Foundation.", 
        "134": "4https://bitbucket.org/robvanderg/ berkeleygraph"
    }, 
    "document_id": "P17-2078.pdf.json"
}
