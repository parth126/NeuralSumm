{
    "abstract_sentences": {
        "1": "We consider the problem of parsing natural language descriptions into source code written in a general-purpose programming language like Python.", 
        "2": "Existing datadriven methods treat this problem as a language generation task without considering the underlying syntax of the target programming language.", 
        "3": "Informed by previous work in semantic parsing, in this paper we propose a novel neural architecture powered by a grammar model to explicitly capture the target syntax as prior knowledge.", 
        "4": "Experiments find this an effective way to scale up to generation of complex programs from natural language descriptions, achieving state-of-the-art results that well outperform previous code generation and semantic parsing approaches."
    }, 
    "body_sentences": {
        "1": "  Proceedings of the 55th Annual Meeting of the Association for Computational Linguistics, pages 440\u2013450 Vancouver, Canada, July 30 - August 4, 2017. c\u00a92017 Association for Computational Linguistics\nhttps://doi.org/10.18653/v1/P17-1041  1 Introduction  Every programmer has experienced the situation where they know what they want to do, but do not have the ability to turn it into a concrete implementation.", 
        "2": "For example, a Python programmer may want to \u201csort my list in descending order,\u201d but not be able to come up with the proper syntax sorted(my list, reverse=True) to realize his intention.", 
        "3": "To resolve this impasse, it is common for programmers to search the web in natural language (NL), find an answer, and modify it into the desired form (Brandt et al., 2009, 2010).", 
        "4": "However, this is time-consuming, and thus the software engineering literature is ripe with methods to directly generate code from NL descriptions, mostly with hand-engineered methods highly tailored to specific programming languages (Balzer, 1985; Little and Miller, 2009; Gvero and Kuncak, 2015).", 
        "5": "In parallel, the NLP community has developed methods for data-driven semantic parsing, which attempt to map NL to structured logical forms executable by computers.", 
        "6": "These logical forms can be general-purpose meaning representations (Clark and Curran, 2007; Banarescu et al., 2013), formalisms for querying knowledge bases (Tang and Mooney, 2001; Zettlemoyer and Collins, 2005; Berant et al., 2013) and instructions for robots or personal assistants (Artzi and Zettlemoyer, 2013; Quirk et al., 2015; Misra et al., 2015), among others.", 
        "7": "While these methods have the advantage of being learnable from data, compared to the programming languages (PLs) in use by programmers, the domain-specific languages targeted by these works have a schema and syntax that is relatively simple.", 
        "8": "Recently, Ling et al.", 
        "9": "(2016) have proposed a data-driven code generation method for high-level, general-purpose PLs like Python and Java.", 
        "10": "This work treats code generation as a sequence-tosequence modeling problem, and introduce methods to generate words from character-level models, and copy variable names from input descriptions.", 
        "11": "However, unlike most work in semantic parsing, it does not consider the fact that code has to be well-defined programs in the target syntax.", 
        "12": "In this work, we propose a data-driven syntaxbased neural network model tailored for generation of general-purpose PLs like Python.", 
        "13": "In order to capture the strong underlying syntax of the PL, we define a model that transduces an NL statement into an Abstract Syntax Tree (AST; Fig.", 
        "14": "1(a), \u00a7 2) for the target PL.", 
        "15": "ASTs can be deterministically generated for all well-formed programs using standard parsers provided by the PL, and thus give us a way to obtain syntax information with minimal engineering.", 
        "16": "Once we generate an AST, we can use deterministic generation tools to convert the AST into surface code.", 
        "17": "We hypothesize\n440\nthat such a structured approach has two benefits.", 
        "18": "First, we hypothesize that structure can be used to constrain our search space, ensuring generation of well-formed code.", 
        "19": "To this end, we propose a syntax-driven neural code generation model.", 
        "20": "The backbone of our approach is a grammar model (\u00a7 3) which formalizes the generation story of a derivation AST into sequential application of actions that either apply production rules (\u00a7 3.1), or emit terminal tokens (\u00a7 3.2).", 
        "21": "The underlying syntax of the PL is therefore encoded in the grammar model a priori as the set of possible actions.", 
        "22": "Our approach frees the model from recovering the underlying grammar from limited training data, and instead enables the system to focus on learning the compositionality among existing grammar rules.", 
        "23": "Xiao et al.", 
        "24": "(2016) have noted that this imposition of structure on neural models is useful for semantic parsing, and we expect this to be even more important for general-purpose PLs where the syntax trees are larger and more complex.", 
        "25": "Second, we hypothesize that structural information helps to model information flow within the neural network, which naturally reflects the recursive structure of PLs.", 
        "26": "To test this, we extend a standard recurrent neural network (RNN) decoder to allow for additional neural connections which reflect the recursive structure of an AST (\u00a7 4.2).", 
        "27": "As an example, when expanding the node ?", 
        "28": "in Fig.", 
        "29": "1(a), we make use of the information from both its parent and left sibling (the dashed rectangle).", 
        "30": "This enables us to locally pass information of relevant code segments via neural network connections, resulting in more confident predictions.", 
        "31": "Experiments (\u00a7 5) on two Python code generation tasks show 11.7% and 9.3% absolute improvements in accuracy against the state-of-the-art system (Ling et al., 2016).", 
        "32": "Our model also gives competitive performance on a standard semantic parsing benchmark1.", 
        "33": "1Implementation available at https://github.", 
        "34": "com/neulab/NL2code  2 The Code Generation Problem  Given an NL description x, our task is to generate the code snippet c in a modern PL based on the intent of x.", 
        "35": "We attack this problem by first generating the underlying AST.", 
        "36": "We define a probabilistic grammar model of generating an AST y given x: p(y|x).", 
        "37": "The best-possible AST y\u0302 is then given by\ny\u0302 = arg max y\np(y|x).", 
        "38": "(1)\ny\u0302 is then deterministically converted to the corresponding surface code c.2 While this paper uses examples from Python code, our method is PLagnostic.", 
        "39": "Before detailing our approach, we first present a brief introduction of the Python AST and its underlying grammar.", 
        "40": "The Python abstract grammar contains a set of production rules, and an AST is generated by applying several production rules composed of a head node and multiple child nodes.", 
        "41": "For instance, the first rule in Tab.", 
        "42": "1 is used to generate the function call sorted(\u00b7) in Fig.", 
        "43": "1(a).", 
        "44": "It consists of a head node of type Call, and three child nodes of type expr, expr* and keyword*, respectively.", 
        "45": "Labels of each node are noted within brackets.", 
        "46": "In an AST, non-terminal nodes sketch the general structure of the target code, while terminal nodes can be categorized into two types: operation terminals and variable terminals.", 
        "47": "Operation terminals correspond to basic arithmetic operations like AddOp.Variable terminal nodes store values for variables and constants of built-in data types3.", 
        "48": "For instance, all terminal nodes in Fig.", 
        "49": "1(a) are variable terminal nodes.", 
        "50": "3 Grammar Model  Before detailing our neural code generation method, we first introduce the grammar model at its core.", 
        "51": "Our probabilistic grammar model defines the generative story of a derivation AST.", 
        "52": "We fac-\n2We use astor library to convert ASTs into Python code.", 
        "53": "3bool, float, int, str.", 
        "54": "torize the generation process of an AST into sequential application of actions of two types:\n\u2022 APPLYRULE[r] applies a production rule r to the current derivation tree;\n\u2022 GENTOKEN[v] populates a variable terminal node by appending a terminal token v.\nFig.", 
        "55": "1(b) shows the generation process of the target AST in Fig.", 
        "56": "1(a).", 
        "57": "Each node in Fig.", 
        "58": "1(b) indicates an action.", 
        "59": "Action nodes are connected by solid arrows which depict the chronological order of the action flow.", 
        "60": "The generation proceeds in depth-first, left-to-right order (dotted arrows represent parent feeding, explained in \u00a7 4.2.1).", 
        "61": "Formally, under our grammar model, the probability of generating an AST y is factorized as:\np(y|x) = TY\nt=1\np(at|x, a<t), (2)\nwhere at is the action taken at time step t, and a<t is the sequence of actions before t. We will explain how to compute the action probabilities p(at|\u00b7) in Eq.", 
        "62": "(2) in \u00a7 4.", 
        "63": "Put simply, the generation process begins from a root node at t0, and proceeds by the model choosing APPLYRULE actions to generate the overall program structure from a closed set of grammar rules, then at leaves of the tree corresponding to variable terminals, the model switches to GENTOKEN actions to generate variables or constants from the open set.", 
        "64": "We describe this process in detail below.", 
        "65": "3.1 APPLYRULE Actions  APPLYRULE actions generate program structure, expanding the current node (the frontier node at\ntime step t: nft) in a depth-first, left-to-right traversal of the tree.", 
        "66": "Given a fixed set of production rules, APPLYRULE chooses a rule r from the subset that has a head matching the type of nft , and uses r to expand nft by appending all child nodes specified by the selected production.", 
        "67": "As an example, in Fig.", 
        "68": "1(b), the rule Call 7!", 
        "69": "expr.", 
        "70": ".", 
        "71": ".", 
        "72": "expands the frontier node Call at time step t4, and its three child nodes expr, expr* and keyword* are added to the derivation.", 
        "73": "APPLYRULE actions grow the derivation AST by appending nodes.", 
        "74": "When a variable terminal node (e.g., str) is added to the derivation and becomes the frontier node, the grammar model then switches to GENTOKEN actions to populate the variable terminal with tokens.", 
        "75": "Unary Closure Sometimes, generating an AST requires applying a chain of unary productions.", 
        "76": "For instance, it takes three time steps (t9 t11) to generate the sub-structure expr* 7!", 
        "77": "expr 7!", 
        "78": "Name 7!", 
        "79": "str in Fig.", 
        "80": "1(a).", 
        "81": "This can be effectively reduced to one step of APPLYRULE action by taking the closure of the chain of unary productions and merging them into a single rule: expr* 7!\u21e4 str.", 
        "82": "Unary closures reduce the number of actions needed, but would potentially increase the size of the grammar.", 
        "83": "In our experiments we tested our model both with and without unary closures (\u00a7 5).", 
        "84": "3.2 GENTOKEN Actions  Once we reach a frontier node nft that corresponds to a variable type (e.g., str), GENTOKEN actions are used to fill this node with values.", 
        "85": "For generalpurpose PLs like Python, variables and constants have values with one or multiple tokens.", 
        "86": "For in-\nstance, a node that stores the name of a function (e.g., sorted) has a single token, while a node that denotes a string constant (e.g., a=\u2018hello world\u2019) could have multiple tokens.", 
        "87": "Our model copes with both scenarios by firing GENTOKEN actions at one or more time steps.", 
        "88": "At each time step, GENTOKEN appends one terminal token to the current frontier variable node.", 
        "89": "A special </n> token is used to \u201cclose\u201d the node.", 
        "90": "The grammar model then proceeds to the new frontier node.", 
        "91": "Terminal tokens can be generated from a predefined vocabulary, or be directly copied from the input NL.", 
        "92": "This is motivated by the observation that the input description often contains out-ofvocabulary (OOV) variable names or literal values that are directly used in the target code.", 
        "93": "For instance, in our running example the variable name my list can be directly copied from the the input at t12.", 
        "94": "We give implementation details in \u00a7 4.2.2.", 
        "95": "4 Estimating Action Probabilities  We estimate action probabilities in Eq.", 
        "96": "(2) using attentional neural encoder-decoder models with an information flow structured by the syntax trees.", 
        "97": "4.1 Encoder  For an NL description x consisting of n words {wi}ni=1, the encoder computes a context sensitive embedding hi for each wi using a bidirectional Long Short-Term Memory (LSTM) network (Hochreiter and Schmidhuber, 1997), similar to the setting in (Bahdanau et al., 2014).", 
        "98": "See supplementary materials for detailed equations.", 
        "99": "4.2 Decoder  The decoder uses an RNN to model the sequential generation process of an AST defined as Eq.", 
        "100": "(2).", 
        "101": "Each action step in the grammar model naturally grounds to a time step in the decoder RNN.", 
        "102": "Therefore, the action sequence in Fig.", 
        "103": "1(b) can be interpreted as unrolling RNN time steps, with solid arrows indicating RNN connections.", 
        "104": "The RNN maintains an internal state to track the generation process (\u00a7 4.2.1), which will then be used to compute action probabilities p(at|x, a<t) (\u00a7 4.2.2).", 
        "105": "4.2.1 Tracking Generation States  Our implementation of the decoder resembles a vanilla LSTM, with additional neural connections (parent feeding, Fig.", 
        "106": "1(b)) to reflect the topological structure of an AST.", 
        "107": "The decoder\u2019s internal hidden state at time step t, st, is given by:\nst = fLSTM([at 1 : ct : pt : nft ], st 1), (3)\nwhere fLSTM(\u00b7) is the LSTM update function.", 
        "108": "[:] denotes vector concatenation.", 
        "109": "st will then be used to compute action probabilities p(at|x, a<t) in Eq.", 
        "110": "(2).", 
        "111": "Here, at 1 is the embedding of the previous action.", 
        "112": "ct is a context vector retrieved from input encodings {hi} via soft attention.", 
        "113": "pt is a vector that encodes the information of the parent action.", 
        "114": "nft denotes the node type embedding of the current frontier node nft\n4.", 
        "115": "Intuitively, feeding the decoder the information of nft helps the model to keep track of the frontier node to expand.", 
        "116": "Action Embedding at We maintain two action embedding matrices, WR and WG.", 
        "117": "Each row in WR (WG) corresponds to an embedding vector for an action APPLYRULE[r] (GENTOKEN[v]).", 
        "118": "Context Vector ct The decoder RNN uses soft attention to retrieve a context vector ct from the input encodings {hi} pertain to the prediction of the current action.", 
        "119": "We follow Bahdanau et al.", 
        "120": "(2014) and use a Deep Neural Network (DNN) with a single hidden layer to compute attention weights.", 
        "121": "Parent Feeding pt Our decoder RNN uses additional neural connections to directly pass information from parent actions.", 
        "122": "For instance, when computing s9, the information from its parent action step t4 will be used.", 
        "123": "Formally, we define the parent action step pt as the time step at which the frontier node nft is generated.", 
        "124": "As an example, for t9, its parent action step p9 is t4, since nf9 is the node ?, which is generated at t4 by the APPLYRULE[Call7!.", 
        "125": ".", 
        "126": ".]", 
        "127": "action.", 
        "128": "We model parent information pt from two sources: (1) the hidden state of parent action spt , and (2) the embedding of parent action apt .", 
        "129": "pt is the concatenation.", 
        "130": "The parent feeding schema en-\n4We maintain an embedding for each node type.", 
        "131": "ables the model to utilize the information of parent code segments to make more confident predictions.", 
        "132": "Similar approaches of injecting parent information were also explored in the SEQ2TREE model in Dong and Lapata (2016)5.", 
        "133": "4.2.2 Calculating Action Probabilities  In this section we explain how action probabilities p(at|x, a<t) are computed based on st. APPLYRULE The probability of applying rule r as the current action at is given by a softmax6:\np(at = APPLYRULE[r]|x, a<t) = softmax(WR \u00b7 g(st))| \u00b7 e(r) (4) where g(\u00b7) is a non-linearity tanh(W \u00b7st+b), and e(r) the one-hot vector for rule r. GENTOKEN As in \u00a7 3.2, a token v can be generated from a predefined vocabulary or copied from the input, defined as the marginal probability:\np(at = GENTOKEN[v]|x, a<t) = p(gen|x, a<t)p(v|gen, x, a<t)\n+ p(copy|x, a<t)p(v|copy, x, a<t).", 
        "134": "The selection probabilities p(gen|\u00b7) and p(copy|\u00b7) are given by softmax(WS \u00b7 st).", 
        "135": "The probability of generating v from the vocabulary, p(v|gen, x, a<t), is defined similarly as Eq.", 
        "136": "(4), except that we use the GENTOKEN embedding matrix WG, and we concatenate the context vector ct with st as input.", 
        "137": "To model the copy probability, we follow recent advances in modeling copying mechanism in neural networks (Gu et al., 2016; Jia and Liang, 2016; Ling et al., 2016), and use a pointer network (Vinyals et al., 2015) to compute the probability of copying the i-th word from the input by attending to input representations {hi}:\np(wi|copy, x, a<t) = exp(!", 
        "138": "(hi, st, ct))Pn\ni0=1 exp(!", 
        "139": "(hi0 , st, ct)) ,\nwhere !", 
        "140": "(\u00b7) is a DNN with a single hidden layer.", 
        "141": "Specifically, if wi is an OOV word (e.g., the variable name my list), which is represented by a special <unk> token during encoding, we then directly copy the actual word wi from the input description to the derivation.", 
        "142": "4.3 Training and Inference  Given a dataset of pairs of NL descriptions xi and code snippets ci, we parse ci into its AST yi and\n5SEQ2TREE generates tree-structured outputs by conditioning on the hidden states of parent non-terminals, while our parent feeding uses the states of parent actions.", 
        "143": "6We do not show bias terms for all softmax equations.", 
        "144": "decompose yi into a sequence of oracle actions, which explains the generation story of yi under the grammar model.", 
        "145": "The model is then optimized by maximizing the log-likelihood of the oracle action sequence.", 
        "146": "At inference time, given an NL description, we use beam search to approximate the best AST y\u0302 in Eq.", 
        "147": "(1).", 
        "148": "See supplementary materials for the pseudo-code of the inference algorithm.", 
        "149": "5 Experimental Evaluation    5.1 Datasets and Metrics  HEARTHSTONE (HS) dataset (Ling et al., 2016) is a collection of Python classes that implement cards for the card game HearthStone.", 
        "150": "Each card comes with a set of fields (e.g., name, cost, and description), which we concatenate to create the input sequence.", 
        "151": "This dataset is relatively difficult: input descriptions are short, while the target code is in complex class structures, with each AST having 137 nodes on average.", 
        "152": "DJANGO dataset (Oda et al., 2015) is a collection of lines of code from the Django web framework, each with a manually annotated NL description.", 
        "153": "Compared with the HS dataset where card implementations are somewhat homogenous, examples in DJANGO are more diverse, spanning a wide variety of real-world use cases like string manipulation, IO operations, and exception handling.", 
        "154": "IFTTT dataset (Quirk et al., 2015) is a domainspecific benchmark that provides an interesting side comparison.", 
        "155": "Different from HS and DJANGO which are in a general-purpose PL, programs in IFTTT are written in a domain-specific language used by the IFTTT task automation\nApp.", 
        "156": "Users of the App write simple instructions (e.g., If Instagram.AnyNewPhotoByYou Then Dropbox.AddFileFromURL) with NL descriptions (e.g., \u201cAutosave your Instagram photos to Dropbox\u201d).", 
        "157": "Each statement inside the If or Then clause consists of a channel (e.g., Dropbox) and a function (e.g., AddFileFromURL)7.", 
        "158": "This simple structure results in much more concise ASTs (7 nodes on average).", 
        "159": "Because all examples are created by ordinary Apps users, the dataset is highly noisy, with input NL very loosely connected to target ASTs.", 
        "160": "The authors thus provide a high-quality filtered test set, where each example is verified by at least three annotators.", 
        "161": "We use this set for evaluation.", 
        "162": "Also note IFTTT\u2019s grammar has more productions (Tab.", 
        "163": "2), but this does not imply that its grammar is more complex.", 
        "164": "This is because for HS and DJANGO terminal tokens are generated by GENTOKEN actions, but for IFTTT, all the code is generated directly by APPLYRULE actions.", 
        "165": "Metrics As is standard in semantic parsing, we measure accuracy, the fraction of correctly generated examples.", 
        "166": "However, because generating an exact match for complex code structures is nontrivial, we follow Ling et al.", 
        "167": "(2016), and use tokenlevel BLEU-4 with as a secondary metric, defined as the averaged BLEU scores over all examples.8  5.2 Setup  Preprocessing All input descriptions are tokenized using NLTK.", 
        "168": "We perform simple canonicalization for DJANGO, such as replacing quoted strings in the inputs with place holders.", 
        "169": "See supplementary materials for details.", 
        "170": "We extract unary closures whose frequency is larger than a threshold k (k = 30 for HS and 50 for DJANGO).", 
        "171": "Configuration The size of all embeddings is 128, except for node type embeddings, which is 64.", 
        "172": "The dimensions of RNN states and hidden layers are 256 and 50, respectively.", 
        "173": "Since our datasets are relatively small for a data-hungry neural model, we impose strong regularization using recurrent\n7Like Beltagy and Quirk (2016), we strip function parameters since they are mostly specific to users.", 
        "174": "8These two metrics are not ideal: accuracy only measures exact match and thus lacks the ability to give credit to semantically correct code that is different from the reference, while it is not clear whether BLEU provides an appropriate proxy for measuring semantics in the code generation task.", 
        "175": "A more intriguing metric would be directly measuring semantic/functional code equivalence, for which we present a pilot study at the end of this section (cf.", 
        "176": "Error Analysis).", 
        "177": "We leave exploring more sophisticated metrics (e.g.", 
        "178": "based on static code analysis) as future work.", 
        "179": "dropouts (Gal and Ghahramani, 2016) for all recurrent networks, together with standard dropout layers added to the inputs and outputs of the decoder RNN.", 
        "180": "We validate the dropout probability from {0, 0.2, 0.3, 0.4}.", 
        "181": "For decoding, we use a beam size of 15.", 
        "182": "5.3 Results  Evaluation results for Python code generation tasks are listed in Tab.", 
        "183": "3.", 
        "184": "Numbers for our systems are averaged over three runs.", 
        "185": "We compare primarily with two approaches: (1) Latent Predictor Network (LPN), a state-of-the-art sequenceto-sequence code generation model (Ling et al., 2016), and (2) SEQ2TREE, a neural semantic parsing model (Dong and Lapata, 2016).", 
        "186": "SEQ2TREE generates trees one node at a time, and the target grammar is not explicitly modeled a priori, but implicitly learned from data.", 
        "187": "We test both the original SEQ2TREE model released by the authors and our revised one (SEQ2TREE\u2013UNK) that uses unknown word replacement to handle rare words (Luong et al., 2015).", 
        "188": "For completeness, we also compare with a strong neural machine translation (NMT) system (Neubig, 2015) using a standard encoder-decoder architecture with attention and unknown word replacement9, and include numbers from other baselines used in Ling et al.", 
        "189": "(2016).", 
        "190": "On the HS dataset, which has relatively large ASTs, we use unary closure for our model and SEQ2TREE, and for DJANGO we do not.", 
        "191": "9For NMT, we also attempted to find the best-scoring syntactically correct predictions in the size-5 beam, but this did not yield a significant improvement over the NMT results in Tab.", 
        "192": "3.", 
        "193": "System Comparison As in Tab.", 
        "194": "3, our model registers 11.7% and 9.3% absolute improvements over LPN in accuracy on HS and DJANGO.", 
        "195": "This boost in performance strongly indicates the importance of modeling grammar in code generation.", 
        "196": "For the baselines, we find LPN outperforms NMT and SEQ2TREE in most cases.", 
        "197": "We also note that SEQ2TREE achieves a decent accuracy of 13.6% on HS, which is due to the effect of unknown word replacement, since we only achieved 1.5% without it.", 
        "198": "A closer comparison with SEQ2TREE is insightful for understanding the advantage of our syntax-driven approach, since both SEQ2TREE and our system output ASTs: (1) SEQ2TREE predicts one node each time step, and requires additional \u201cdummy\u201d nodes to mark the boundary of a subtree.", 
        "199": "The sheer number of nodes in target ASTs makes the prediction process error-prone.", 
        "200": "In contrast, the APPLYRULE actions of our grammar model allows for generating multiple nodes at a single time step.", 
        "201": "Empirically, we found that in HS, SEQ2TREE takes more than 300 time steps on average to generate a target AST, while our model takes only 170 steps.", 
        "202": "(2) SEQ2TREE does not directly use productions in the grammar, which possibly leads to grammatically incorrect ASTs and thus empty code outputs.", 
        "203": "We observe that the ratio of grammatically incorrect ASTs predicted by SEQ2TREE on HS and DJANGO are 21.2% and 10.9%, respectively, while our system guarantees grammaticality.", 
        "204": "Ablation Study We also ablated our bestperforming models to analyze the contribution of each component.", 
        "205": "\u201c\u2013frontier embed.\u201d removes the frontier node embedding nft from the decoder RNN inputs (Eq.", 
        "206": "(3)).", 
        "207": "This yields worse results on DJANGO while gives slight improvements in ac-\ncuracy on HS.", 
        "208": "This is probably because that the grammar of HS has fewer node types, and thus the RNN is able to keep track of nft without depending on its embedding.", 
        "209": "Next, \u201c\u2013parent feed.\u201d removes the parent feeding mechanism.", 
        "210": "The accuracy drops significantly on HS, with a marginal deterioration on DJANGO.", 
        "211": "This result is interesting because it suggests that parent feeding is more important when the ASTs are larger, which will be the case when handling more complicated code generation tasks like HS.", 
        "212": "Finally, removing the pointer network (\u201c\u2013copy terminals\u201d) in GENTOKEN actions gives poor results, indicating that it is important to directly copy variable names and values from the input.", 
        "213": "The results with and without unary closure demonstrate that, interestingly, it is effective on HS but not on DJANGO.", 
        "214": "We conjecture that this is because on HS it significantly reduces the number of actions from 173 to 142 (c.f., Tab.", 
        "215": "2), with the number of productions in the grammar remaining unchanged.", 
        "216": "In contrast, DJANGO has a broader domain, and thus unary closure results in more productions in the grammar (237 for DJANGO vs. 100 for HS), increasing sparsity.", 
        "217": "Performance by the size of AST We further investigate our model\u2019s performance w.r.t.", 
        "218": "the size of the gold-standard ASTs in Figs.", 
        "219": "3 and 4.", 
        "220": "Not surprisingly, the performance drops when the size of the reference ASTs increases.", 
        "221": "Additionally, on the HS dataset, the BLEU score still remains at around 50 even when the size of ASTs grows to 200, indicating that our proposed syntax-driven approach is robust for long code segments.", 
        "222": "Domain Specific Code Generation Although this is not the focus of our work, evaluation on IFTTT brings us closer to a standard semantic parsing set-\nting, which helps to investigate similarities and differences between generation of more complicated general-purpose code and and more limiteddomain simpler code.", 
        "223": "Tab.", 
        "224": "4 shows the results, following the evaluation protocol in (Beltagy and Quirk, 2016) for accuracies at both channel and full parse tree (channel + function) levels.", 
        "225": "Our full model performs on par with existing neural network-based methods, while outperforming other neural models in full tree accuracy (82.0%).", 
        "226": "This score is close to the best classical method (LR), which is based on a logistic regression model with rich hand-engineered features (e.g., brown clusters and paraphrase).", 
        "227": "Also note that the performance between NMT and other neural models is much closer compared with the results in Tab.", 
        "228": "3.", 
        "229": "This suggests that general-purpose code generation is more challenging than the simpler IFTTT setting, and therefore modeling structural information is more helpful.", 
        "230": "Case Studies We present output examples in Tab.", 
        "231": "5.", 
        "232": "On HS, we observe that most of the time our model gives correct predictions by filling learned code templates from training data with arguments (e.g., cost) copied from input.", 
        "233": "This is in line with the findings in Ling et al.", 
        "234": "(2016).", 
        "235": "However, we do find interesting examples indicating that the model learns to generalize beyond trivial\ncopying.", 
        "236": "For instance, the first example is one that our model predicted wrong \u2014 it generated code block A instead of the gold B (it also missed a function definition not shown here).", 
        "237": "However, we find that the block A actually conveys part of the input intent by destroying all, not some, of the minions.", 
        "238": "Since we are unable to find code block A in the training data, it is clear that the model has learned to generalize to some extent from multiple training card examples with similar semantics or structure.", 
        "239": "The next two examples are from DJANGO.", 
        "240": "The first one shows that the model learns the usage of common API calls (e.g., os.path.join), and how to populate the arguments by copying from inputs.", 
        "241": "The second example illustrates the difficulty of generating code with complex nested structures like lambda functions, a scenario worth further investigation in future studies.", 
        "242": "More examples are attached in supplementary materials.", 
        "243": "Error Analysis To understand the sources of errors and how good our evaluation metric (exact match) is, we randomly sampled and labeled 100 and 50 failed examples (with accuracy=0) from DJANGO and HS, respectively.", 
        "244": "We found that around 2% of these examples in the two datasets are actually semantically equivalent.", 
        "245": "These examples include: (1) using different parameter names when defining a function; (2) omitting (or adding) default values of parameters in function calls.", 
        "246": "While the rarity of such examples suggests that our exact match metric is reasonable, more advanced evaluation metrics based on statistical code analysis are definitely intriguing future work.", 
        "247": "For DJANGO, we found that 30% of failed cases were due to errors where the pointer network failed to appropriately copy a variable name into the correct position.", 
        "248": "25% were because the generated code only partially implemented the required functionality.", 
        "249": "10% and 5% of errors were due to malformed English inputs and pre-processing errors, respectively.", 
        "250": "The remaining 30% of examples were errors stemming from multiple sources, or errors that could not be easily categorized into the above.", 
        "251": "For HS, we found that all failed card examples were due to partial implementation errors, such as the one shown in Table 5.", 
        "252": "6 Related Work  Code Generation and Analysis Most works on code generation focus on generating code for domain specific languages (DSLs) (Kushman and\nBarzilay, 2013; Raza et al., 2015; Manshadi et al., 2013), with neural network-based approaches recently explored (Liu et al., 2016; Parisotto et al., 2016; Balog et al., 2016).", 
        "253": "For general-purpose code generation, besides the general framework of Ling et al.", 
        "254": "(2016), existing methods often use language and task-specific rules and strategies (Lei et al., 2013; Raghothaman et al., 2016).", 
        "255": "A similar line is to use NL queries for code retrieval (Wei et al., 2015; Allamanis et al., 2015).", 
        "256": "The reverse task of generating NL summaries from source code has also been explored (Oda et al., 2015; Iyer et al., 2016).", 
        "257": "Finally, our work falls into the broad field of probabilistic modeling of source code (Maddison and Tarlow, 2014; Nguyen et al., 2013).", 
        "258": "Our approach of factoring an AST using probabilistic models is closely related to Allamanis et al.", 
        "259": "(2015), which uses a factorized model to measure the semantic relatedness between NL and ASTs for code retrieval, while our model tackles the more challenging generation task.", 
        "260": "Semantic Parsing Our work is related to the general topic of semantic parsing, which aims to transform NL descriptions into executable logical forms.", 
        "261": "The target logical forms can be viewed as DSLs.", 
        "262": "The parsing process is often guided by grammatical formalisms like combinatory categorical grammars (Kwiatkowski et al., 2013; Artzi et al., 2015), dependency-based syntax (Liang et al., 2011; Pasupat and Liang, 2015) or taskspecific formalisms (Clarke et al., 2010; Yih et al., 2015; Krishnamurthy et al., 2016; Mei et al., 2016).", 
        "263": "Recently, there are efforts in designing neural network-based semantic parsers (Misra and Artzi, 2016; Dong and Lapata, 2016; Neelakantan et al., 2016; Yin et al., 2016).", 
        "264": "Several approaches have be proposed to utilize grammar knowledge in a neural parser, such as augmenting the training data by generating examples guided by the grammar (Kocisky\u0301 et al., 2016; Jia and Liang, 2016).", 
        "265": "Liang et al.", 
        "266": "(2016) used a neural decoder which constrains the space of next valid tokens in the query language for question answering.", 
        "267": "Finally, the structured prediction approach proposed by Xiao et al.", 
        "268": "(2016) is closely related to our model in using the underlying grammar as prior knowledge to constrain the generation process of derivation trees, while our method is based on a unified grammar model which jointly captures production rule application and terminal symbol generation, and scales to general purpose code generation tasks.", 
        "269": "7 Conclusion  This paper proposes a syntax-driven neural code generation approach that generates an abstract syntax tree by sequentially applying actions from a grammar model.", 
        "270": "Experiments on both code generation and semantic parsing tasks demonstrate the effectiveness of our proposed approach.", 
        "271": "Acknowledgment  We are grateful to Wang Ling for his generous help with LPN and setting up the benchmark.", 
        "272": "We thank I. Beltagy for providing the IFTTT dataset.", 
        "273": "We also thank Li Dong for helping with SEQ2TREE and insightful discussions."
    }, 
    "document_id": "P17-1041.pdf.json"
}
