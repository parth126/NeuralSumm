{
    "abstract_sentences": {
        "1": "We propose a novel factor graph model for argument mining, designed for settings in which the argumentative relations in a document do not necessarily form a tree structure.", 
        "2": "(This is the case in over 20% of the web comments dataset we release.)", 
        "3": "Our model jointly learns elementary unit type classification and argumentative relation prediction.", 
        "4": "Moreover, our model supports SVM and RNN parametrizations, can enforce structure constraints (e.g., transitivity), and can express dependencies between adjacent relations and propositions.", 
        "5": "Our approaches outperform unstructured baselines in both web comments and argumentative essay datasets."
    }, 
    "body_sentences": {
        "1": "  Proceedings of the 55th Annual Meeting of the Association for Computational Linguistics, pages 985\u2013995 Vancouver, Canada, July 30 - August 4, 2017. c\u00a92017 Association for Computational Linguistics\nhttps://doi.org/10.18653/v1/P17-1091  1 Introduction  Argument mining consists of the automatic identification of argumentative structures in documents, a valuable task with applications in policy making, summarization, and education, among others.", 
        "2": "The argument mining task includes the tightly-knit subproblems of classifying propositions into elementary unit types and detecting argumentative relations between the elementary units.", 
        "3": "The desired output is a document argumentation graph structure, such as the one in Figure 1, where propositions are denoted by letter subscripts, and the associated argumentation graph shows their types and support relations between them.", 
        "4": "Most annotation and prediction efforts in argument mining have focused on tree or forest structures (Peldszus and Stede, 2015; Stab and Gurevych, 2016), constraining argument structures to form one or more trees.", 
        "5": "This makes the problem computationally easier by enabling the use of maximum spanning tree\u2013style parsing ap-\nproaches.", 
        "6": "However, argumentation in the wild can be less well-formed.", 
        "7": "The argument put forth in Figure 1, for instance, consists of two components: a simple tree structure and a more complex graph structure (c jointly supports b and d).", 
        "8": "In this work, we design a flexible and highly expressive structured prediction model for argument mining, jointly learning to classify elementary units (henceforth propositions) and to identify the argumentative relations between them (henceforth links).", 
        "9": "By formulating argument mining as inference in a factor graph (Kschischang et al., 2001), our model (described in Section 4) can account for correlations between the two tasks, can consider second order link structures (e.g., in Figure 1, c \u2192 b \u2192 a), and can impose arbitrary constraints (e.g., transitivity).", 
        "10": "To parametrize our models, we evaluate two alternative directions: linear structured SVMs\n1We describe proposition types (FACT, etc.)", 
        "11": "in Section 3.", 
        "12": "985\n(Tsochantaridis et al., 2005), and recurrent neural networks with structured loss, extending (Kiperwasser and Goldberg, 2016).", 
        "13": "Interestingly, RNNs perform poorly when trained with classification losses, but become competitive with the featureengineered structured SVMs when trained within our proposed structured learning model.", 
        "14": "We evaluate our approach on two argument mining datasets.", 
        "15": "Firstly, on our new Cornell eRulemaking Corpus \u2013 CDCP,2 consisting of argument annotations on comments from an eRulemaking discussion forum, where links don\u2019t always form trees (Figure 1 shows an abridged example comment, and Section 3 describes the dataset in more detail).", 
        "16": "Secondly, on the UKP argumentative essays v2 (henceforth UKP), where argument graphs are annotated strictly as multiple trees (Stab and Gurevych, 2016).", 
        "17": "In both cases, the results presented in Section 5 confirm that our models outperform unstructured baselines.", 
        "18": "On UKP, we improve link prediction over the best reported result in (Stab and Gurevych, 2016), which is based on integer linear programming postprocessing.", 
        "19": "For insight into the strengths and weaknesses of the proposed models, as well as into the differences between SVM and RNN parameterizations, we perform an error analysis in Section 5.1.", 
        "20": "To support argument mining research, we also release our Python implementation, Marseille.3  2 Related work  Our factor graph formulation draws from ideas previously used independently in parsing and argument mining.", 
        "21": "In particular, maximum spanning tree (MST) methods for arc-factored dependency parsing have been successfully used by McDonald et al.", 
        "22": "(2005) and applied to argument mining with mixed results by Peldszus and Stede (2015).", 
        "23": "As they are not designed for the task, MST parsers cannot directly handle proposition classification or model the correlation between proposition and link prediction\u2014a limitation our model addresses.", 
        "24": "Using RNN features in an MST parser with a structured loss was proposed by Kiperwasser and Goldberg (2016); their model can be seen as a particular case of our factor graph approach, limited to link prediction with a tree structure constraint.", 
        "25": "Our models support multi-task learning for proposition classification, parameter-\n2Dataset available at http://joonsuk.org.", 
        "26": "3Available at https://github.com/vene/marseille.", 
        "27": "izing adjacent links with higher-order structures (e.g., c \u2192 b \u2192 a) and enforcing arbitrary constraints on the link structure, not limited to trees.", 
        "28": "Such higher-order structures and logic constraints have been successfully used for dependency and semantic parsing byMartins et al.", 
        "29": "(2013) andMartins and Almeida (2014); to our knowledge we are the first to apply them to argument mining, as well as the first to parametrize them with neural networks.", 
        "30": "Stab and Gurevych (2016) used an integer linear program to combine the output of independent proposition and link classifiers using a hand-crafted scoring formula, an approach similar to our baseline.", 
        "31": "Our factor graph method can combine the two tasks in a more principled way, as it fully learns the correlation between the two tasks without relying on hand-crafted scoring, and therefore can readily be applied to other argumentation datasets.", 
        "32": "Furthermore, our model can enforce the tree structure constraint, required on the UKP dataset, using MST cycle constraints used by Stab and Gurevych (2016), thanks to the AD3 inference algorithm (Martins et al., 2015).", 
        "33": "Sequence tagging has been applied to the related structured tasks of proposition identification and classification (Stab and Gurevych, 2016; Habernal and Gurevych, 2016; Park et al., 2015b); integrating such models is an important next step.", 
        "34": "Meanwhile, a new direction in argument mining explores pointer networks (Potash et al., 2016); a promising method, currently lacking support for tree structures and domain-specific constraints.", 
        "35": "3 Data  We release a new argument mining dataset consisting of user comments about rule proposals regarding Consumer Debt Collection Practices (CDCP) by the Consumer Financial Protection Bureau collected from an eRulemaking website, http:// regulationroom.org.", 
        "36": "Argumentation structures found in web discussion forums, such as the eRulemaking one we use, can be more free-form than the ones encountered in controlled, elicited writing such as (Peldszus and Stede, 2015).", 
        "37": "For this reason, we adopt the model proposed by Park et al.", 
        "38": "(2015a), which does not constrain links to form tree structures, but unrestricted directed graphs.", 
        "39": "Indeed, over 20% of the comments in our dataset exhibit local structures that would not be allowable in a tree.", 
        "40": "Possible link types are reason and evidence, and propo-\nsition types are split into five fine-grained categories: POLICY and VALUE contain subjective judgements/interpretations, where only the former specifies a specific course of action to be taken.", 
        "41": "On the other hand, TESTIMONY and FACT do not contain subjective expressions, the former being about personal experience, or \u201canecdotal.\u201d Lastly, REFERENCE covers URLs and citations, which are used to point to objective evidence in an online setting.", 
        "42": "In comparison, the UKP dataset (Stab and Gurevych, 2016) only makes the syntactic distinction between CLAIM, MAJOR CLAIM, and PREMISE types, but it also includes attack links.", 
        "43": "The permissible link structure is stricter in UKP, with links constrained in annotation to form one or more disjoint directed trees within each paragraph.", 
        "44": "Also, since web arguments are not necessarily fully developed, our dataset has many argumentative propositions that are not in any argumentation relations.", 
        "45": "In fact, it isn\u2019t unusual for comments to have no argumentative links at all: 28% of CDCP comments have no links, unlike UKP, where all essays have complete argument structures.", 
        "46": "Such comments with no links make the problem harder, emphasizing the importance of capturing the lack of argumentative support, not only its presence.", 
        "47": "3.1 Annotation results  Each user comment was annotated by two annotators, who independently annotated the boundaries and types of propositions, as well as the links among them.4 To produce the final corpus, a third annotator manually resolved the conflicts,5 and two automatic preprocessing steps were applied: we take the link transitive closure, and we remove a small number of nested propositions.6 The resulting dataset contains 731 comments, consisting of about 3800 sentences (\u22484700 propositions) and 88k words.", 
        "48": "Out of the 43k possible pairs of propositions, links are present between only 1300 (roughly 3%).", 
        "49": "In comparison, UKP has fewer documents (402), but they are longer, with a total of 7100 sentences (6100 propositions) and 147k\n4The annotators used the GATE annotation tool (Cunningham et al., 2011).", 
        "50": "5Inter-annotator agreement is measured with Krippendorf\u2019s \u03b1 (Krippendorff, 1980) with respect to elementary unit type (\u03b1=64.8%) and links (\u03b1=44.1%).", 
        "51": "A separate paper describing the dataset is under preparation.", 
        "52": "6When two propositions overlap, we keep the one that results in losing the fewest links.", 
        "53": "For generality, we release the dataset without this preprocessing, and include code to reproduce it; we believe that handling nested argumentative units is an important direction for further research.", 
        "54": "words.", 
        "55": "Since UKP links only occur within the same paragraph and propositions not connected to the argument are removed in a preprocessing step, link prediction is less imbalanced in UKP, with 3800 pairs of propositions being linked out of a total of 22k (17%).", 
        "56": "We reserve a test set of 150 documents (973 propositions, 272 links) from CDCP, and use the provided 80-document test split from UKP (1266 propositions, 809 links).", 
        "57": "4 Structured learning  for argument mining  4.1 Preliminaries  Binary and multi-class classification have been applied with some success to proposition and link prediction separately, but we seek a way to jointly learn the argument mining problem at the document level, to better model contextual dependencies and constraints.", 
        "58": "We therefore turn to structured learning, a framework that provides the desired level of expressivity.", 
        "59": "In general, learning from a dataset of documents xi \u2208 X and their associated labels yi \u2208 Y involves seeking model parameters w that can \u201cpick out\u201d the best label under a scoring function f :\ny\u0302 := argmaxy\u2208Y f(x, y;w).", 
        "60": "(1)\nUnlike classification or regression, whereX is usually a feature spaceRd and Y \u2286 R (e.g., we predict an integer class index or a probability), in structured learning, more complex inputs and outputs are allowed.", 
        "61": "This makes the argmax in Equation 1 impossible to evaluate by enumeration, so it is desirable to find models that decompose over smaller units and dependencies between them; for instance, as factor graphs.", 
        "62": "In this section, we give a factor graph description of our proposed structured model for argument mining.", 
        "63": "4.2 Model description  An input document is a string of words with proposition offsets delimited.", 
        "64": "We denote the propositions in a document by {a, b, c, ...} and the possible directed link between a and b as a \u2192 b.", 
        "65": "The argument structure we seek to predict consists of the type of each proposition ya \u2208 P and a binary label for each link ya\u2192b \u2208 R = {on, off}.7\n7For simplicity and comparability, we follow Stab and Gurevych (2016) in using binary link labels even if links could be of different types.", 
        "66": "This can be addressed in our model by incorporating \u201clabeled link\u201d factors.", 
        "67": "The possible proposition types P differ for the two datasets; such differences are documented in Table 1.", 
        "68": "As we describe the variables and factors constituting a document\u2019s factor graph, we shall refer to Figure 2 for illustration.", 
        "69": "Unary potentials.", 
        "70": "Each proposition a and each link a \u2192 b has a corresponding random variable in the factor graph (the circles in Figure 2).", 
        "71": "To encode the model\u2019s belief in each possible value for these variables, we parametrize the unary factors (gray boxes in Figure 2) with unary potentials: \u03c6(a) \u2208 R|P| is a score of ya for each possible proposition type.", 
        "72": "Similarly, link unary potentials \u03c6(a \u2192 b) \u2208 R|R| are scores for ya\u2192b being on/off.", 
        "73": "Without any other factors, this would amount to independent classifiers for each task.", 
        "74": "Compatibility factors.", 
        "75": "For every possible link a \u2192 b, the variables (a, b, a \u2192 b) are bound by a dense factor scoring their joint assignment (the black boxes in Figure 2).", 
        "76": "Such a factor could automatically learn to encourage links from compatible types (e.g., from TESTIMONY to POLICY) or discourage links between less compatible ones (e.g., from FACT to TESTIMONY).", 
        "77": "In the simplest form, this factor would be parametrized as a tensor T \u2208 R|P|\u00d7|P|\u00d7|R|, with tijk retaining the score of a source proposition of type i to be (k = on) or not to be (k = off) in a link with a proposition of type j.", 
        "78": "For more flexibility, we parametrize this factor with compatibility features depending\nonly on simple structure: tijk becomes a vector, and the score of configuration (i, j, k) is given by v\u22a4abtijk where vab consists of three binary features:\n\u2022 bias: a constant value of 1, allowing T to learn a base score for a label configuration (i, j, k), as in the simple form above,\n\u2022 adjacency: when there are no other propositions between the source and the target,\n\u2022 order: when the source precedes the target.", 
        "79": "Second order factors.", 
        "80": "Local argumentation graph structures such as a \u2192 b \u2192 c might be modeled better together rather than through separate link factors for a \u2192 b and b \u2192 c. As in higher-order structured models for semantic and dependency parsing (Martins et al., 2013; Martins and Almeida, 2014), we implement three types of second order factors: grandparent (a \u2192 b \u2192 c), sibling (a \u2190 b \u2192 c), and co-parent (a \u2192 b \u2190 c).", 
        "81": "Not all of these types of factors make sense on all datasets: as sibling structures cannot exist in directed trees, we don\u2019t use sibling factors on UKP.", 
        "82": "On CDCP, by transitivity, every grandparent structure implies a corresponding sibling, so it is sufficient to parametrize siblings.", 
        "83": "This difference between datasets is emphasized in Figure 2, where one example of each type of factor is pictured on the right side of the graphs (orange boxes with curved edges): on CDCP we illustrate a coparent factor (top right) and a sibling factor (bot-\ntom right), while on UKP we show a co-parent factor (top right) and a grandparent factor (bottom right).", 
        "84": "We call these factors second order because they involve two link variables, scoring the joint assignment of both links being on.", 
        "85": "Valid link structure.", 
        "86": "The global structure of argument links can be further constrained using domain knowledge.", 
        "87": "We implement this using constraint factors; these have no parameters and are denoted by empty boxes in Figure 2.", 
        "88": "In general, well-formed arguments should be cycle-free.", 
        "89": "In the UKP dataset, links form a directed forest and can never cross paragraphs.", 
        "90": "This particular constraint can be expressed as a series of tree factors,8 one for each paragraph (the factor connected to all link variables in Figure 2).", 
        "91": "In CDCP, links do not form a tree, but we use logic constraints to enforce transitivity (top left factor in Figure 2) and to prevent symmetry (bottom left); the logic formulas implemented by these factors are described in Table 1.", 
        "92": "Together, the two constraints have the desirable side effect of preventing cycles.", 
        "93": "Strict constraints.", 
        "94": "We may include further domain-specific constraints into the model, to express certain disallowed configurations.", 
        "95": "For instance, proposition types that appear in CDCP data can be ordered by the level of objectivity (Park et al., 2015a), as shown in Table 1.", 
        "96": "In a wellformed argument, we would want to see links from more objective to equally or less objective propositions: it\u2019s fine to provide FACT as reason for VALUE, but not the other way around.", 
        "97": "While the training data sometimes violates this constraint, enforcing it might provide a useful inductive bias.", 
        "98": "Inference.", 
        "99": "The argmax in Equation 1 is a MAP over a factor graph with cycles and many overlapping factors, including logic factors.", 
        "100": "While exact inference methods are generally unavailable, our setting is perfectly suited for the Alternating Directions Dual Decomposition (AD3) algorithm: approximate inference on expressive factor graphs with overlapping factors, logic constraints, and generic factors (e.g., directed tree factors) defined through maximization oracles (Martins et al., 2015).", 
        "101": "When AD3 returns an integral solution, it is globally optimal, but when solutions are frac-\n8A tree factor regards each bound variable as an edge in a graph and assigns \u2212\u221e scores to configurations that are not valid trees.", 
        "102": "For inference, we can use maximum spanning arborescence algorithms such as Chu-Liu/Edmonds.", 
        "103": "tional, several options are available.", 
        "104": "At test time, for analysis, we retrieve exact solutions using the branch-and-bound method.", 
        "105": "At training time, however, fractional solutions can be used as-is; this makes better use of each iteration and actually increases the ratio of integral solutions in future iterations, as well as at test time, as proven by Meshi et al.", 
        "106": "(2016).", 
        "107": "We also find that after around 15 training iterations with fractional solutions, over 99% of inference calls are integral.", 
        "108": "Learning.", 
        "109": "We train the models by minimizing the structured hinge loss (Taskar et al., 2004):\n\u2211\n(x,y)\u2208D max y\u2032\u2208Y\n(f(x, y\u2032;w) + \u03c1(y, y\u2032))\u2212 f(x, y;w)\n(2) where \u03c1 is a configurable misclassification cost.", 
        "110": "The max in Equation 2 is not the same as the one used for prediction, in Equation 1.", 
        "111": "However, when the cost function \u03c1 decomposes over the variables, cost-augmented inference amounts to regular inference after augmenting the potentials accordingly.", 
        "112": "We use a weighted Hamming cost:\n\u03c1(y, y\u0302) := \u2211\nv\n\u03c1(yv)I[yv = y\u0302v]\nwhere v is summed over all variables in a document {a} \u222a {a \u2192 b}, and \u03c1(yv) is a misclassification cost.", 
        "113": "We assign uniform costs \u03c1 to 1 for all mistakes except false-negative links, where we use higher cost proportional to the class imbalance in the training split, effectively giving more weight to positive links during training.", 
        "114": "4.3 Argument structure SVM  One option for parameterizing the potentials of the unary and higher-order factors is with linear models, using proposition, link, and higher-order features.", 
        "115": "This gives birth to a linear structured SVM (Tsochantaridis et al., 2005), which, when using l2 regularization, can be trained efficiently in the dual using the online block-coordinate FrankWolfe algorithm of Lacoste-Julien et al.", 
        "116": "(2013), as implemented in the pystruct library (Mu\u0308ller and Behnke, 2014).", 
        "117": "This algorithm is more convenient than subgradient methods, as it does not require tuning a learning rate parameter.", 
        "118": "Features.", 
        "119": "For unary proposition and link features, we faithfully follow Stab and Gurevych (2016, Tables 9 and 10): proposition features are\nlexical (unigrams and dependency tuples), structural (token statistics and proposition location), indicators (from hand-crafted lexicons), contextual, syntactic (subclauses, depth, tense, modal, and POS), probability, discourse (Lin et al., 2014), and average GloVe embeddings (Pennington et al., 2014).", 
        "120": "Link features are lexical (unigrams), syntactic (POS and productions), structural (token statistics, proposition statistics and location features), hand-crafted indicators, discourse triples, PMI, and shared noun counts.", 
        "121": "Our proposed higher-order factors for grandparent, co-parent, and sibling structures require features extracted from a proposition triplet a, b, c. In dependency and semantic parsing, higher-order factors capture relationships between words, so sparse indicator features can be efficiently used.", 
        "122": "In our case, since propositions consist of many words, BOW features may be too noisy and too dense; so for simplicity we again take a cue from the link-specific features used by Stab and Gurevych (2016).", 
        "123": "Our higher-order factor features are: same sentence indicators (for all 3 and for each pair), proposition order (one for each of the 6 possible orderings), Jaccard similarity (between all 3 and between each pair), presence of any shared nouns (between all 3 and between each pair), and shared noun ratios: nouns shared by all 3 divided by total nouns in each proposition and each pair, and shared nouns between each pair with respect to each proposition.", 
        "124": "Up to vocabulary size difference, our total feature dimensionality is approximately 7000 for propositions and 2100 for links.", 
        "125": "The number of second order features is 35.", 
        "126": "Hyperparameters.", 
        "127": "We pick the SVM regularization parameter C \u2208 {0.001, 0.003, 0.01, 0.03, 0.1, 0.3} by k-fold cross validation at document level, optimizing for the average between link and proposition F1 scores.", 
        "128": "4.4 Argument structure RNN  Neural network methods have proven effective for natural language problems even with minimalto-no feature engineering.", 
        "129": "Inspired by the use of LSTMs (Hochreiter and Schmidhuber, 1997) for MST dependency parsing by Kiperwasser and Goldberg (2016), we parametrize the potentials in our factor graph with an LSTM-based neural network,9 replacing MST inference with the more general AD3 algorithm, and using relaxed solutions for training when inference is inexact.", 
        "130": "We extract embeddings of all words with a corpus frequency > 1, initialized with GloVe word vectors.", 
        "131": "We use a deep bidirectional LSTM to encode contextual information, representing a proposition a as the average of the LSTM outputs of its words, henceforth denoted \u2194 a.", 
        "132": "Proposition potentials.", 
        "133": "We apply a multi-layer perceptron (MLP) with rectified linear activations to each proposition, with all layer dimensions equal except the final output layer, which has size |P| and is not passed through any nonlinearities.", 
        "134": "Link potentials.", 
        "135": "To score a dependency a \u2192 b, Kiperwasser and Goldberg (2016) pass the concatenation [ \u2194 a; \u2194 b ] through an MLP.", 
        "136": "After trying this, we found slightly better performance by first passing each proposition through a slot-specific dense layer ( a := \u03c3src( \u2194 a), b := \u03c3trg( \u2194 b) ) followed by a bilinear transformation:\n\u03c6on(a\u2192 b) := a\u22a4Wb+w\u22a4srca+w\u22a4trgb+ w(on)0 .", 
        "137": "Since the bilinear expression returns a scalar, but the link potentials must have a value for both the on and off states, we set the full potential to \u03c6(a \u2192 b) := [\u03c6on(a \u2192 b), w(off)0 ] where w(off)0 is a learned scalar bias.", 
        "138": "We initialize W to the diagonal identity matrix.", 
        "139": "9We use the dynet library (Neubig et al., 2017).", 
        "140": "Second order potentials.", 
        "141": "Grandparent potentials \u03c6(a \u2192 b \u2192 c) score two adjacent directed edges, in other words three propositions.", 
        "142": "We again first pass each proposition representation through a slot-specific dense layer.", 
        "143": "We implement a multilinear scorer analogously to the link potentials:\n\u03c6(a\u2192 b\u2192 c) := \u2211\ni,j,k\naibjckwijk\nwhere W = (w)ijk is a third-order cube tensor.", 
        "144": "To reduce the large numbers of parameters, we implicitly represent W as a rank r tensor: wijk = \u2211r s=1 u (1) is u (2) js u (3) ks .", 
        "145": "Notably, this model captures only third-order interactions between the representation of the three propositions.", 
        "146": "To capture first-order \u201cbias\u201d terms, we could include slotspecific linear terms, e.g., w\u22a4a a; but to further capture quadratic backoff effects (for instance, if two propositions carry a strong signal of being siblings regardless of their parent), we would require quadratically many parameters.", 
        "147": "Instead of explicit lower-order terms, we propose augmenting a, b, and c with a constant feature of 1, which has approximately the same effect, while benefiting from the parameter sharing in the low-rank factorization; an effect described by Blondel et al.", 
        "148": "(2016).", 
        "149": "Siblings and co-parents factors are similarly parametrized with their own tensors.", 
        "150": "Hyperparameters.", 
        "151": "We perform grid search using k-fold document-level cross-validation, tuning the dropout probability in the dense MLP layers over {0.05, 0.1, 0.15, 0.2, 0.25} and the optimal number of passes over the training data over {10, 25, 50, 75, 100}.", 
        "152": "We use 2 layers for the LSTM and the proposition classifier, 128 hidden units in all layers, and a multilinear decomposition with rank r = 16, after preliminary CV runs.", 
        "153": "4.5 Baseline models  We compare our proposed models to equivalent independent unary classifiers.", 
        "154": "The unary-only version of a structured SVM is an l2-regularized linear SVM.10 For the RNN, we compute unary potentials in the same way as in the structured model, but apply independent hinge losses at each variable, instead of the global structured hinge loss.", 
        "155": "Since the RNNweights are shared, this is a form of multi-task learning.", 
        "156": "The baseline predictions can\n10We train our SVM using SAGA (Defazio et al., 2014) in lightning (Blondel and Pedregosa, 2016).", 
        "157": "be interpreted as unary potentials, therefore we can simply round their output to the highest scoring labels, or we can, alternatively, perform testtime inference, imposing the desired structure.", 
        "158": "5 Results  We evaluate our proposed models on both datasets.", 
        "159": "For model selection and development we used kfold cross-validation at document level: on CDCP we set k = 3 to avoid small validation folds, while on UKP we follow Stab and Gurevych (2016) setting k = 5.", 
        "160": "We compare our proposed structured learning systems (the linear structured SVM and the structured RNN) to the corresponding baseline versions.", 
        "161": "We organize our experiments in three incremental variants of our factor graph: basic, full, and strict, each with the following components:11\ncomponent basic full strict (baseline)\nunaries X X X X compat.", 
        "162": "factors X X X compat.", 
        "163": "features X X higher-order X X link structure X X X strict constraints X X\nFollowing Stab and Gurevych (2016), we compute F1 scores at proposition and link level, and also report their average as a summary of overall performance.12 The results of a single prediction run on the test set are displayed in Table 2.", 
        "164": "The overall trend is that training using a structured objective is better than the baseline models, even when structured inference is applied on the baseline predictions.", 
        "165": "On UKP, for link prediction, the linear baseline can reach good performance when using inference, similar to the approach of Stab and Gurevych (2016), but the improvement in proposition prediction leads to higher overall F1 for the structured models.", 
        "166": "Meanwhile, on the more difficult CDCP setting, performing inference on the baseline output is not competitive.", 
        "167": "While feature engineering still outperforms our RNN model, we find that RNNs shine on proposition classification, especially on UKP, and that structured training can make them competitive, reducing their observed lag on link prediction (Katiyar and Cardie, 2016), possibly through mitigating class imbalance.", 
        "168": "11Components are described in Section 4.", 
        "169": "The baselines with inference support only unaries and factors with no parameters, as indicated in the last column.", 
        "170": "12For link F1 scores, however, we find it more intuitive to only consider retrieval of positive links rather than macroaveraged two-class scores.", 
        "171": "5.1 Discussion and analysis  Contribution of compatibility features.", 
        "172": "The compatibility factor in our model can be visualized as conditional odds ratios given the source and target proposition types.", 
        "173": "Since there are only four possible configurations of the compatibility features, we can plot all cases in Figure 3, alongside the basic model.", 
        "174": "Not using compatibility features, the basic model can only learn whether certain configurations are more likely than others (e.g.", 
        "175": "a REFERENCE supporting another REFERENCE is unlikely, while a REFERENCE supporting a FACT is more likely; essentially a soft version of our domain-specific strict constraints.", 
        "176": "The full model with compatibility features is finer grained, capturing, for example, that links from REFERENCE to FACT are more likely when the reference comes after, or that links from VALUE to POLICY are extremely likely only when the two are adjacent.", 
        "177": "Proposition errors.", 
        "178": "The confusion matrices in Figure 4 reveal that the most common confusion is misclassifying FACT as VALUE.", 
        "179": "The strongest difference between the various models tested is that the RNN-based models make this error less often.", 
        "180": "For instance, in the proposition:\nAnd the single most frequently used excuse of any debtor is \u201cI didn\u2019t receive the letter/invoice/statement\u201d\nthe pronouns in the nested quote may be mistaken for subjectivity, leading to the structured SVMs\npredictions of VALUE or TESTIMONY, while the basic structured RNN correctly classifies it as FACT.", 
        "181": "Link errors.", 
        "182": "While structured inference certainly helps baselines by preventing invalid structures such as cycles, it still depends on local decisions, losing to fully structured training in cases where joint proposition and link decisions are needed.", 
        "183": "For instance, in the following conclusion of an UKP essay, the annotators found no links:\nIn short, [ the individual should finance his or her education ]a because [ it is a personal choice.", 
        "184": "]b Otherwise, [ it would cause too much cost from taxpayers and the government.", 
        "185": "]c\nIndeed, no reasons are provided, but baseline are misled by the connectives: the SVM baseline outputs that b and c are PREMISEs supporting the CLAIM a.", 
        "186": "The full structured SVM combines the two tasks and correctly recognizes the link structure.", 
        "187": "Linear SVMs are still a very good baseline, but they tend to overgenerate links due to class imbalance, even if we use class weights during training.", 
        "188": "Surprisingly, RNNs are at the opposite end, being extremely conservative, and getting the highest precision among the models.", 
        "189": "On CDCP, where the number of true links is 272, the linear baseline with strict inference predicts 796 links with a precision of only 16%, while the strict structured RNN only predicts 52 links, with 33% precision; the example in Figure 5 illustrates this.", 
        "190": "In terms of higher-order structures, we find that using higherorder factors increases precision, at a cost in recall.", 
        "191": "This is most beneficial for the 856 co-parent structures in the UKP test set: the full structured SVM has 53% F1, while the basic structured SVM and the basic baseline get 47% and 45% respectively.", 
        "192": "On CDCP, while higher-order factors help, performance on siblings and co-parents is below 10% F1 score.", 
        "193": "This is likely due to link sparsity and suggests plenty of room for further development.", 
        "194": "6 Conclusions and future work  We introduce an argumentation parsing model based on AD3 relaxed inference in expressive factor graphs, experimenting with both linear struc-\ntured SVMs and structured RNNs, parametrized with higher-order factors and link structure constraints.", 
        "195": "We demonstrate our model on a new argumentation mining dataset with more permissive argument structure annotation.", 
        "196": "Our model also achieves state-of-the-art link prediction performance on the UKP essays dataset.", 
        "197": "Future work.", 
        "198": "Stab and Gurevych (2016) found polynomial kernels useful for modeling feature interactions, but kernel structured SVMs scale poorly, we intend to investigate alternate ways to capture feature interactions.", 
        "199": "While we focus on monological argumentation, our model could be extended to dialogs, for which argumentation theory thoroughly motivates non-tree structures (Afantenos and Asher, 2014).", 
        "200": "Acknowledgements  We are grateful to Andre\u0301 Martins, Andreas Mu\u0308ller, Arzoo Katyiar, Chenhao Tan, Felix Wu, Jack Hessel, Justine Zhang, Mathieu Blondel, Tianze Shi, Tobias Schnabel, and the rest of the Cornell NLP seminar for extremely helpful discussions.", 
        "201": "We thank the anonymous reviewers for their thorough and well-argued feedback."
    }, 
    "document_id": "P17-1091.pdf.json"
}
