{
    "abstract_sentences": {
        "1": "Solving algebraic word problems requires executing a series of arithmetic operations\u2014a program\u2014to obtain a final answer.", 
        "2": "However, since programs can be arbitrarily complicated, inducing them directly from question-answer pairs is a formidable challenge.", 
        "3": "To make this task more feasible, we solve these problems by generating answer rationales, sequences of natural language and human-readable mathematical expressions that derive the final answer through a series of small steps.", 
        "4": "Although rationales do not explicitly specify programs, they provide a scaffolding for their structure via intermediate milestones.", 
        "5": "To evaluate our approach, we have created a new 100,000-sample dataset of questions, answers and rationales.", 
        "6": "Experimental results show that indirect supervision of program learning via answer rationales is a promising strategy for inducing arithmetic programs."
    }, 
    "body_sentences": {
        "1": "  Proceedings of the 55th Annual Meeting of the Association for Computational Linguistics, pages 158\u2013167 Vancouver, Canada, July 30 - August 4, 2017. c\u00a92017 Association for Computational Linguistics\nhttps://doi.org/10.18653/v1/P17-1015  1 Introduction  Behaving intelligently often requires mathematical reasoning.", 
        "2": "Shopkeepers calculate change, tax, and sale prices; agriculturists calculate the proper amounts of fertilizers, pesticides, and water for their crops; and managers analyze productivity.", 
        "3": "Even determining whether you have enough money to pay for a list of items requires applying addition, multiplication, and comparison.", 
        "4": "Solving these tasks is challenging as it involves recognizing how goals, entities, and quantities in the real-world map onto a mathematical formalization, computing the solution, and mapping the solution back onto the world.", 
        "5": "As a proxy for the richness of the real world, a series of papers have\nused natural language specifications of algebraic word problems, and solved these by either learning to fill in templates that can be solved with equation solvers (Hosseini et al., 2014; Kushman et al., 2014) or inferring and modeling operation sequences (programs) that lead to the final answer (Roy and Roth, 2015).", 
        "6": "In this paper, we learn to solve algebraic word problems by inducing and modeling programs that generate not only the answer, but an answer rationale, a natural language explanation interspersed with algebraic expressions justifying the overall solution.", 
        "7": "Such rationales are what examiners require from students in order to demonstrate understanding of the problem solution; they play the very same role in our task.", 
        "8": "Not only do natural language rationales enhance model interpretability, but they provide a coarse guide to the structure of the arithmetic programs that must be executed.", 
        "9": "In fact the learner we propose (which relies on a heuristic search; \u00a74) fails to solve this task without modeling the rationales\u2014the search space is too unconstrained.", 
        "10": "This work is thus related to models that can explain or rationalize their decisions (Hendricks et al., 2016; Harrison et al., 2017).", 
        "11": "However, the use of rationales in this work is quite different from the role they play in most prior work, where interpretation models are trained to generate plausible sounding (but not necessarily accurate) posthoc descriptions of the decision making process they used.", 
        "12": "In this work, the rationale is generated as a latent variable that gives rise to the answer\u2014it is thus a more faithful representation of the steps used in computing the answer.", 
        "13": "This paper makes three contributions.", 
        "14": "First, we have created a new dataset with more than 100,000 algebraic word problems that includes both answers and natural language answer rationales (\u00a72).", 
        "15": "Figure 1 illustrates three representative instances\n158\nfrom the dataset.", 
        "16": "Second, we propose a sequence to sequence model that generates a sequence of instructions that, when executed, generates the rationale; only after this is the answer chosen (\u00a73).", 
        "17": "Since the target program is not given in the training data (most obviously, its specific form will depend on the operations that are supported by the program interpreter); the third contribution is thus a technique for inferring programs that generate a rationale and, ultimately, the answer.", 
        "18": "Even constrained by a text rationale, the search space of possible programs is quite large, and we employ a heuristic search to find plausible next steps to guide the search for programs (\u00a74).", 
        "19": "Empirically, we are able to show that state-of-the-art sequence to sequence models are unable to perform above chance on this task, but that our model doubles the accuracy of the baseline (\u00a76).", 
        "20": "2 Dataset  We built a dataset with 100,000 problems with the annotations shown in Figure 1.", 
        "21": "Each question is decomposed in four parts, two inputs and two outputs: the description of the problem, which we will denote as the question, and the possible (multiple choice) answer options, denoted as options.", 
        "22": "Our goal is to generate the description of the rationale used to reach the correct answer, denoted as rationale and the correct option label.", 
        "23": "Problem 1 illustrates an example of an algebra problem, which must be translated into an expression (i.e., (27x + 17y)/(x + y) = 23) and then the desired quantity (x/y) solved for.", 
        "24": "Problem 2 is an example that could be solved by multi-step arithmetic operations proposed in (Roy and Roth, 2015).", 
        "25": "Finally, Problem 3 describes a problem that is solved by testing each of the options, which has not been addressed in the past.", 
        "26": "2.1 Construction  We first collect a set of 34,202 seed problems that consist of multiple option math questions covering a broad range of topics and difficulty levels.", 
        "27": "Examples of exams with such problems include the GMAT (Graduate Management Admission Test) and GRE (General Test).", 
        "28": "Many websites contain example math questions in such exams, where the answer is supported by a rationale.", 
        "29": "Next, we turned to crowdsourcing to generate new questions.", 
        "30": "We create a task where users are presented with a set of 5 questions from our seed dataset.", 
        "31": "Then, we ask the Turker to choose one of the questions and write a similar question.", 
        "32": "We also force the answers and rationale to differ from the original question in order to avoid paraphrases of the original question.", 
        "33": "Once again, we manually check a subset of the jobs for each Turker for quality control.", 
        "34": "The type of questions generated using this method vary.", 
        "35": "Some turkers propose small changes in the values of the questions (e.g., changing the equality p(a)p(b) = p(ab) in Problem 3 to a different equality is a valid question, as long as the rationale and options are rewritten to reflect the change).", 
        "36": "We designate these as replica problems as the natural language used in the question and rationales tend to be only minimally unaltered.", 
        "37": "Others propose new problems in the same topic where the generated questions tend to differ more radically from existing ones.", 
        "38": "Some Turkers also copy math problems available on the web, and we\ndefine in the instructions that this is not allowed, as it will generate multiple copies of the same problem in the dataset if two or more Turkers copy from the same resource.", 
        "39": "These Turkers can be detected by checking the nearest neighbours within the collected datasets as problems obtained from online resources are frequently submitted by more than one Turker.", 
        "40": "Using this method, we obtained 70,318 additional questions.", 
        "41": "2.2 Statistics  Descriptive statistics of the dataset is shown in Figure 1.", 
        "42": "In total, we collected 104,519 problems (34,202 seed problems and 70,318 crowdsourced problems).", 
        "43": "We removed 500 problems as heldout set (250 for development and 250 for testing).", 
        "44": "As replicas of the heldout problems may be present in the training set, these were removed manually by listing for each heldout instance the closest problems in the training set in terms of character-based Levenstein distance.", 
        "45": "After filtering, 100,949 problems remained in the training set.", 
        "46": "We also show the average number of tokens (total number of tokens in the question, options and rationale) and the vocabulary size of the questions and rationales.", 
        "47": "Finally, we provide the same statistics exclusively for tokens that are numeric values and tokens that are not.", 
        "48": "Figure 2 shows the distribution of examples based on the total number of tokens.", 
        "49": "We can see that most examples consist of 30 to 500 tokens, but there are also extremely long examples with more than 1000 tokens in our dataset.", 
        "50": "3 Model  Generating rationales for math problems is challenging as it requires models that learn to perform math operations at a finer granularity as each step within the solution must be explained.", 
        "51": "For instance, in Problem 1, the equation (27x +\n17y)/(x + y) = 23 must be solved to obtain the answer.", 
        "52": "In previous work (Kushman et al., 2014), this could be done by feeding the equation into an expression solver to obtain x/y = 3/2.", 
        "53": "However, this would skip the intermediate steps 27x+17y = 23x+23y and 4x = 6y, which must also be generated in our problem.", 
        "54": "We propose a model that jointly learns to generate the text in the rationale, and to perform the math operations required to solve the problem.", 
        "55": "This is done by generating a program, containing both instructions that generate output and instructions that simply generate intermediate values used by following instructions.", 
        "56": "3.1 Problem Definition  In traditional sequence to sequence models (Sutskever et al., 2014; Bahdanau et al., 2014), the goal is to predict the output sequence y = y1, .", 
        "57": ".", 
        "58": ".", 
        "59": ", y|y| from the input sequence x = x1, .", 
        "60": ".", 
        "61": ".", 
        "62": ", x|x|, with lengths |y| and |x|.", 
        "63": "In our particular problem, we are given the problem and the set of options, and wish to predict the rationale and the correct option.", 
        "64": "We set x as the sequence of words in the problem, concatenated with words in each of the options separated by a special tag.", 
        "65": "Note that knowledge about the possible options is required as some problems are solved by the process of elimination or by testing each of the options (e.g.", 
        "66": "Problem 3).", 
        "67": "We wish to generate y, which is the sequence of words in the rationale.", 
        "68": "We also append the correct option as the last word in y, which is interpreted as the chosen option.", 
        "69": "For example, y in Problem 1 is \u201cLet the .", 
        "70": ".", 
        "71": ".", 
        "72": "= 3/2 .", 
        "73": "\u3008EOR\u3009 B \u3008EOS\u3009\u201d, whereas in Problem 2 it is \u201cLet s be .", 
        "74": ".", 
        "75": ".", 
        "76": "Answer is C \u3008EOR\u3009 C \u3008EOS\u3009\u201d, where \u201c\u3008EOS\u3009\u201d is the end of sentence symbol and \u201c\u3008EOR\u3009\u201d is the end of rationale symbol.", 
        "77": "3.2 Generating Programs to Generate Rationales  We wish to generate a latent sequence of program instructions, z = z1, .", 
        "78": ".", 
        "79": ".", 
        "80": ", z|z|, with length |z|, that will generate y when executed.", 
        "81": "We express z as a program that can access x, y, and the memory buffer m. Upon finishing execution we expect that the sequence of output tokens to be placed in the output vector y.", 
        "82": "Table 2 illustrates an example of a sequence of instructions that would generate an excerpt from Problem 2, where columns x, z, v, and r denote the input sequence, the instruction sequence (program), the values of executing the instruction, and where each value vi is written (i.e., either to the output or to the memory).", 
        "83": "In this example, instructions from indexes 1 to 14 simply fill each position with the observed output y1, .", 
        "84": ".", 
        "85": ".", 
        "86": ", y14 with a string, where the Id operation simply returns its parame-\nter without applying any operation.", 
        "87": "As such, running this operation is analogous to generating a word by sampling from a softmax over a vocabulary.", 
        "88": "However, instruction z15 reads the input word x5, 52, and applies the operation Str to Float, which converts the word 52 into a floating point number, and the same is done for instruction z20, which reads a previously generated output word y17.", 
        "89": "Unlike, instructions z1, .", 
        "90": ".", 
        "91": ".", 
        "92": ", z14, these operations write to the external memory m, which stores intermediate values.", 
        "93": "A more sophisticated instruction\u2014which shows some of the power of our model\u2014is z21 = Choose(m1,m2) \u2192 m3 which evaluates\n( m1 m2 ) and stores the result in m3.", 
        "94": "This process repeats until the model generates the end-of-sentence symbol.", 
        "95": "The last token of the program as said previously must generate the correct option value, from \u201cA\u201d to \u201cE\u201d.", 
        "96": "By training a model to generate instructions that can manipulate existing tokens, the model benefits from the additional expressiveness needed to solve math problems within the generation process.", 
        "97": "In total we define 22 different operations, 13 of which are frequently used operations when solving math problems.", 
        "98": "These are: Id, Add, Subtract, Multiply, Divide, Power, Log, Sqrt, Sine, Cosine, Tangent, Factorial, and Choose (number of combinations).", 
        "99": "We also provide 2 operations to convert between Radians and Degrees, as these are needed for the sine, cosine and tangent operations.", 
        "100": "There are 6 operations that convert floating point numbers into strings and vice-versa.", 
        "101": "These include the Str to Float and Float to Str operations described previously, as well as operations which convert between floating point numbers and fractions, since in many math problems the answers are in the form \u201c3/4\u201d.", 
        "102": "For the same reason, an operation to convert between a floating point number and number grouped in thousands is also used (e.g.", 
        "103": "1000000 to \u201c1,000,000\u201d or \u201c1.000.000\u201d).", 
        "104": "Finally, we define an operation (Check) that given the input string, searches through the list of options and returns a string with the option index in {\u201cA\u201d, \u201cB\u201d, \u201cC\u201d, \u201cD\u201d, \u201cE\u201d}.", 
        "105": "If the input value does not match any of the options, or more than one option contains that value, it cannot be applied.", 
        "106": "For instance, in Problem 2, once the correct probability \u201c1/221\u201d is generated, by applying the check operation to this number we can obtain correct option \u201cC\u201d.", 
        "107": "3.3 Generating and Executing Instructions  In our model, programs consist of sequences of instructions, z.", 
        "108": "We turn now to how we model each zi, conditional on the text program specification, and the program\u2019s history.", 
        "109": "The instruction zi is a tuple consisting of an operation (oi), an ordered sequence of its arguments (ai), and a decision about where its results will be placed (ri) (is it appended in the output y or in a memory buffer m?", 
        "110": "), and the result of applying the operation to its arguments (vi).", 
        "111": "That is, zi = (oi, ri,ai, vi).", 
        "112": "Formally, oi is an element of the pre-specified set of operations O, which contains, for example add, div, Str to Float, etc.", 
        "113": "The number of arguments required by oi is given by argc(oi), e.g., argc(add) = 2 and argc(log) = 1.", 
        "114": "The arguments are ai = ai,1, .", 
        "115": ".", 
        "116": ".", 
        "117": ", ai,argc(oi).", 
        "118": "An instruction will generate a return value vi upon execution, which will either be placed in the output y or hidden.", 
        "119": "This decision is controlled by ri.", 
        "120": "We define the instruction probability as:\np(oi,ai, ri,vi | z<i,x,y,m) = p(oi | z<i,x)\u00d7 p(ri | z<i,x, oi)\u00d7\nargc(oi)\u220f\nj=1\np(ai,j | z<i,x, oi,m,y)\u00d7\n[vi = apply(oi,a)],\nwhere [p] evaluates to 1 if p is true and 0 otherwise, and apply(f,x) evaluates the operation f with arguments x.", 
        "121": "Note that the apply function is not learned, but pre-defined.", 
        "122": "The network used to generate an instruction at a given timestamp i is illustrated in Figure 3.", 
        "123": "We first use the recurrent state hi to generate p(oi | z<i,x) = softmax\noi\u2208O (hi), using a softmax over the\nset of available operations O.", 
        "124": "In order to predict ri, we generate a new hidden state ri, which is a function of the current program context hi, and an embedding of the current predicted operation, oi.", 
        "125": "As the output can either be placed in the memory m or the output y, we compute the probability p(ri = OUTPUT | z<i,x, oi) = \u03c3(ri \u00b7 wr + br), where \u03c3 is the logistic sigmoid function.", 
        "126": "If ri = OUTPUT, vi is appended to the output y; otherwise it is appended to the memory m.\nOnce we generate ri, we must predict ai, the argc(oi)-length sequence of arguments that operation oi requires.", 
        "127": "The jth argument ai,j can be either generated from a softmax over the vocabulary, copied from the input vector x, or copied from previously generated values in the output y or memory m. This decision is modeled using a latent predictor network (Ling et al., 2016), where the control over which method used to generate ai,j is governed by a latent variable qi,j \u2208 {SOFTMAX, COPY-INPUT, COPY-OUTPUT}.", 
        "128": "Similar to when predicting ri, in order to make this choice, we also generate a new hidden state for each argument slot j, denoted by qi,j with an LSTM, feeding the previous argument in at each time step, and initializing it with ri and by reading the predicted value of the output ri.", 
        "129": "\u2022 If qi,j = SOFTMAX, ai,j is generated by sampling from a softmax over the vocabulary Y ,\np(ai,j | qi,j = SOFTMAX) = softmax ai,j\u2208Y (qi,j).", 
        "130": "This corresponds to a case where a string is used as argument (e.g.", 
        "131": "y1=\u201cLet\u201d).", 
        "132": "\u2022 If qi,j = COPY-INPUT, ai,j is obtained by copy-\ning an element from the input vector with a pointer network (Vinyals et al., 2015) over input words x1, .", 
        "133": ".", 
        "134": ".", 
        "135": ", x|x|, represented by their encoder LSTM state u1, .", 
        "136": ".", 
        "137": ".", 
        "138": ",u|x|.", 
        "139": "As such, we compute the probability distribution over input words as:\np(ai,j | qi,j =COPY-INPUT) = (1) softmax\nai,j\u2208x1,...,x|x|\n( f(uai,j ,qi,j) )\nFunction f computes the affinity of each token xai,j and the current output context qi,j .", 
        "140": "A common implementation of f , which we follow, is to apply a linear projection from [uai,j ;qi,j ] into a fixed size vector (where [u;v] is vector concatenation), followed by a tanh and a linear projection into a single value.", 
        "141": "\u2022 If qi,j = COPY-OUTPUT, the model copies from either the output y or the memory m. This is equivalent to finding the instruction zi, where the value was generated.", 
        "142": "Once again, we define a pointer network that points to the output instructions and define the distribution over previously generated instructions as:\np(ai,j | qi,j =COPY-OUTPUT) = softmax\nai,j\u2208z1,...,zi\u22121\n( f(hai,j ,qi,j) )\nHere, the affinity is computed using the decoder state hai,j and the current state qi,j .", 
        "143": "Finally, we embed the argument ai,j1 and the state qi,j to generate the next state qi,j+1.", 
        "144": "Once all arguments for oi are generated, the operation is executed to obtain vi.", 
        "145": "Then, the embedding of vi, the final state of the instruction qi,|ai| and the previous state hi are used to generate the state at the next timestamp hi+1.", 
        "146": "4 Inducing Programs while Learning  The set of instructions z that will generate y is unobserved.", 
        "147": "Thus, given x we optimize the marginal probability function:\np(y | x) = \u2211\nz\u2208Z p(y | z)p(z | x) =\n\u2211\nz\u2208Z(y) p(z | x),\nwhere p(y | z) is the Kronecker delta function \u03b4e(z),y, which is 1 if the execution of z, denoted as e(z), generates y and 0 otherwise.", 
        "148": "Thus, we can redefine p(y|x), the marginal over all programsZ , as a marginal over programs that would generate y, defined as Z(y).", 
        "149": "As marginalizing over z \u2208 Z(y) is intractable, we approximate the marginal by generating samples from our model.", 
        "150": "Denote the set of samples that are generated by Z\u0302(y).", 
        "151": "We maximize \u2211 z \u2208 Z\u0302(y)p(z|x).", 
        "152": "However, generating programs that generate y is not trivial, as randomly sampling from the RNN distribution over instructions at each timestamp is unlikely to generate a sequence z \u2208 Z(y).", 
        "153": "This is analogous to the question answering work in Liang et al.", 
        "154": "(2016), where the query that\n1 The embeddings of a given argument ai,j and the return value vi are obtained with a lookup table embedding and two flags indicating whether it is a string and whether it is a float.", 
        "155": "Furthermore, if the the value is a float we also add its numeric value as a feature.", 
        "156": "generates the correct answer must be found during inference, and training proved to be difficult without supervision.", 
        "157": "In Roy and Roth (2015) this problem is also addressed by adding prior knowledge to constrain the exponential space.", 
        "158": "In our work, we leverage the fact that we are generating rationales, where there is a sense of progression within the rationale.", 
        "159": "That is, we assume that the rationale solves the problem step by step.", 
        "160": "For instance, in Problem 2, the rationale first describes the number of combinations of two cards in a deck of 52 cards, then describes the number of combinations of two kings, and finally computes the probability of drawing two kings.", 
        "161": "Thus, while generating the final answer without the rationale requires a long sequence of latent instructions, generating each of the tokens of the rationale requires far less operations.", 
        "162": "More formally, given the sequence z1, .", 
        "163": ".", 
        "164": ".", 
        "165": ", zi\u22121 generated so far, and the possible values for zi given by the network, denotedZi, we wish to filter Zi to Zi(yk), which denotes a set of possible options that contain at least one path capable of generating the next token at index k. Finding the set Zi(yk) is achieved by testing all combinations of instructions that are possible with at most one level of indirection, and keeping those that can generate yk.", 
        "166": "This means that the model can only generate one intermediate value in memory (not including the operations that convert strings into floating point values and vice-versa).", 
        "167": "Decoding.", 
        "168": "During decoding we find the most likely sequence of instructions z given x, which can be performed with a stack-based decoder.", 
        "169": "However, it is important to refer that each generated instruction zi = (oi, ri, ai,1, .", 
        "170": ".", 
        "171": ".", 
        "172": ", ai,|ai|, vi) must be executed to obtain vi.", 
        "173": "To avoid generating unexecutable code\u2014e.g., log(0)\u2014each hypothesis instruction is executed and removed if an error occurs.", 
        "174": "Finally, once the \u201c\u3008EOR\u3009\u201d tag is generated, we only allow instructions that would generate one of the option \u201cA\u201d to \u201cE\u201d to be generated, which guarantees that one of the options is chosen.", 
        "175": "5 Staged Back-propagation  As it is shown in Figure 2, math rationales with more than 200 tokens are not uncommon, and with additional intermediate instructions, the size z can easily exceed 400.", 
        "176": "This poses a practical challenge for training the model.", 
        "177": "For both the attention and copy mechanisms,\nfor each instruction zi, the model needs to compute the probability distribution between all the attendable units c conditioned on the previous state hi\u22121.", 
        "178": "For the attention model and input copy mechanisms, c = x0,i\u22121 and for the output copy mechanism c = z.", 
        "179": "These operations generally involve an exponential number of matrix multiplications as the size of c and z grows.", 
        "180": "For instance, during the computation of the probabilities for the input copy mechanism in Equation 1, the affinity function f between the current context q and a given input uk is generally implemented by projecting u and q into a single vector followed by a non-linearity, which is projected into a single affinity value.", 
        "181": "Thus, for each possible input u, 3 matrix multiplications must be performed.", 
        "182": "Furthermore, for RNN unrolling, parameters and intermediate outputs for these operations must be replicated for each timestamp.", 
        "183": "Thus, as z becomes larger the attention and copy mechanisms quickly become a memory bottleneck as the computation graph becomes too large to fit on the GPU.", 
        "184": "In contrast, the sequence-to-sequence model proposed in (Sutskever et al., 2014), does not suffer from these issues as each timestamp is dependent only on the previous state hi\u22121.", 
        "185": "To deal with this, we use a training method we call staged back-propagation which saves memory by considering slices of K tokens in z, rather than the full sequence.", 
        "186": "That is, to train on a minibatch where |z| = 300 with K = 100, we would actually train on 3 mini-batches, where the first batch would optimize for the first z1:100, the second for z101:200 and the third for z201:300.", 
        "187": "The advantage of this method is that memory intensive operations, such as attention and the copy mechanism, only need to be unrolled for K steps, and K can be adjusted so that the computation graph fits in memory.", 
        "188": "However, unlike truncated back-propagation for language modeling, where context outside the scope of K is ignored, sequence-to-sequence models require global context.", 
        "189": "Thus, the sequence of states h is still built for the whole sequence z.", 
        "190": "Afterwards, we obtain a slice hj:j+K , and compute the attention vector.2 Finally, the prediction of the instruction is conditioned on the LSTM state and the attention vector.", 
        "191": "2This modeling strategy is sometimes known as late fusion, as the attention vector is not used for state propagation, it is incorporated \u201clater\u201d.", 
        "192": "6 Experiments  We apply our model to the task of generating rationales for solutions to math problems, evaluating it on both the quality of the rationale and the ability of the model to obtain correct answers.", 
        "193": "6.1 Baselines  As the baseline we use the attention-based sequence to sequence model proposed by Bahdanau et al.", 
        "194": "(2014), and proposed augmentations, allowing it to copy from the input (Ling et al., 2016) and from the output (Merity et al., 2016).", 
        "195": "6.2 Hyperparameters  We used a two-layer LSTM with a hidden size of H = 200, and word embeddings with size 200.", 
        "196": "The number of levels that the graph G is expanded during sampling D is set to 5.", 
        "197": "Decoding is performed with a beam of 200.", 
        "198": "As for the vocabulary of the softmax and embeddings, we keep the most frequent 20,000 word types, and replace the rest of the words with an unknown token.", 
        "199": "During training, the model only learns to predict a word as an unknown token, when there is no other alternative to generate the word.", 
        "200": "6.3 Evaluation Metrics  The evaluation of the rationales is performed with average sentence level perplexity and BLEU4 (Papineni et al., 2002).", 
        "201": "When a model cannot generate a token for perplexity computation, we predict unknown token.", 
        "202": "This benefits the baselines as they are less expressive.", 
        "203": "As the perplexity of our model is dependent on the latent program that is generated, we force decode our model to generate the rationale, while maximizing the probability of the program.", 
        "204": "This is analogous to the method used to obtain sample programs described in Section 4, but we choose the most likely instructions at each timestamp instead of sampling.", 
        "205": "Finally, the correctness of the answer is evaluated by computing the percentage of the questions, where the chosen option matches the correct one.", 
        "206": "6.4 Results  The test set results, evaluated on perplexity, BLEU, and accuracy, are presented in Table 3.", 
        "207": "Perplexity.", 
        "208": "In terms of perplexity, we observe that the regular sequence to sequence model fares poorly on this dataset, as the model requires the generation of many values that tend to be\nsparse.", 
        "209": "Adding an input copy mechanism greatly improves the perplexity as it allows the generation process to use values that were mentioned in the question.", 
        "210": "The output copying mechanism improves perplexity slightly over the input copy mechanism, as many values are repeated after their first occurrence.", 
        "211": "For instance, in Problem 2, the value \u201c1326\u201d is used twice, so even though the model cannot generate it easily in the first occurrence, the second one can simply be generated by copying the first one.", 
        "212": "We can observe that our model yields significant improvements over the baselines, demonstrating that the ability to generate new values by algebraic manipulation is essential in this task.", 
        "213": "An example of a program that is inferred is shown in Figure 4.", 
        "214": "The graph was generated by finding the most likely program z that generates y.", 
        "215": "Each node isolates a value in x, m, or y, where arrows indicate an operation executed with the outgoing nodes as arguments and incoming node as the return of the operation.", 
        "216": "For simplicity, operations that copy or convert values (e.g.", 
        "217": "from string to float) were not included, but nodes that were copied/converted share the same color.", 
        "218": "Examples of tokens where our model can obtain the perplexity reduction are the values \u201c0.025\u201d, \u201c0.023\u201d, \u201c0.002\u201d and finally the answer \u201cE\u201d , as these cannot be copied from the input or output.", 
        "219": "BLEU.", 
        "220": "We observe that the regular sequence to sequence model achieves a low BLEU score.", 
        "221": "In fact, due to the high perplexities the model generates very short rationales, which frequently consist of segments similar to \u201cAnswer should be D\u201d, as most rationales end with similar statements.", 
        "222": "By applying the copy mechanism the BLEU score improves substantially, as the model can define the variables that are used in the rationale.", 
        "223": "Interestingly, the output copy mechanism adds no further improvement in the perplexity evaluation.", 
        "224": "This is because during decoding all values that can be copied from the output are values that could\nhave been generated by the model either from the softmax or the input copy mechanism.", 
        "225": "As such, adding an output copying mechanism adds little to the expressiveness of the model during decoding.", 
        "226": "Finally, our model can achieve the highest BLEU score as it has the mechanism to generate the intermediate and final values in the rationale.", 
        "227": "Accuracy.", 
        "228": "In terms of accuracy, we see that all baseline models obtain values close to chance (20%), indicating that they are completely unable to solve the problem.", 
        "229": "In contrast, we see that our model can solve problems at a rate that is significantly higher than chance, demonstrating the value of our program-driven approach, and its ability to learn to generate programs.", 
        "230": "In general, the problems we solve correctly correspond to simple problems that can be solved in one or two operations.", 
        "231": "Examples include questions such as \u201cBilly cut up each cake into 10 slices, and ended up with 120 slices altogether.", 
        "232": "How many cakes did she cut up?", 
        "233": "A) 9 B) 7 C) 12 D) 14 E) 16\u201d, which can be solved in a single step.", 
        "234": "In this case, our model predicts \u201c120 / 10 = 12 cakes.", 
        "235": "Answer is C\u201d as the rationale, which is reasonable.", 
        "236": "6.5 Discussion.", 
        "237": "While we show that our model can outperform the models built up to date, generating complex rationales as those shown in Figure 1 correctly is still an unsolved problem, as each additional step adds complexity to the problem both during inference and decoding.", 
        "238": "Yet, this is the first result showing that it is possible to solve math problems in such a manner, and we believe this modeling approach and dataset will drive work on this problem.", 
        "239": "7 Related Work  Extensive efforts have been made in the domain of math problem solving (Hosseini et al., 2014; Kushman et al., 2014; Roy and Roth, 2015), which aim at obtaining the correct answer to a given math problem.", 
        "240": "Other work has focused on learning to map math expressions into formal languages (Roy et al., 2016).", 
        "241": "We aim to generate natural language rationales, where the bindings between variables and the problem solving approach are mixed into a single generative model that attempts to solve the problem while explaining the approach taken.", 
        "242": "Our approach is strongly tied with the work on sequence to sequence transduction using the encoder-decoder paradigm (Sutskever et al., 2014;\nBahdanau et al., 2014; Kalchbrenner and Blunsom, 2013), and inherits ideas from the extensive literature on semantic parsing (Jones et al., 2012; Berant et al., 2013; Andreas et al., 2013; Quirk et al., 2015; Liang et al., 2016; Neelakantan et al., 2016) and program generation (Reed and de Freitas, 2016; Graves et al., 2016), namely, the usage of an external memory, the application of different operators over values in the memory and the copying of stored values into the output sequence.", 
        "243": "Providing textual explanations for classification decisions has begun to receive attention, as part of increased interest in creating models whose decisions can be interpreted.", 
        "244": "Lei et al.", 
        "245": "(2016), jointly modeled both a classification decision, and the selection of the most relevant subsection of a document for making the classification decision.", 
        "246": "Hendricks et al.", 
        "247": "(2016) generate textual explanations for visual classification problems, but in contrast to our model, they first generate an answer, and then, conditional on the answer, generate an explanation.", 
        "248": "This effectively creates a post-hoc justification for a classification decision rather than a program for deducing an answer.", 
        "249": "These papers,\nlike ours, have jointly modeled rationales and answer predictions; however, we are the first to use rationales to guide program induction.", 
        "250": "8 Conclusion  In this work, we addressed the problem of generating rationales for math problems, where the task is to not only obtain the correct answer of the problem, but also generate a description of the method used to solve the problem.", 
        "251": "To this end, we collect 100,000 question and rationale pairs, and propose a model that can generate natural language and perform arithmetic operations in the same decoding process.", 
        "252": "Experiments show that our method outperforms existing neural models, in both the fluency of the rationales that are generated and the ability to solve the problem."
    }, 
    "document_id": "P17-1015.pdf.json"
}
