{
    "abstract_sentences": {
        "1": "We investigate neural techniques for endto-end computational argumentation mining (AM).", 
        "2": "We frame AM both as a tokenbased dependency parsing and as a tokenbased sequence tagging problem, including a multi-task learning setup.", 
        "3": "Contrary to models that operate on the argument component level, we find that framing AM as dependency parsing leads to subpar performance results.", 
        "4": "In contrast, less complex (local) tagging models based on BiLSTMs perform robustly across classification scenarios, being able to catch longrange dependencies inherent to the AM problem.", 
        "5": "Moreover, we find that jointly learning \u2018natural\u2019 subtasks, in a multi-task learning setup, improves performance."
    }, 
    "body_sentences": {
        "1": "  Proceedings of the 55th Annual Meeting of the Association for Computational Linguistics, pages 11\u201322 Vancouver, Canada, July 30 - August 4, 2017. c\u00a92017 Association for Computational Linguistics\nhttps://doi.org/10.18653/v1/P17-1002  1 Introduction  Computational argumentation mining (AM) deals with finding argumentation structures in text.", 
        "2": "This involves several subtasks, such as: (a) separating argumentative units from non-argumentative units, also called \u2018component segmentation\u2019; (b) classifying argument components into classes such as \u201cPremise\u201d or \u201cClaim\u201d; (c) finding relations between argument components; (d) classifying relations into classes such as \u201cSupport\u201d or \u201cAttack\u201d (Persing and Ng, 2016; Stab and Gurevych, 2017).", 
        "3": "Thus, AM would have to detect claims and premises (reasons) in texts such as the following, where premise P supports claim C:\nSince it killed many marine livesP , ::::::: tourism ::: has :::::::::: threatened :::::: natureC .", 
        "4": "Argument structures in real texts are typically much more complex, cf.", 
        "5": "Figure 1.", 
        "6": "While different research has addressed different subsets of the AM problem (see below), the ultimate goal is to solve all of them, starting from unannotated plain text.", 
        "7": "Two recent approaches to this end-to-end learning scenario are Persing and Ng (2016) and Stab and Gurevych (2017).", 
        "8": "Both solve the end-to-end task by first training independent models for each subtask and then defining an integer linear programming (ILP) model that encodes global constraints such as that each premise has a parent, etc.", 
        "9": "Besides their pipeline architecture the approaches also have in common that they heavily rely on hand-crafted features.", 
        "10": "Hand-crafted features pose a problem because AM is to some degree an \u201carbitrary\u201d problem in that the notion of \u201cargument\u201d critically relies on the underlying argumentation theory (Reed et al., 2008; Biran and Rambow, 2011; Habernal and Gurevych, 2015; Stab and Gurevych, 2017).", 
        "11": "Accordingly, datasets typically differ with respect to their annotation of (often rather complex) argument structure.", 
        "12": "Thus, feature sets would have to be manually adapted to and designed for each new sample of data, a challenging task.", 
        "13": "The same critique applies to the designing of ILP constraints.", 
        "14": "Moreover, from a machine learning perspective, pipeline approaches are problematic because they solve subtasks independently and thus lead to error propagation rather than exploiting interrelationships between variables.", 
        "15": "In contrast to this, we investigate neural techniques for end-to-end learning in computational AM, which do not require the hand-crafting of features or constraints.", 
        "16": "The models we survey also all capture some notion of \u201cjoint\u201d\u2014rather than \u201cpipeline\u201d\u2014learning.", 
        "17": "We investigate several approaches.", 
        "18": "First, we frame the end-to-end AM problem as a dependency parsing problem.", 
        "19": "Dependency parsing may be considered a natural choice for AM, because argument structures often form trees,\n11\nor closely resemble them (see \u00a73).", 
        "20": "Hence, it is not surprising that \u2018discourse parsing\u2019 (Muller et al., 2012) has been suggested for AM (Peldszus and Stede, 2015).", 
        "21": "What distinguishes our approach from these previous ones is that we operate on the token level, rather than on the level of components, because we address the end-toend framework and, thus, do not assume that nonargumentative units have already been sorted out and/or that the boundaries of argumentative units are given.", 
        "22": "Second, we frame the problem as a sequence tagging problem.", 
        "23": "This is a natural choice especially for component identification (segmentation and classification), which is a typical entity recognition problem for which BIO tagging is a standard approach, pursued in AM, e.g., by Habernal and Gurevych (2016).", 
        "24": "The challenge in the end-to-end setting is to also include relations into the tagging scheme, which we realize by coding the distances between linked components into the tag label.", 
        "25": "Since related entities in AM are oftentimes several dozens of tokens apart from each other, neural sequence tagging models are in principle ideal candidates for such a framing because they can take into account long-range dependencies\u2014something that is inherently difficult to capture with traditional feature-based tagging models such as conditional random fields (CRFs).", 
        "26": "Third, we frame AM as a multi-task (tagging) problem (Caruana, 1997; Collobert and Weston, 2008).", 
        "27": "We experiment with subtasks of AM\u2014e.g., component identification\u2014as auxiliary tasks and investigate whether this improves performance on the AM problem.", 
        "28": "Adding such subtasks can be seen as analogous to de-coupling, e.g., component identification from the full AM problem.", 
        "29": "Fourth, we evaluate the model of Miwa and Bansal (2016) that combines sequential (entity) and tree structure (relation) information and is in principle applicable to any problem where the aim is to extract entities and their relations.", 
        "30": "As such, this model makes fewer assumptions than our dependency parsing and tagging approaches.", 
        "31": "The contributions of this paper are as follows.", 
        "32": "(1) We present the first neural end-to-end solutions to computational AM.", 
        "33": "(2) We show that several of them perform better than the state-of-theart joint ILP model.", 
        "34": "(3) We show that a framing of AM as a token-based dependency parsing problem is ineffective\u2014in contrast to what has been\nproposed for systems that operate on the coarser component level and that (4) a standard neural sequence tagging model that encodes distance information between components performs robustly in different environments.", 
        "35": "Finally, (5) we show that a multi-task learning setup where natural subtasks of the full AM problem are added as auxiliary tasks improves performance.1  2 Related Work  AM has applications in legal decision making (Palau and Moens, 2009; Moens et al., 2007), document summarization, and the analysis of scientific papers (Kirschner et al., 2015).", 
        "36": "Its importance for the educational domain has been highlighted by recent work on writing assistance (Zhang and Litman, 2016) and essay scoring (Persing and Ng, 2015; Somasundaran et al., 2016).", 
        "37": "Most works on AM address subtasks of AM such as locating/classifying components (Florou et al., 2013; Moens et al., 2007; Rooney et al., 2012; Knight et al., 2003; Levy et al., 2014; Rinott et al., 2015).", 
        "38": "Relatively few works address the full AM problem of component and relation identification.", 
        "39": "Peldszus and Stede (2016) present a corpus of microtexts containing only argumentatively relevant text of controlled complexity.", 
        "40": "To our best knowledge, Stab and Gurevych (2017) created the only corpus of attested high quality which annotates the AM problem in its entire complexity: it contains token-level annotations of components, their types, as well as relations and their types.", 
        "41": "3 Data  We use the dataset of persuasive essays (PE) from Stab and Gurevych (2017), which contains student essays written in response to controversial topics such as \u201ccompetition or cooperation\u2014which is better?\u201d\nAs Table 1 details, the corpus consists of 402 essays, 80 of which are reserved for testing.", 
        "42": "The an-\n1Scripts that document how we ran our experiments are available from https://github.com/UKPLab/ acl2017-neural_end2end_AM.", 
        "43": "notation distinguishes between major claims (the central position of an author with respect to the essay\u2019s topic), claims (controversial statements that are either for or against the major claims), and premises, which give reasons for claims or other premises and either support or attack them.", 
        "44": "Overall, there are 751 major claims, 1506 claims, and 3832 premises.", 
        "45": "There are 5338 relations, most of which are supporting relations (>90%).", 
        "46": "The corpus has a special structure, illustrated in Figure 1.", 
        "47": "First, major claims relate to no other components.", 
        "48": "Second, claims always relate to all other major claims.2 Third, each premise relates to exactly one claim or premise.", 
        "49": "Thus, the argument structure in each essay is\u2014almost\u2014a tree.", 
        "50": "Since there may be several major claims, each claim potentially connects to multiple targets, violating the tree structure.", 
        "51": "This poses no problem, however, since we can \u201closs-lessly\u201d re-link the claims to one of the major claims (e.g., the last major claim in a document) and create a special root node to which the major claims link.", 
        "52": "From this tree, the actual graph can be uniquely reconstructed.", 
        "53": "There is another peculiarity of this data.", 
        "54": "Each essay is divided into paragraphs, of which there are 2235 in total.", 
        "55": "The argumentation structure is completely contained within a paragraph, except, possibly, for the relation from claims to major claims.", 
        "56": "Paragraphs have an average length of 66 tokens and are therefore much shorter than essays, which have an average length of 368 tokens.", 
        "57": "Thus, prediction on the paragraph level is easier than\n2All MCs are considered as equivalent in meaning.", 
        "58": "prediction on the essay level, because there are fewer components in a paragraph and hence fewer possibilities of source and target components in argument relations.", 
        "59": "The same is true for component classification: a paragraph can never contain premises only, for example, since premises link to other components.", 
        "60": "4 Models  This section describes our neural network framings for end-to-end AM.", 
        "61": "Sequence Tagging is the problem of assigning each element in a stream of input tokens a label.", 
        "62": "In a neural context, the natural choice for tagging problems are recurrent neural nets (RNNs) in which a hidden vector representation ht at time point t depends on the previous hidden vector representation ht\u22121 and the input xt.", 
        "63": "In this way, an infinite window (\u201clong-range dependencies\u201d) around the current input token xt can be taken into account when making an output prediction yt.", 
        "64": "We choose particular RNNs, namely, LSTMs (Hochreiter and Schmidhuber, 1997), which are popular for being able to address vanishing/exploding gradients problems.", 
        "65": "In addition to considering a left-to-right flow of information, bidirectional LSTMs (BL) also capture information to the right of the current input token.", 
        "66": "The most recent generation of neural tagging models add label dependencies to BLs, so that successive output decisions are not made independently.", 
        "67": "This class of models is called BiLSTM-\nCRF (BLC) (Huang et al., 2015).", 
        "68": "The model of Ma and Hovy (2016) adds convolutional neural nets (CNNs) on the character-level to BiLSTMCRFs, leading to BiLSTM-CRF-CNN (BLCC) models.", 
        "69": "The character-level CNN may address problems of out-of-vocabulary words, that is, words not seen during training.", 
        "70": "AM as Sequence Tagging: We frame AM as the following sequence tagging problem.", 
        "71": "Each input token has an associated label from Y , where\nY = {(b, t, d, s) | b \u2208 {B, I,O}, t \u2208 {P,C,MC,\u22a5}, d \u2208 {.", 
        "72": ".", 
        "73": ".", 
        "74": ",\u22122,\u22121, 1, 2, .", 
        "75": ".", 
        "76": ".", 
        "77": ",\u22a5}, s \u2208 {Supp,Att, For,Ag,\u22a5}}.", 
        "78": "(1)\nIn other words, Y consists of all four-tuples (b, t, d, s) where b is a BIO encoding indicating whether the current token is non-argumentative (O) or begins (B) or continues (I) a component; t indicates the type of the component (claim C, premise P, or major claim MC for our data).", 
        "79": "Moreover, d encodes the distance\u2014measured in number of components\u2014between the current component and the component it relates to.", 
        "80": "We encode the same d value for each token in a given component.", 
        "81": "Finally, s is the relation type (\u201cstance\u201d) between two components and its value may be Support (Supp), Attack (Att), or For or Against (Ag).", 
        "82": "We also have a special symbol \u22a5 that indicates when a particular slot is not filled: e.g., a nonargumentative unit (b = O) has neither component type, nor relation, nor relation type.", 
        "83": "We refer to this framing as STagT (for \u201cSimple Tagging\u201d), where T refers to the tagger used.", 
        "84": "For the example from \u00a71, our coding would hence be:\nSince it killed many (O,\u22a5,\u22a5,\u22a5) (B,P,1,Supp) (I,P,1,Supp) (I,P,1,Supp) marine lives , tourism (I,P,1,Supp) (I,P,1,Supp) (O,\u22a5,\u22a5,\u22a5) (B,C,\u22a5,For) has threatened nature .", 
        "85": "(I,C,\u22a5,For) (I,C,\u22a5,For) (I,C,\u22a5,For) (O,\u22a5, \u22a5, \u22a5)\nWhile the size of the label set Y is potentially infinite, we would expect it to be finite even in a potentially infinitely large data set, because humans also have only finite memory and are therefore expected to keep related components close in textual space.", 
        "86": "Indeed, as Figure 2 shows, in our PE essay data set about 30% of all relations between components have distance \u22121, that is, they follow the claim or premise that they attach to.", 
        "87": "Overall, around 2/3 of all relation distances d lie\nin {\u22122,\u22121, 1}.", 
        "88": "However, the figure also illustrates that there are indeed long-range dependencies: distance values between \u221211 and +10 are observed in the data.", 
        "89": "Multi-Task Learning Recently, there has been a lot of interest in so-called multi-task learning (MTL) scenarios, where several tasks are learned jointly (S\u00f8gaard and Goldberg, 2016; Peng and Dredze, 2016; Yang et al., 2016; Rusu et al., 2016; He\u0301ctor and Plank, 2017).", 
        "90": "It has been argued that such learning scenarios are closer to human learning because humans often transfer knowledge between several domains/tasks.", 
        "91": "In a neural context, MTL is typically implemented via weight sharing: several tasks are trained in the same network architecture, thereby sharing a substantial portion of network\u2019s parameters.", 
        "92": "This forces the network to learn generalized representations.", 
        "93": "In the MTL framework of S\u00f8gaard and Goldberg (2016) the underlying model is a BiLSTM with several hidden layers.", 
        "94": "Then, given different tasks, each task k \u2018feeds\u2019 from one of the hidden layers in the network.", 
        "95": "In particular, the hidden states encoded in a specific layer are fed into a multiclass classifier fk.", 
        "96": "The same work has demonstrated that this MTL protocol may be successful when there is a hierarchy between tasks and \u2018lower\u2019 tasks feed from lower layers.", 
        "97": "AM as MTL: We use the same framework STagT for modeling AM as MTL.", 
        "98": "However, we in addition train auxiliary tasks in the network\u2014 each with a distinct label set Y \u2032.", 
        "99": "Dependency Parsing methods can be classified into graph-based and transition-based approaches (Kiperwasser and Goldberg, 2016).", 
        "100": "Transitionbased parsers encode the parsing problem as a sequence of configurations which may be modified by application of actions such as shift, reduce,\netc.", 
        "101": "The system starts with an initial configuration in which sentence elements are on a buffer and a stack, and a classifier successively decides which action to take next, leading to different configurations.", 
        "102": "The system terminates after a finite number of actions, and the parse tree is read off the terminal configuration.", 
        "103": "Graph-based parsers solve a structured prediction problem in which the goal is learning a scoring function over dependency trees such that correct trees are scored above all others.", 
        "104": "Traditional dependency parsers used handcrafted feature functions that look at \u201ccore\u201d elements such as \u201cword on top of the stack\u201d, \u201cPOS of word on top of the stack\u201d, and conjunctions of core features such as \u201cword is X and POS is Y\u201d (see McDonald et al.", 
        "105": "(2005)).", 
        "106": "Most neural parsers have not entirely abandoned feature engineering.", 
        "107": "Instead, they rely, for example, on encoding the core features of parsers as low-dimensional embedding vectors (Chen and Manning, 2014) but ignore feature combinations.", 
        "108": "Kiperwasser and Goldberg (2016) design a neural parser that uses only four features: the BiLSTM vector representations of the top 3 items on the stack and the first item on the buffer.", 
        "109": "In contrast, Dyer et al.", 
        "110": "(2015)\u2019s neural parser associates each stack with a \u201cstack LSTM\u201d that encodes their contents.", 
        "111": "Actions are chosen based on the stack LSTM representations of the stacks, and no more feature engineering is necessary.", 
        "112": "Moreover, their parser has thus access to any part of the input, its history and stack contents.", 
        "113": "AM as Dependency Parsing: To frame a problem as a dependency parsing problem, each instance of the problem must be encoded as a directed tree, where tokens have heads, which in turn are labeled.", 
        "114": "For end-to-end AM, we propose the framing illustrated in Figure 3.", 
        "115": "We highlight two design decisions, the remaining are analogous and/or can be read off the figure.", 
        "116": "\u2022 The head of each non-argumentative text token is the document terminating token END, which is a punctuation mark in all our cases.", 
        "117": "The label of this link is O, the symbol for non-argumentative units.", 
        "118": "\u2022 The head of each token in a premise is the first token of the claim or premise that it links to.", 
        "119": "The label of each of these links is (b,P,Supp) or (b,P,Att) depending on whether a premise \u201csupports\u201d or \u201cattacks\u201d a claim or premise; b \u2208 {B, I}.", 
        "120": "LSTM-ER Miwa and Bansal (2016) present a neural end-to-end system for identifying both entities as well as relations between them.", 
        "121": "Their entity detection system is a BLC-type tagger and their relation detection system is a neural net that predicts a relation for each pair of detected entities.", 
        "122": "This relation module is a TreeLSTM model that makes use of dependency tree information.", 
        "123": "In addition to de-coupling entity and relation detection but jointly modeling them,3 pretraining on entities and scheduled sampling (Bengio et al., 2015) is applied to prevent low performance at early training stages of entity detection and relation classification.", 
        "124": "To adapt LSTM-ER for the argument structure encoded in the PE dataset, we model three types of entities (premise, claim, major claim) and four types of relations (for, against, support, attack).", 
        "125": "We use the feature-based ILP model from Stab and Gurevych (2017) as a comparison system.", 
        "126": "This system solves the subtasks of AM\u2014component segmentation, component classification, relation detection and classification\u2014 independently.", 
        "127": "Afterwards, it defines an ILP model with various constraints to enforce valid argumentation structure.", 
        "128": "As features it uses structural, lexical, syntactic and context features, cf.", 
        "129": "Stab and Gurevych (2017) and Persing and Ng (2016).", 
        "130": "Summarizing, we distinguish our framings in terms of modularity and in terms of their constraints.", 
        "131": "Modularity: Our dependency parsing framing and LSTM-ER are more modular than STagT because they de-couple relation information from entity information.", 
        "132": "However, (part of)\n3By \u2018de-coupling\u2019, we mean that both tasks are treated separately rather than merging entity and relation information in the same tag label (output space).", 
        "133": "Still, a joint model like that of Miwa and Bansal (2016) de-couples the two tasks in such a way that many model parameters are shared across the tasks, similarly as in MTL.", 
        "134": "this modularity can be regained by using STagT in an MTL setting.", 
        "135": "Moreover, since entity and relation information are considerably different, such a de-coupling may be advantageous.", 
        "136": "Constraints: LSTM-ER can, in principle, model any kind of\u2014 even many-to-many\u2014relationships between detected entities.", 
        "137": "Thus, it is not guaranteed to produce trees, as we observe in AM datasets.", 
        "138": "STagT also does not need to produce trees, but it more severely restricts search space than does LSTMER: each token/component can only relate to one (and not several) other tokens/components.", 
        "139": "The same constraint is enforced by the dependency parsing framing.", 
        "140": "All of the tagging modelings, including LSTM-ER, are local models whereas our parsing framing is a global model: it globally enforces a tree structure on the token-level.", 
        "141": "Further remarks: (1) part of the TreeLSTM modeling inherent to LSTM-ER is ineffective for our data because this modeling exploits dependency tree structures on the sentence level, while relationships between components are almost never on the sentence level.", 
        "142": "In our data, roughly 92% of all relationships are between components that appear in different sentences.", 
        "143": "Secondly, (2) that a model enforces a constraint does not necessarily mean that it is more suitable for a respective task.", 
        "144": "It has frequently been observed that models tend to produce output consistent with constraints in their training data in such situations (Zhang et al., 2017; He\u0301ctor and Plank, 2017); thus, they have learned the constraints.", 
        "145": "5 Experiments  This section presents and discusses the empirical results for the AM framings outlined in \u00a74.", 
        "146": "We relegate issues of pre-trained word embeddings, hyperparameter optimization and further practical issues to the supplementary material.", 
        "147": "Links to software used as well as some additional error analysis can also be found there.", 
        "148": "Evaluation Metric We adopt the evaluation metric suggested in Persing and Ng (2016).", 
        "149": "This computes true positives TP, false positives FP, and false negatives FN, and from these calculates component and relation F1 scores as F1 = 2TP2TP+FP+FN .", 
        "150": "For space reasons, we refer to Persing and Ng (2016) for specifics, but to illustrate, for components, true positives are defined as the set of components in the gold standard for which there exists a predicted component with the same type that\n\u2018matches\u2019.", 
        "151": "Persing and Ng (2016) define a notion of what we may term \u2018level \u03b1 matching\u2019: for example, at the 100% level (exact match) predicted and gold components must have exactly the same spans, whereas at the 50% level they must only share at least 50% of their tokens (approximate match).", 
        "152": "We refer to these scores as C-F1 (100%) and C-F1 (50%), respectively.", 
        "153": "For relations, an analogous F1 score is determined, which we denote by R-F1 (100%) and R-F1 (50%).", 
        "154": "We note that R-F1 scores depend on C-F1 scores because correct relations must have correct arguments.", 
        "155": "We also define a \u2018global\u2019 F1 score, which is the F1score of C-F1 and R-F1.", 
        "156": "Most of our results are shown in Table 2.", 
        "157": "(a) Dependency Parsing We show results for the two feature-based parsers MST (McDonald et al., 2005), Mate (Bohnet and Nivre, 2012) as well as the neural parsers by Dyer et al.", 
        "158": "(2015) (LSTM-Parser) and Kiperwasser and Goldberg (2016) (Kiperwasser).", 
        "159": "We train and test all parsers on the paragraph level, because training them on essay level was typically too memory-exhaustive.", 
        "160": "MST mostly labels only non-argumentative units correctly, except for recognizing individual major claims, but never finds their exact spans (e.g., \u201ctourism can create negative impacts on\u201d while the gold major claim is \u201cinternational tourism can create negative impacts on the destination countries\u201d).", 
        "161": "Mate is slightly better and in particular recognizes several major claims correctly.", 
        "162": "Kiperwasser performs decently on the approximate match level, but not on exact level.", 
        "163": "Upon inspection, we find that the parser often predicts \u2018too large\u2019 component spans, e.g., by including following punctuation.", 
        "164": "The best parser by far is the LSTM-Parser.", 
        "165": "It is over 100% better than Kiperwasser on exact spans and still several percentage points on approximate spans.", 
        "166": "How does performance change when we switch to the essay level?", 
        "167": "For the LSTM-Parser, the best performance on essay level is 32.84%/47.44% CF1 (100%/50% level), and 9.11%/14.45% on RF1, but performance result varied drastically between different parametrizations.", 
        "168": "Thus, the performance drop between paragraph and essay level is in any case immense.", 
        "169": "Since the employed features of modern featurebased parsers are rather general\u2014such as distance between words or word identities\u2014we had expected them to perform much better.", 
        "170": "The mini-\nmal feature set employed by Kiperwasser is apparently not sufficient for accurate AM but still a lot more powerful than the hand-crafted feature approaches.", 
        "171": "We hypothesize that the LSTM-Parser\u2019s good performance, relative to the other parsers, is due to its encoding of the whole stack history\u2014 rather than just the top elements on the stack as in Kiperwasser\u2014 which makes it aware of much larger \u2018contexts\u2019.", 
        "172": "While the drop in performance from paragraph to essay level is expected, the LSTM-Parser\u2019s deterioration is much more severe than the other models\u2019 surveyed below.", 
        "173": "We believe that this is due to a mixture of the following: (1) \u2018capacity\u2019, i.e., model complexity, of the parsers\u2014 that is, risk of overfitting; and (2) few, but very long sequences on essay level\u2014that is, little training data (trees), paired with a huge search space on each train/test instance, namely, the number of possible trees on n tokens.", 
        "174": "See also our discussions below, particularly, our stability analysis.", 
        "175": "(b) Sequence Tagging For these experiments, we use the BLCC tagger from Ma and Hovy (2016) and refer to the resulting system as STagBLCC.", 
        "176": "Again, we observe that paragraph level is considerably easier than essay level; e.g., for relations, there is \u223c5% points increase from essay to paragraph level.", 
        "177": "Overall, STagBLCC is \u223c13% better than the best parser for C-F1 and \u223c11% better for R-F1 on the paragraph level.", 
        "178": "Our explanation is that taggers are simpler local models, and thus need less training data and are less prone to overfitting.", 
        "179": "Moreover, they can much better deal with the long sequences because they are largely invariant to length: e.g., it does in principle not matter, from a parameter estimation perspective, whether we train our taggers on two sequences of lengths n and m, respectively, or on\none long sequence of length n+m.", 
        "180": "(c) MTL As indicated, we use the MTL tagging framework from S\u00f8gaard and Goldberg (2016) for multi-task experiments.", 
        "181": "The underlying tagging framework is weaker than that of BLCC: there is no CNN which can take subword information into account and there are no dependencies between output labels: each tagging prediction is made independently of the other predictions.", 
        "182": "We refer to this system as STagBL.", 
        "183": "Accordingly, as Table 3 shows for the essay level (paragraph level omitted for space reasons), results are generally weaker: For exact match, C-F1 values are about \u223c10% points below those of STagBLCC, while approximate match performances are much closer.", 
        "184": "Hence, the independence assumptions of the BL tagger apparently lead to more \u2018local\u2019 errors such as exact argument span identification (cf.", 
        "185": "error analysis).", 
        "186": "An analogous trend holds for argument relations.", 
        "187": "Additional Tasks: We find that when we train STagBL with only its main task\u2014with label set Y as in Eq.", 
        "188": "(1)\u2014the overall result is worst.", 
        "189": "In contrast, when we include the \u2018natural subtasks\u2019 \u201cC\u201d (label set YC consists of the projection on the coordinates (b, t) in Y) and/or \u201cR\u201d (label set YR consists of the projection on the coordinates (d, s)), performance increases typically by a few percentage points.", 
        "190": "This indicates that complex sequence tagging may benefit when we train a \u201csublabeler\u201d in the same neural architecture, a finding that may be particularly relevant for morphological POS tagging (Mu\u0308ller et al., 2013).", 
        "191": "Unlike S\u00f8gaard and Goldberg (2016), we do not find that the optimal architecture is the one in which \u201clower\u201d tasks (such as C or R) feed from lower layers.", 
        "192": "In fact, in one of the best parametrizations\nthe C task and the full task feed from the same layer in the deep BiLSTM.", 
        "193": "Moreover, we find that the C task is consistently more helpful as an auxiliary task than the R task.", 
        "194": "On essay level, (d) LSTM-ER performs very well on component identification (+5% C-F1 compared to STagBLCC), but rather poor on relation identification (-18% R-F1).", 
        "195": "Hence, its overall F1 on essay level is considerably below that of STagBLCC.", 
        "196": "In contrast, LSTM-ER trained and tested on paragraph level substantially outperforms all other systems discussed, both for component as well as for relation identification.", 
        "197": "We think that its generally excellent performance on components is due to LSTM-ER\u2019s de-coupling of component and relation tasks.", 
        "198": "Our findings indicate that a similar result can be achieved for STagT via MTL when components and relations are included as auxiliary tasks, cf.", 
        "199": "Table 3.", 
        "200": "For example, the improvement of LSTM-ER over STagBLCC, for C-F1, roughly matches the increase for STagBL when including components and relations separately (Y-3:YC-3:YR-3) over not including them as auxiliary tasks (Y-3).", 
        "201": "Lastly, the better performance of LSTM-ER over STagBLCC for relations on paragraph level appears to be a consequence of its better performance on components.", 
        "202": "E.g., when both arguments are correctly predicted, STagBLCC has even higher chance of getting their relation correct than LSTM-ER (95.34% vs. 94.17%).", 
        "203": "Why does LSTM-ER degrade so much on essay level for R-F1?", 
        "204": "As said, text sequences are much longer on essay level than on paragraph level\u2014 hence, there are on average many more entities on essay level.", 
        "205": "Thus, there are also many more possible relations between all entities discovered in a text\u2014namely, there are O(2m 2 ) possible relations between m discovered components.", 
        "206": "Due to its\ngenerality, LSTM-ER considers all these relations as plausible, while STagT does not (for any of choice of T ): e.g., our coding explicitly constrains each premise to link to exactly one other component, rather than to 0, .", 
        "207": ".", 
        "208": ".", 
        "209": ",m possible components, as LSTM-ER allows.", 
        "210": "In addition, our explicit coding of distance values d biases the learner T to reflect the distribution of distance values found in real essays\u2014namely, that related components are typically close in terms of the number of components between them.", 
        "211": "In contrast, LSTM-ER only mildly prefers short-range dependencies over long-range dependencies, cf.", 
        "212": "Figure 4.", 
        "213": "The (e) ILP has access to both paragraph and essay level information and thus has always more information than all neural systems compared to.", 
        "214": "Thus, it also knows in which paragraph in an essay it is.", 
        "215": "This is useful particularly for major claims, which always occur in first or last paragraphs in our data.", 
        "216": "Still, its performance is equal to or lower than that of LSTM-ER and STagBLCC when both are evaluated on paragraph level.", 
        "217": "Stability Analysis Table 4 shows averages and standard deviations of two selected models, namely, the STagBLCC tagging framework as well as the LSTM-Parser over several different runs (different random initializations as well as different hyperparameters as discussed in the supplementary material).", 
        "218": "These results detail that the taggers have lower standard deviations than the parsers.", 
        "219": "The difference is particularly striking on the essay level where the parsers often completely fail to learn, that is, their performance scores are close to 0%.", 
        "220": "As discussed above, we attribute this to the parsers\u2019 increased model capacity relative to the taggers, which makes them more prone to overfitting.", 
        "221": "Data scarcity is another very likely source of error in this context, as the parsers only observe 322 (though very rich) trees\nin the training data, while the taggers are always roughly trained on 120K tokens.", 
        "222": "On paragraph level, they do observe more trees, namely, 1786.", 
        "223": "Error analysis\nA systematic source of errors for all systems is detecting exact argument spans (segmentation).", 
        "224": "For instance, the ILP system predicts the following premise: \u201cAs a practical epitome , students should be prepared to present in society after their graduation\u201d, while the gold premise omits the preceding discourse marker, and hence reads: \u201cstudents should be prepared to present in society after their graduation\u201d.", 
        "225": "On the one hand, it has been observed that even humans have problems exactly identifying such entity boundaries (Persing and Ng, 2016; Yang and Cardie, 2013).", 
        "226": "On the other hand, our results in Table 2 indicate that the neural taggers BLCC and BLC (in the LSTMER model) are much better at such exact identification than either the ILP model or the neural parsers.", 
        "227": "While the parsers\u2019 problems are most likely due to model complexity, we hypothesize that the ILP model\u2019s increased error rates stem from a weaker underlying tagging model (featurebased CRF vs. BiLSTM) and/or its features.4 In fact, as Table 5 shows, the macro-F1 scores5 on only the component segmentation tasks (BIO labeling) are substantially higher for both LSTMER and STagBLCC than for the ILP model.", 
        "228": "Noteworthy, the two neural systems even outperform the human upper bound (HUB) in this context, reported as 88.6% in Stab and Gurevych (2017).", 
        "229": "6 Conclusion  We present the first study on neural end-to-end AM.", 
        "230": "We experimented with different framings,\n4The BIO tagging task is independent and thus not affected by the ILP constraints in the model of Stab and Gurevych (2017).", 
        "231": "The same holds true for the model of Persing and Ng (2016).", 
        "232": "5Denoted FscoreM in Sokolova and Lapalme (2009).", 
        "233": "such as encoding AM as a dependency parsing problem, as a sequence tagging problem with particular label set, as a multi-task sequence tagging problem, and as a problem with both sequential and tree structure information.", 
        "234": "We show that (1) neural computational AM is as good or (substantially) better than a competing feature-based ILP formulation, while eliminating the need for manual feature engineering and costly ILP constraint designing.", 
        "235": "(2) BiLSTM taggers perform very well for component identification, as demonstrated for our STagT frameworks, for T = BLCC and T = BL, as well as for LSTM-ER (BLC tagger).", 
        "236": "(3) (Naively) coupling component and relation identification is not optimal, but both tasks should be treated separately, but modeled jointly.", 
        "237": "(4) Relation identification is more difficult: when there are few entities in a text (\u201cshort documents\u201d), a more general framework such as that provided in LSTM-ER performs reasonably well.", 
        "238": "When there are many entities (\u201clong documents\u201d), a more restrained modeling is preferable.", 
        "239": "These are also our policy recommendations.", 
        "240": "Our work yields new state-of-the-art results in end-to-end AM on the PE dataset from Stab and Gurevych (2017).", 
        "241": "Another possible framing, not considered here, is to frame AM as an encoder-decoder problem (Bahdanau et al., 2015; Vinyals et al., 2015).", 
        "242": "This is an even more general modeling than LSTM-ER.", 
        "243": "Its suitability for the end-to-end learning task is scope for future work, but its adequacy for component classification and relation identification has been investigated in Potash et al.", 
        "244": "(2016).", 
        "245": "Acknowledgments  We thank Lucie Flekova, Judith Eckle-Kohler, Nils Reimers, and Christian Stab for valuable feedback and discussions.", 
        "246": "We also thank the anonymous reviewers for their suggestions.", 
        "247": "The second author was supported by the German Federal Ministry of Education and Research (BMBF) under the promotional reference 01UG1416B (CEDIFOR).", 
        "248": "In COLING 2016, 26th International Conference on Computational Linguistics, Proceedings of the Conference: Technical Papers, December 11-16,  2016, Osaka, Japan.", 
        "249": "pages 1568\u20131578.", 
        "250": "Christian Stab and Iryna Gurevych.", 
        "251": "2017.", 
        "252": "Parsing argumentation structures in persuasive essays.", 
        "253": "Computational Linguistics (in press), preprint: http://arxiv.org/abs/1604.07370).", 
        "254": "Oriol Vinyals, Meire Fortunato, and Navdeep Jaitly.", 
        "255": "2015.", 
        "256": "Pointer networks.", 
        "257": "In C. Cortes, N. D. Lawrence, D. D. Lee, M. Sugiyama, and R. Garnett, editors, Advances in Neural Information Processing Systems 28, Curran Associates, Inc., pages 2692\u20132700.", 
        "258": "Bishan Yang and Claire Cardie.", 
        "259": "2013.", 
        "260": "Joint inference for fine-grained opinion extraction.", 
        "261": "In Proceedings of the 51st Annual Meeting of the Association for Computational Linguistics (Volume 1: Long Papers).", 
        "262": "Association for Computational Linguistics, Sofia, Bulgaria, pages 1640\u20131649.", 
        "263": "http://www.aclweb.org/anthology/P13-1161.", 
        "264": "Zhilin Yang, Ruslan Salakhutdinov, and William W. Cohen.", 
        "265": "2016.", 
        "266": "Multi-task cross-lingual sequence tagging from scratch.", 
        "267": "CoRR abs/1603.06270.", 
        "268": "Fan Zhang and Diane J. Litman.", 
        "269": "2016.", 
        "270": "Using context to predict the purpose of argumentative writing revisions.", 
        "271": "In The Conference of the North American Chapter of the Association for Computational Linguistics: Human Language Technologies.", 
        "272": "pages 1424\u20131430.", 
        "273": "Xingxing Zhang, Jianpeng Cheng, and Mirella Lapata.", 
        "274": "2017.", 
        "275": "Dependency parsing as head selection.", 
        "276": "In Proceedings of EACL 2017 (long papers).", 
        "277": "Association for Computational Linguistics."
    }, 
    "document_id": "P17-1002.pdf.json"
}
