{
    "abstract_sentences": {
        "1": "Skip-Gram Negative Sampling (SGNS) word embedding model, well known by its implementation in \u201cword2vec\u201d software, is usually optimized by stochastic gradient descent.", 
        "2": "However, the optimization of SGNS objective can be viewed as a problem of searching for a good matrix with the low-rank constraint.", 
        "3": "The most standard way to solve this type of problems is to apply Riemannian optimization framework to optimize the SGNS objective over the manifold of required low-rank matrices.", 
        "4": "In this paper, we propose an algorithm that optimizes SGNS objective using Riemannian optimization and demonstrates its superiority over popular competitors, such as the original method to train SGNS and SVD over SPPMI matrix."
    }, 
    "body_sentences": {
        "1": "  Proceedings of the 55th Annual Meeting of the Association for Computational Linguistics, pages 2028\u20132036 Vancouver, Canada, July 30 - August 4, 2017. c\u00a92017 Association for Computational Linguistics\nhttps://doi.org/10.18653/v1/P17-1185  1 Introduction  In this paper, we consider the problem of embedding words into a low-dimensional space in order to measure the semantic similarity between them.", 
        "2": "As an example, how to find whether the word \u201ctable\u201d is semantically more similar to the word \u201cstool\u201d than to the word \u201csky\u201d?", 
        "3": "That is achieved by constructing a low-dimensional vector representation for each word and measuring similarity between the words as the similarity between the corresponding vectors.", 
        "4": "One of the most popular word embedding models (Mikolov et al., 2013) is a discriminative neural network that optimizes Skip-Gram Negative Sampling (SGNS) objective (see Equation 3).", 
        "5": "It aims at predicting whether two words can be found close to each other within a text.", 
        "6": "As shown in Section 2, the process of word embeddings training \u2217The first two authors contributed equally to this work\nusing SGNS can be divided into two general steps with clear objectives:\nStep 1.", 
        "7": "Search for a low-rank matrix X that provides a good SGNS objective value;\nStep 2.", 
        "8": "Search for a good low-rank representation X = WC> in terms of linguistic metrics, where W is a matrix of word embeddings and C is a matrix of so-called context embeddings.", 
        "9": "Unfortunately, most previous approaches mixed these two steps into a single one, what entails a not completely correct formulation of the optimization problem.", 
        "10": "For example, popular approaches to train embeddings (including the original \u201cword2vec\u201d implementation) do not take into account that the objective from Step 1 depends only on the product X = WC>: instead of straightforward computing of the derivative w.r.t.", 
        "11": "X , these methods are explicitly based on the derivatives w.r.t.", 
        "12": "W and C, what complicates the optimization procedure.", 
        "13": "Moreover, such approaches do not take into account that parametrization WC> of matrix X is non-unique and Step 2 is required.", 
        "14": "Indeed, for any invertible matrix S, we have\nX = W1C > 1 = W1SS \u22121C>1 = W2C > 2 ,\ntherefore, solutionsW1C>1 andW2C > 2 are equally good in terms of the SGNS objective but entail different cosine similarities between embeddings and, as a result, different performance in terms of linguistic metrics (see Section 4.2 for details).", 
        "15": "A successful attempt to follow the above described steps, which outperforms the original SGNS optimization approach in terms of various linguistic tasks, was proposed in (Levy and Goldberg, 2014).", 
        "16": "In order to obtain a low-rank matrix X on Step 1, the method reduces the dimensionality of Shifted Positive Pointwise Mutual Informa-\n2028\ntion (SPPMI) matrix via Singular Value Decomposition (SVD).", 
        "17": "On Step 2, it computes embeddings W and C via a simple formula that depends on the factors obtained by SVD.", 
        "18": "However, this method has one important limitation: SVD provides a solution to a surrogate optimization problem, which has no direct relation to the SGNS objective.", 
        "19": "In fact, SVD minimizes the Mean Squared Error (MSE) between X and SPPMI matrix, what does not lead to minimization of SGNS objective in general (see Section 6.1 and Section 4.2 in (Levy and Goldberg, 2014) for details).", 
        "20": "These issues bring us to the main idea of our paper: while keeping the low-rank matrix search setup on Step 1, optimize the original SGNS objective directly.", 
        "21": "This leads to an optimization problem over matrix X with the lowrank constraint, which is often (Mishra et al., 2014) solved by applying Riemannian optimization framework (Udriste, 1994).", 
        "22": "In our paper, we use the projector-splitting algorithm (Lubich and Oseledets, 2014), which is easy to implement and has low computational complexity.", 
        "23": "Of course, Step 2 may be improved as well, but we regard this as a direction of future work.", 
        "24": "As a result, our approach achieves the significant improvement in terms of SGNS optimization on Step 1 and, moreover, the improvement on Step 1 entails the improvement on Step 2 in terms of linguistic metrics.", 
        "25": "That is why, the proposed two-step decomposition of the problem makes sense, what, most importantly, opens the way to applying even more advanced approaches based on it (e.g., more advanced Riemannian optimization techniques for Step 1 or a more sophisticated treatment of Step 2).", 
        "26": "To summarize, the main contributions of our paper are:\n\u2022 We reformulated the problem of SGNS word embedding learning as a two-step procedure with clear objectives;\n\u2022 For Step 1, we developed an algorithm based on Riemannian optimization framework that optimizes SGNS objective over low-rank matrix X directly;\n\u2022 Our algorithm outperforms state-of-the-art competitors in terms of SGNS objective and the semantic similarity linguistic metric (Levy and Goldberg, 2014; Mikolov et al., 2013; Schnabel et al., 2015).", 
        "27": "2 Problem Setting    2.1 Skip-Gram Negative Sampling  In this paper, we consider the Skip-Gram Negative Sampling (SGNS) word embedding model (Mikolov et al., 2013), which is a probabilistic discriminative model.", 
        "28": "Assume we have a text corpus given as a sequence of words w1, .", 
        "29": ".", 
        "30": ".", 
        "31": ", wn, where n may be larger than 1012 and wi \u2208 VW belongs to a vocabulary of words VW .", 
        "32": "A context c \u2208 VC of the word wi is a word from set {wi\u2212L, ..., wi\u22121, wi+1, ..., wi+L} for some fixed window size L. Let w, c \u2208 Rd be the word embeddings of word w and context c, respectively.", 
        "33": "Assume they are specified by the following mappings:\nW : VW \u2192 Rd, C : VC \u2192 Rd.", 
        "34": "The ultimate goal of SGNS word embedding training is to fit good mappingsW and C.\nLet D be a multiset of all word-context pairs observed in the corpus.", 
        "35": "In the SGNS model, the probability that word-context pair (w, c) is observed in the corpus is modeled as a following dsitribution:\nP (#(w, c) 6= 0|w, c) =\n= \u03c3(\u3008w, c\u3009) = 1 1 + exp(\u2212\u3008w, c\u3009) ,\n(1)\nwhere #(w, c) is the number of times the pair (w, c) appears in D and \u3008x,y\u3009 is the scalar product of vectors x and y.", 
        "36": "Number d is a hyperparameter that adjusts the flexibility of the model.", 
        "37": "It usually takes values from tens to hundreds.", 
        "38": "In order to collect a training set, we take all pairs (w, c) from D as positive examples and k randomly generated pairs (w, c) as negative ones.", 
        "39": "The number of times the word w and the context c appear in D can be computed as\n#(w) = \u2211\nc\u2208Vc #(w, c),\n#(c) = \u2211\nw\u2208Vw #(w, c)\naccordingly.", 
        "40": "Then negative examples are generated from the distribution defined by #(c) counters:\nPD(c) = #(c)\n|D| .", 
        "41": "In this way, we have a model maximizing the following logarithmic likelihood objective for all word-context pairs (w, c):\nlwc = #(w, c)(log \u03c3(\u3008w, c\u3009)+ +k \u00b7 Ec\u2032\u223cPD log \u03c3(\u2212\u3008w, c\u2032\u3009)).", 
        "42": "(2)\nIn order to maximize the objective over all observations for each pair (w, c), we arrive at the following SGNS optimization problem over all possible mappingsW and C:\nl = \u2211\nw\u2208VW\n\u2211\nc\u2208VC (#(w, c)(log \u03c3(\u3008w, c\u3009)+\n+k \u00b7 Ec\u2032\u223cPD log \u03c3(\u2212\u3008w, c\u2032\u3009)))\u2192 maxW,C .", 
        "43": "(3)\nUsually, this optimization is done via the stochastic gradient descent procedure that is performed during passing through the corpus (Mikolov et al., 2013; Rong, 2014).", 
        "44": "2.2 Optimization over Low-Rank Matrices  Relying on the prospect proposed in (Levy and Goldberg, 2014), let us show that the optimization problem given by (3) can be considered as a problem of searching for a matrix that maximizes a certain objective function and has the rank-d constraint (Step 1 in the scheme described in Section 1).", 
        "45": "2.2.1 SGNS Loss Function  As shown in (Levy and Goldberg, 2014), the logarithmic likelihood (3) can be represented as the sum of lw,c(w, c) over all pairs (w, c), where lw,c(w, c) has the following form:\nlw,c(w, c) = #(w, c) log \u03c3(\u3008w, c\u3009)+\n+k #(w)#(c) |D| log \u03c3(\u2212\u3008w, c\u3009).", 
        "46": "(4)\nA crucial observation is that this loss function depends only on the scalar product \u3008w, c\u3009 but not on embeddings w and c separately:\nlw,c(w, c) = fw,c(xw,c),\nwhere\nfw,c(xw,c) = aw,c log \u03c3(xw,c)+bw,c log \u03c3(\u2212xw,c),\nand xw,c is the scalar product \u3008w, c\u3009, and\naw,c = #(w, c), bw,c = k #(w)#(c)\n|D| are constants.", 
        "47": "2.2.2 Matrix Notation  Denote |VW | as n and |VC | as m. Let W \u2208 Rn\u00d7d and C \u2208 Rm\u00d7d be matrices, where each row w \u2208 Rd of matrix W is the word embedding of the corresponding word w and each row c \u2208 Rd of matrix C is the context embedding of the corresponding context c. Then the elements of the product of these matrices\nX = WC>\nare the scalar products xw,c of all pairs (w, c):\nX = (xw,c), w \u2208 VW , c \u2208 VC .", 
        "48": "Note that this matrix has rank d, becauseX equals to the product of two matrices with sizes (n \u00d7 d) and (d \u00d7m).", 
        "49": "Now we can write SGNS objective given by (3) as a function of X: F (X) = \u2211\nw\u2208VW\n\u2211\nc\u2208VC fw,c(xw,c), F : Rn\u00d7m \u2192 R.\n(5) This arrives us at the following proposition:\nProposition 1 SGNS optimization problem given by (3) can be rewritten in the following constrained form:\nmaximize X\u2208Rn\u00d7m F (X), subject to X \u2208Md, (6)\nwhere Md is the manifold (Udriste, 1994) of all matrices in Rn\u00d7m with rank d:\nMd = {X \u2208 Rn\u00d7m : rank(X) = d}.", 
        "50": "The key idea of this paper is to solve the optimization problem given by (6) via the framework of Riemannian optimization, which we introduce in Section 3.", 
        "51": "Important to note that this prospect does not suppose the optimization over parameters W and C directly.", 
        "52": "This entails the optimization in the space with ((n + m \u2212 d) \u00b7 d) degrees of freedom (Mukherjee et al., 2015) instead of ((n+m) \u00b7 d), what simplifies the optimization process (see Section 5 for the experimental results).", 
        "53": "2.3 Computing Embeddings from a Low-Rank Solution  Once X is found, we need to recover W and C such that X = WC> (Step 2 in the scheme described in Section 1).", 
        "54": "This problem does not\nhave a unique solution, since if (W,C) satisfy this equation, then WS\u22121 and CS> satisfy it as well for any non-singular matrix S. Moreover, different solutions may achieve different values of the linguistic metrics (see Section 4.2 for details).", 
        "55": "While our paper focuses on Step 1, we use, for Step 2, a heuristic approach that was proposed in (Levy et al., 2015) and it shows good results in practice.", 
        "56": "We compute SVD of X in the form\nX = U\u03a3V >,\nwhere U and V have orthonormal columns, and \u03a3 is the diagonal matrix, and use\nW = U \u221a \u03a3, C = V \u221a \u03a3\nas matrices of embeddings.", 
        "57": "A simple justification of this solution is the following: we need to map words into vectors in a way that similar words would have similar embeddings in terms of cosine similarities:\ncos(w1,w2) = \u3008w1,w2\u3009 \u2016w1\u2016 \u00b7 \u2016w2\u2016 .", 
        "58": "It is reasonable to assume that two words are similar, if they share contexts.", 
        "59": "Therefore, we can estimate the similarity of two words w1, w2 as\ns(w1, w2) = \u2211\nc\u2208VC xw1,c \u00b7 xw2,c,\nwhat is the element of the matrix XX> with indices (w1, w2).", 
        "60": "Note that\nXX> = U\u03a3V >V \u03a3U> = U\u03a32U>.", 
        "61": "If we choose W = U\u03a3, we exactly obtain \u3008w1,w2\u3009 = s(w1, w2), since WW> = XX> in this case.", 
        "62": "That is, the cosine similarity of the embeddings w1,w2 coincides with the intuitive similarity s(w1, w2).", 
        "63": "However, scaling by \u221a\n\u03a3 instead of \u03a3 was shown in (Levy et al., 2015) to be a better solution in experiments.", 
        "64": "3 Proposed Method    3.1 Riemannian Optimization    3.1.1 General Scheme  The main idea of Riemannian optimization (Udriste, 1994) is to consider (6) as a constrained optimization problem.", 
        "65": "Assume we have an approximated solution Xi on a current\nstep of the optimization process, where i is the step number.", 
        "66": "In order to improve Xi, the next step of the standard gradient ascent outputs the point\nXi +\u2207F (Xi),\nwhere \u2207F (Xi) is the gradient of objective F at the point Xi.", 
        "67": "Note that the gradient \u2207F (Xi) can be naturally considered as a matrix in Rn\u00d7m.", 
        "68": "Point Xi + \u2207F (Xi) leaves the manifold Md, because its rank is generally greater than d. That is why Riemannian optimization methods map point Xi + \u2207F (Xi) back to manifold Md.", 
        "69": "The standard Riemannian gradient method first projects the gradient step onto the tangent space at the current point Xi and then retracts it back to the manifold:\nXi+1 = R (PTM (Xi +\u2207F (Xi))),\nwhere R is the retraction operator, and PTM is the projection onto the tangent space.", 
        "70": "Although the optimization problem is nonconvex, Riemannian optimization methods show good performance on it.", 
        "71": "Theoretical properties and convergence guarantees of such methods are discussed in (Wei et al., 2016) more thoroughly.", 
        "72": "3.1.2 Projector-Splitting Algorithm  In our paper, we use a simplified version of such approach that retracts pointXi +\u2207F (Xi) directly to the manifold and does not require projection onto the tangent space PTM as illustrated in Figure 1:\nXi+1 = R(Xi +\u2207F (Xi)).", 
        "73": "Intuitively, retractor R finds a rank-d matrix on the manifoldMd that is similar to high-rank matrix Xi + \u2207F (Xi) in terms of Frobenius norm.", 
        "74": "How can we do it?", 
        "75": "The most straightforward way to reduce the rank of Xi +\u2207F (Xi) is to perform the SVD, which keeps d largest singular values of it:\n1: Ui+1, Si+1, V >i+1 \u2190 SVD(Xi +\u2207F (Xi)), 2: Xi+1 \u2190 Ui+1Si+1V >i+1.", 
        "76": "(7)\nHowever, it is computationally expensive.", 
        "77": "Instead of this approach, we use the projectorsplitting method (Lubich and Oseledets, 2014), which is a second-order retraction onto the manifold (for details, see the review (Absil and Oseledets, 2015)).", 
        "78": "Its practical implementation is\nFine-tuning word embeddings xxxxx xxxxx xxxxx xxxx xxxx xxxx xxx xxxxx xxxx xxxxx ABSTRACT Blah-blah Keywords word embeddings, SGNS, word2vec, GLOVE 1.", 
        "79": "INTRODUCTION sdfdsf 2.", 
        "80": "CONCLUSIONS\n3.", 
        "81": "RELATED WORK Mikolov main [?]", 
        "82": "Levi main [?]", 
        "83": "rFi\nXi = UiSiV T i\nXi+1 = Ui+1Si+1V T i+1\nretraction\n4.", 
        "84": "CONCLUSIONS\nPermission to make digital or hard copies of all or part of this work for\npersonal or classroom use is granted without fee provided that copies are\nnot made or distributed for profit or commercial advantage and that copies\nbear this notice and the full citation on the first page.", 
        "85": "To copy otherwise, to\nrepublish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee.", 
        "86": "WOODSTOCK \u201997 El Paso, Texas USA Copyright 20XX ACM X-XXXXX-XX-X/XX/XX ...$15.00.", 
        "87": "Fine-tuning word embeddings xxxxx xxxxx xxxxx xxxx xxxx xxxx xxx xxxxx xxxx xxxxx ABSTRACT Blah-blah Keywords word embeddings, SGNS, word2vec, GLOVE 1.", 
        "88": "INTRODUCTION sdfdsf\n2.", 
        "89": "CONCLUSIONS\n3.", 
        "90": "RELATED WORK Mikolov main [?]", 
        "91": "Levi main [?]", 
        "92": "rFi\nXi = UiSiV T i\nXi+1 = Ui+1Si+1V T i+1\nretraction\nMd\n4.", 
        "93": "CONCLUSIONS\nPermission to make digital or hard copies of all or part of this work for\npersonal or classroom use is granted without fee provided that copies are\nnot made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page.", 
        "94": "To copy otherwise, to republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee.", 
        "95": "WOODSTOCK \u201997 El Paso, Texas USA Copyright 20XX ACM X-XXXXX-XX-X/XX/XX ...$15.00.", 
        "96": "Fine-tuning word embeddings xxxxx xxxxx xxxxx xxxx xxxx xxxx xxx xxxxx xxxx xxxxx ABSTRACT Blah-blah Keywords word embeddings, SGNS, word2vec, GLOVE 1.", 
        "97": "INTRODUCTION sdfdsf\n2.", 
        "98": "CONCLUSIONS\n3.", 
        "99": "RELATED WORK Mikolov main [?]", 
        "100": "Levi main [?]", 
        "101": "rF (Xi)\nXi +rF (Xi)\nXi = UiSiV T i\nXi\nXi+1\nXi+1 = Ui+1Si+1V T i+1\nretraction\nMd\n4.", 
        "102": "CONCLUSIONS\nPermission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page.", 
        "103": "To copy otherwise, to republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee.", 
        "104": "WOODSTOCK \u201997 El Paso, Texas USA Copyright 20XX ACM X-XXXXX-XX-X/XX/XX ...$15.00.", 
        "105": "Fine-tuning word embeddings xxxxx xxxxx xxxxx xxx xxxx xxxx xxx xxxxx xxxx xxxxx ABSTRACT Blah-blah Keywords word embeddings, SGNS, word2vec, GLOVE 1.", 
        "106": "INTRODUCTION sdfdsf 2.", 
        "107": "CONCLUSIONS  3.", 
        "108": "RELATED WORK  Mikolov main [?]", 
        "109": "Levi main [?]", 
        "110": "rF (Xi)\nXi +rF (Xi)\nXi = UiSiV T i\nXi\nXi+1\nXi+1 = Ui+1Si+1V T i+1\nretraction\nMd\n4.", 
        "111": "CONCLUSIONS\nPermission to make digital or hard copies of all or part of this work for\npersonal or classroom use is granted without fee provided that copies are\nnot made or distributed for profit or commercial advantage and that copies\nbear this notice and the full citation on the first page.", 
        "112": "To copy otherwise, to\nrepublish, to post on servers or to redistribute to lists, requires prior specific\npermission and/or a fee.", 
        "113": "WOODSTOCK \u201997 El Paso, Texas USA Copyright 20XX ACM X-XXXXX-XX-X/XX/XX ...$15.00.", 
        "114": "Fine-tuning word embeddings xxxxx xxxxx xxxxx xxxx xxxx xxxx xxx xxxxx xxxx xxxxx ABSTRACT Blah-blah Keywords word embeddings, SGNS, word2vec, GLOVE 1.", 
        "115": "INTRODUCTION sdfdsf\n2.", 
        "116": "CONCLUSIONS\n3.", 
        "117": "RELATED WORK Mikolov main [?]", 
        "118": "Levi main [?]", 
        "119": "rF (Xi)\nXi +rF (Xi)\nXi = UiSiV T i\nXi\nXi+1\nXi+1 = Ui+1Si+1V T i+1\nretraction\nMd\n4.", 
        "120": "CONCLUSIONS\nPermission to make digital or hard copies of all or part of this work for personal or classro m us is r nted without f e provided tha copies are not made or distributed for profit or commercial advantage an that copies bear this notice and the full citation n the first page.", 
        "121": "To copy otherwise, to republish, to post on servers or to redistribute o lists, requires prior specific permission and/or a fee.", 
        "122": "WOODSTOCK \u201997 El Paso, Texas USA Copyright 20XX ACM X-XXXXX-XX-X/XX/XX ...$15.00.", 
        "123": "Fine-tuning word embeddings xxxxx xx xxxxx xxxx xxxx xxxx xxx xxxxx xxxx xxxxx ABSTRACT Blah-blah Keywords word embeddings, SGNS, word2vec, GLOVE 1.", 
        "124": "INTRODUCTION sdfdsf\n2.", 
        "125": "CONCLUSIONS\n3.", 
        "126": "RELATED WORK Mikolov main [?]", 
        "127": "Levi main [?]", 
        "128": "rF (Xi)\nXi +rF (Xi)\nXi = UiSiV T i\nXi\nXi+1\nXi+1 = Ui+1Si+1V T i+1\nretraction\nMd\n4.", 
        "129": "CONCLUSIONS\nPermission to make digital or hard copies of all or part of this work for\npersonal or classroom use is granted without fee provided that copies are\nnot made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page.", 
        "130": "To copy otherwise, to republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee.", 
        "131": "WOODSTOCK \u201997 El Paso, Texas USA Copyright 20XX ACM X-XXXXX-XX-X/XX/XX ...$15.00.", 
        "132": "Figure 1: Geometric interpretation of one step of projector-splitting optimization procedure: the gradient step an the retraction of the high-rank matrixXi+\u2207F (Xi) t the manifold of l w- ank matrices Md.", 
        "133": "also qui e in u tiv : instead of compu ing the full SVD of Xi + \u2207F (Xi) according to the gradient projection method, we use just one step of the block power numerical method (Bentbib and Kanber, 2015) which computes the SVD, what reduces the computational complexity.", 
        "134": "Let us keep the current point in the following factorized form:\nXi = UiSiV > i , (8)\nwhere matrices Ui \u2208 Rn\u00d7d and Vi \u2208 Rm\u00d7d have d orthonormal columns and Si \u2208 Rd\u00d7d.", 
        "135": "Then we need to perform two QR-decompositions to retract point Xi +\u2207F (Xi) back to the manifold: 1: Ui+1, Si+1 \u2190 QR ((Xi +\u2207F (Xi))Vi) , 2: Vi+1, S>i+1 \u2190 QR ( (Xi +\u2207F (Xi))>Ui+1 ) ,\n3: Xi+1 \u2190 Ui+1Si+1V >i+1.", 
        "136": "In this way, we always keep the solution Xi+1 = Ui+1Si+1V > i+1 on the manifold Md and in the form (8).", 
        "137": "What is important, we only need to compute \u2207F (Xi), so the gradients with respect to U , S and V are never computed explicitly, thus avoiding the subtle case where S is close to singular (so-called singular (critical) point on the manifold).", 
        "138": "Indeed, the gradient with respect to U (while keeping the orthogonality constraints) can be written (Koch and Lubich, 2007) as:\n\u2202F \u2202U = \u2202F \u2202X V S\u22121,\nwhich means that the gradient will be large if S is close to singular.", 
        "139": "The projector-splitting scheme is free from this problem.", 
        "140": "3.2 Algorithm  In case of SGNS objective given by (5), an element of gradient\u2207F has the form:\n(\u2207F (X))w,c = \u2202fw,c(xw,c)\n\u2202xw,c =\n= #(w, c) \u00b7 \u03c3 (\u2212xw,c)\u2212 k #(w)#(c)\n|D| \u00b7 \u03c3 (xw,c) .", 
        "141": "To make the method more flexible in terms of convergence properties, we additionally use \u03bb \u2208 R, which is a step size parameter.", 
        "142": "In this case, retracto R returns Xi + \u03bb\u2207F (Xi) instead of Xi + \u2207F (Xi) onto the m nifold.", 
        "143": "The whole optimization procedure is summarized in Algorithm 1.", 
        "144": "4 Experimental Setup    4.1 Training Models  We compare our method (\u201cRO-SGNS\u201d in the tables) performance to two baselines: SGNS embeddings optimized via Stochastic Gradient Descent, implemented in the original \u201cword2vec\u201d, (\u201cSGDSGNS\u201d in the tables) (Mikolov et al., 2013) and embeddings obtained by SVD over SPPMI matrix (\u201cSVD-SPPMI\u201d in the tables) (Levy and Goldberg, 2014).", 
        "145": "We have also experimented with the blockwise alternating optimization over factors W and C, but the results are almost the same to SGD results, that is why we do not to include them into the paper.", 
        "146": "The source code of our experiments is available online1.", 
        "147": "The models were trained on English Wikipedia \u201cenwik9\u201d corpus2, which was previously used in most papers on this topic.", 
        "148": "Like in previous studies, we counted only the words which occur more than 200 times in the training corpus (Levy and Goldberg, 2014; Mikolov et al., 2013).", 
        "149": "As a result, we obtained a vocabulary of 24292 unique tokens (set of words VW and set of contexts VC are equal).", 
        "150": "The size of the context window was set to 5 for all experiments, as it was done in (Levy and Goldberg, 2014; Mikolov et al., 2013).", 
        "151": "We conduct three series of experiments: for dimensionality d = 100, d = 200, and d = 500.", 
        "152": "1https://github.com/AlexGrinch/ro_sgns 2http://mattmahoney.net/dc/textdata\nAlgorithm 1 Riemannian Optimization for SGNS Require: Dimentionality d, initialization W0 and C0, step size \u03bb, gradient function \u2207F : Rn\u00d7m \u2192\nRn\u00d7m, number of iterations K Ensure: Factor W \u2208 Rn\u00d7d\n1: X0 \u2190W0C>0 # get an initial point at the manifold 2: U0, S0, V > 0 \u2190 SVD(X0) # compute the first point satisfying the low-rank constraint 3: for i\u2190 1, .", 
        "153": ".", 
        "154": ".", 
        "155": ",K do 4: Ui, Si \u2190 QR ((Xi\u22121 + \u03bb\u2207F (Xi\u22121))Vi\u22121) # perform one step of the block power method 5: Vi, S > i \u2190 QR ( (Xi\u22121 + \u03bb\u2207F (Xi\u22121))>Ui ) 6: Xi \u2190 UiSiV >i # update the point at the manifold 7: end for 8: U,\u03a3, V > \u2190 SVD(XK) 9: W \u2190 U \u221a \u03a3 # compute word embeddings\n10: return W\nOptimization step size is chosen to be small enough to avoid huge gradient values.", 
        "156": "However, thorough choice of \u03bb does not result in a significant difference in performance (this parameter was tuned on the training data only, the exact values used in experiments are reported below).", 
        "157": "4.2 Evaluation  We evaluate word embeddings via the word similarity task.", 
        "158": "We use the following popular datasets for this purpose: \u201cwordsim-353\u201d ((Finkelstein et al., 2001); 3 datasets), \u201csimlex-999\u201d (Hill et al., 2016) and \u201cmen\u201d (Bruni et al., 2014).", 
        "159": "Original \u201cwordsim-353\u201d dataset is a mixture of the word pairs for both word similarity and word relatedness tasks.", 
        "160": "This dataset was split (Agirre et al., 2009) into two intersecting parts: \u201cwordsim-sim\u201d (\u201cws-sim\u201d in the tables) and \u201cwordsim-rel\u201d (\u201cwsrel\u201d in the tables) to separate the words from different tasks.", 
        "161": "In our experiments, we use both of them on a par with the full version of \u201cwordsim353\u201d (\u201cws-full\u201d in the tables).", 
        "162": "Each dataset contains word pairs together with assessor-assigned similarity scores for each pair.", 
        "163": "As a quality measure, we use Spearman\u2019s correlation between these human ratings and cosine similarities for each pair.", 
        "164": "We call this quality metric linguistic in our paper.", 
        "165": "5 Results of Experiments  First of all, we compare the value of SGNS objective obtained by the methods.", 
        "166": "The comparison is demonstrated in Table 1.", 
        "167": "We see that SGD-SGNS and SVD-SPPMI methods provide quite similar results, however, the proposed method obtains significantly better\nSGNS values, what proves the feasibility of using Riemannian optimization framework in SGNS optimization problem.", 
        "168": "It is interesting to note that SVD-SPPMI method, which does not optimize SGNS objective directly, obtains better results than SGD-SGNS method, which aims at optimizing SGNS.", 
        "169": "This fact additionally confirms the idea described in Section 2.2.2 that the independent optimization over parameters W and C may decrease the performance.", 
        "170": "However, the target performance measure of embedding models is the correlation between semantic similarity and human assessment (Section 4.2).", 
        "171": "Table 2 presents the comparison of the methods in terms of it.", 
        "172": "We see that our method outperforms the competitors on all datasets except for \u201cmen\u201d dataset where it obtains slightly worse results.", 
        "173": "Moreover, it is important that the higher dimension entails higher performance gain of our method in comparison to the competitors.", 
        "174": "To understand how our model improves or degrades the performance in comparison to the baseline, we found several words, whose neighbors in terms of cosine distance change significantly.", 
        "175": "Table 3 demonstrates neighbors of the words \u201cfive\u201d, \u201che\u201d and \u201cmain\u201d for both SVD-SPPMI and ROSGNS models.", 
        "176": "A neighbor is marked bold if we suppose that it has similar semantic meaning to the\nsource word.", 
        "177": "First of all, we notice that our model produces much better neighbors of the words describing digits or numbers (see word \u201cfive\u201d as an example).", 
        "178": "Similar situation happens for many other words, e.g.", 
        "179": "in case of \u201cmain\u201d \u2014 the nearest neighbors contain 4 similar words for our model instead of 2 in case of SVD-SPPMI.", 
        "180": "The neighbourhood of \u201che\u201d contains less semantically similar words in case of our model.", 
        "181": "However, it filters out irrelevant words, such as \u201cpromptly\u201d and \u201cdumbledore\u201d.", 
        "182": "Table 4 contains the nearest words to the word \u201cusa\u201d from 11th to 20th.", 
        "183": "We marked names of USA states bold and did not represent top-10 nearest words as they are exactly names of states for all three models.", 
        "184": "Some non-bold words are arguably relevant as they present large USA cities\n(\u201cakron\u201d, \u201cburbank\u201d, \u201cmadison\u201d) or geographical regions of several states (\u201cmidwest\u201d, \u201cnortheast\u201d, \u201csouthwest\u201d), but there are also some completely irrelevant words (\u201cuk\u201d, \u201ccities\u201d, \u201cplaces\u201d) presented by first two models.", 
        "185": "Our experiments show that the optimal number of iterations K in the optimization procedure and step size \u03bb depend on the particular value of d. For d = 100, we have K = 7, \u03bb = 5 \u00b7 10\u22125, for d = 200, we have K = 8, \u03bb = 5 \u00b7 10\u22125, and for d = 500, we have K = 2, \u03bb = 10\u22124.", 
        "186": "Moreover, the best results were obtained when SVD-SPPMI embeddings were used as an initialization of Riemannian optimization process.", 
        "187": "Figure 2 illustrates how the correlation between semantic similarity and human assessment scores changes through iterations of our method.", 
        "188": "Optimal value of K is the same for both whole testing set and its 10-fold subsets chosen for cross-validation.", 
        "189": "The idea to stop optimization procedure on some iteration is also discussed in (Lai et al., 2015).", 
        "190": "Training of the same dimensional models (d = 500) on English Wikipedia corpus using SGD-SGNS, SVD-SPPMI, RO-SGNS took 20 minutes, 10 minutes and 70 minutes respectively.", 
        "191": "Our method works slower, but not significantly.", 
        "192": "Moreover, since we were not focused on the code efficiency optimization, this time can be reduced.", 
        "193": "6 Related Work    6.1 Word Embeddings  Skip-Gram Negative Sampling was introduced in (Mikolov et al., 2013).", 
        "194": "The \u201cnegative sampling\u201d approach is thoroughly described in (Goldberg and Levy, 2014), and the learning method is explained in (Rong, 2014).", 
        "195": "There are several open-source implementations of SGNS neural network, which is widely known as \u201cword2vec\u201d.", 
        "196": "12\nAs shown in Section 2.2, Skip-Gram Negative Sampling optimization can be reformulated as a problem of searching for a low-rank matrix.", 
        "197": "In order to be able to use out-of-the-box SVD for this task, the authors of (Levy and Goldberg, 2014) used the surrogate version of SGNS as the objective function.", 
        "198": "There are two general assumptions made in their algorithm that distinguish it from the SGNS optimization:\n1.", 
        "199": "SVD optimizes Mean Squared Error (MSE) objective instead of SGNS loss function.", 
        "200": "2.", 
        "201": "In order to avoid infinite elements in SPMI matrix, it is transformed in ad-hoc manner (SPPMI matrix) before applying SVD.", 
        "202": "This makes the objective not interpretable in terms of the original task (3).", 
        "203": "As mentioned in (Levy and Goldberg, 2014), SGNS objective weighs different (w, c) pairs differently, unlike the SVD, which works with the same weight for all pairs and may entail the performance fall.", 
        "204": "The comprehensive explanation of the relation between SGNS and SVD-SPPMI methods is provided in (Keerthi et al., 2015).", 
        "205": "(Lai et al., 2015; Levy et al., 2015)\n1Original Google word2vec: https://code.", 
        "206": "google.com/archive/p/word2vec/\n2Gensim word2vec: https://radimrehurek.", 
        "207": "com/gensim/models/word2vec.html\ngive a good overview of highly practical methods to improve these word embedding models.", 
        "208": "6.2 Riemannian Optimization  An introduction to optimization over Riemannian manifolds can be found in (Udriste, 1994).", 
        "209": "The overview of retractions of high rank matrices to low-rank manifolds is provided in (Absil and Oseledets, 2015).", 
        "210": "The projector-splitting algorithm was introduced in (Lubich and Oseledets, 2014), and also was mentioned in (Absil and Oseledets, 2015) as \u201cLie-Trotter retraction\u201d.", 
        "211": "Riemannian optimization is succesfully applied to various data science problems: for example, matrix completion (Vandereycken, 2013), largescale recommender systems (Tan et al., 2014), and tensor completion (Kressner et al., 2014).", 
        "212": "7 Conclusions  In our paper, we proposed the general two-step scheme of training SGNS word embedding model and introduced the algorithm that performs the search of a solution in the low-rank form via Riemannian optimization framework.", 
        "213": "We also demonstrated the superiority of our method by providing experimental comparison to existing state-of-the-art approaches.", 
        "214": "Possible direction of future work is to apply more advanced optimization techniques to the Step 1 of the scheme proposed in Section 1 and to explore the Step 2 \u2014 obtaining embeddings with a given low-rank matrix.", 
        "215": "Acknowledgments  This research was supported by the Ministry of Education and Science of the Russian Federation (grant 14.756.31.0001)."
    }, 
    "document_id": "P17-1185.pdf.json"
}
