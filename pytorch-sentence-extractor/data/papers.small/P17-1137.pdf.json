{
    "abstract_sentences": {
        "1": "Fixed-vocabulary language models fail to account for one of the most characteristic statistical facts of natural language: the frequent creation and reuse of new word types.", 
        "2": "Although character-level language models offer a partial solution in that they can create word types not attested in the training corpus, they do not capture the \u201cbursty\u201d distribution of such words.", 
        "3": "In this paper, we augment a hierarchical LSTM language model that generates sequences of word tokens character by character with a caching mechanism that learns to reuse previously generated words.", 
        "4": "To validate our model we construct a new open-vocabulary language modeling corpus (the Multilingual Wikipedia Corpus; MWC) from comparable Wikipedia articles in 7 typologically diverse languages and demonstrate the effectiveness of our model across this range of languages."
    }, 
    "body_sentences": {
        "1": "  Proceedings of the 55th Annual Meeting of the Association for Computational Linguistics, pages 1492\u20131502 Vancouver, Canada, July 30 - August 4, 2017. c\u00a92017 Association for Computational Linguistics\nhttps://doi.org/10.18653/v1/P17-1137  1 Introduction  Language modeling is an important problem in natural language processing with many practical applications (translation, speech recognition, spelling autocorrection, etc.).", 
        "2": "Recent advances in neural networks provide strong representational power to language models with distributed representations and unbounded dependencies based on recurrent networks (RNNs).", 
        "3": "However, most language models operate by generating words by sampling from a closed vocabulary which is composed of the most frequent words in a corpus.", 
        "4": "Rare tokens are typically replaced by a special token, called the unknown word token, \u3008UNK\u3009.", 
        "5": "Although fixedvocabulary language models have some important practical applications and are appealing models\nfor study, they fail to capture two empirical facts about the distribution of words in natural languages.", 
        "6": "First, vocabularies keep growing as the number of documents in a corpus grows: new words are constantly being created (Heaps, 1978).", 
        "7": "Second, rare and newly created words often occur in \u201cbursts\u201d, i.e., once a new or rare word has been used once in a document, it is often repeated (Church and Gale, 1995; Church, 2000).", 
        "8": "The open-vocabulary problem can be solved by dispensing with word-level models in favor of models that predict sentences as sequences of characters (Sutskever et al., 2011; Chung et al., 2017).", 
        "9": "Character-based models are quite successful at learning what (new) word forms look like (e.g., they learn a language\u2019s orthographic conventions that tell us that sustinated is a plausible English word and bzoxqir is not) and, when based on models that learn long-range dependencies such as RNNs, they can also be good models of how words fit together to form sentences.", 
        "10": "However, existing character-sequence models have no explicit mechanism for modeling the fact that once a rare word is used, it is likely to be used again.", 
        "11": "In this paper, we propose an extension to character-level language models that enables them to reuse previously generated tokens (\u00a72).", 
        "12": "Our starting point is a hierarchical LSTM that has been previously used for modeling sentences (word by word) in a conversation (Sordoni et al., 2015), except here we model words (character by character) in a sentence.", 
        "13": "To this model, we add a caching mechanism similar to recent proposals for caching that have been advocated for closed-vocabulary models (Merity et al., 2017; Grave et al., 2017).", 
        "14": "As word tokens are generated, they are placed in an LRU cache, and, at each time step the model decides whether to copy a previously generated word from the cache or to generate it from scratch, character by character.", 
        "15": "The decision of whether\n1492\nto use the cache or not is a latent variable that is marginalised during learning and inference.", 
        "16": "In summary, our model has three properties: it creates new words, it accounts for their burstiness using a cache, and, being based on LSTM s over word representations, it can model long range dependencies.", 
        "17": "To evaluate our model, we perform ablation experiments with variants of our model without the cache or hierarchical structure.", 
        "18": "In addition to standard English data sets (PTB and WikiText-2), we introduce a new multilingual data set: the Multilingual Wikipedia Corpus (MWC), which is constructed from comparable articles from Wikipedia in 7 typologically diverse languages (\u00a73) and show the effectiveness of our model in all languages (\u00a74).", 
        "19": "By looking at the posterior probabilities of the generation mechanism (language model vs. cache) on held-out data, we find that the cache is used to generate \u201cbursty\u201d word types such as proper names, while numbers and generic content words are generated preferentially from the language model (\u00a75).", 
        "20": "2 Model  In this section, we describe our hierarchical character language model with a word cache.", 
        "21": "As is typical for RNN language models, our model uses the chain rule to decompose the problem into incremental predictions of the next word conditioned on the history:\np(w) =\n|w|\u220f\nt=1\np(wt | w<t).", 
        "22": "We make two modifications to the traditional RNN language model, which we describe in turn.", 
        "23": "First, we begin with a cache-less model we call the hierarchical character language model (HCLM; \u00a72.1) which generates words as a sequence of characters and constructs a \u201cword embedding\u201d by encoding a character sequence with an LSTM (Ling et al., 2015).", 
        "24": "However, like conventional closedvocabulary, word-based models, it is based on an LSTM that conditions on words represented by fixed-length vectors.1\nThe HCLM has no mechanism to reuse words that it has previously generated, so new forms will\n1The HCLM is an adaptation of the hierarchical recurrent encoder-decoder of Sordoni et al.", 
        "25": "(2015) which was used to model dialog as a sequence of actions sentences which are themselves sequences of words.", 
        "26": "The original model was proposed to compose words into query sequences but we use it to compose characters into word sequences.", 
        "27": "only be repeated with very low probability.", 
        "28": "However, since the HCLM is not merely generating sentences as a sequence of characters, but also segmenting them into words, we may add a wordbased cache to which we add words keyed by the hidden state being used to generate them (\u00a72.2).", 
        "29": "This cache mechanism is similar to the model proposed by Merity et al.", 
        "30": "(2017).", 
        "31": "Notation.", 
        "32": "Our model assigns probabilities to sequences of words w = w1, .", 
        "33": ".", 
        "34": ".", 
        "35": ", w|w|, where |w| is the length, and where each word wi is represented by a sequence of characters ci = ci,1, .", 
        "36": ".", 
        "37": ".", 
        "38": ", ci,|ci| of length |ci|.", 
        "39": "2.1 Hierarchical Character-level Language  Model (HCLM)\nThis hierarchical model satisfies our linguistic intuition that written language has (at least) two different units, characters and words.", 
        "40": "The HCLM consists of four components, three LSTMs (Hochreiter and Schmidhuber, 1997): a character encoder, a word-level context encoder, and a character decoder (denoted LSTMenc, LSTMctx, and LSTMdec, respectively), and a softmax output layer over the character vocabulary.", 
        "41": "Fig.", 
        "42": "1 illustrates an unrolled HCLM.", 
        "43": "Suppose the model reads word wt\u22121 and predicts the next word wt.", 
        "44": "First, the model reads the character sequence representing the word wt\u22121 = ct\u22121,1, .", 
        "45": ".", 
        "46": ".", 
        "47": ", ct\u22121,|ct\u22121| where |ct\u22121| is the length of the word generated at time t \u2212 1 in characters.", 
        "48": "Each character is represented as a vector vct\u22121,1 , .", 
        "49": ".", 
        "50": ".", 
        "51": ",vct\u22121,|ct\u22121| and fed into the encoder LSTMenc .", 
        "52": "The final hidden state of the encoder LSTMenc is used as the vector representation of the previously generated word wt\u22121,\nhenct = LSTMenc(vct\u22121,1 , .", 
        "53": ".", 
        "54": ".", 
        "55": ",vct\u22121,|ct|).", 
        "56": "Then all the vector representations of words (vw1 , .", 
        "57": ".", 
        "58": ".", 
        "59": ",vw|w|) are processed with a context LSTMctx .", 
        "60": "Each of the hidden states of the context LSTMctx are considered representations of the history of the word sequence.", 
        "61": "hctxt = LSTMctx(h enc 1 , .", 
        "62": ".", 
        "63": ".", 
        "64": ",h enc t )\nFinally, the initial state of the decoder LSTM is set to be hctxt and the decoder LSTM reads a vector representation of the start symbol v\u3008S\u3009 and generates the next word wt+1 character by character.", 
        "65": "To predict the j-th character in wt, the decoder\np(Poke\u0301mon) = \u03bbtplm(Poke\u0301mon) + (1\u2212 \u03bbt)pptr(Poke\u0301mon)\nLSTM reads vector representations of the previous characters in the word, conditioned on the context vector hctxt and a start symbol.", 
        "66": "hdect,j = LSTMdec(vct,1 , .", 
        "67": ".", 
        "68": ".", 
        "69": ",vct,j\u22121 ,h ctx t ,v\u3008S\u3009).", 
        "70": "The character generation probability is defined by a softmax layer for the corresponding hidden representation of the decoder LSTM .", 
        "71": "p(ct,j | w<t, ct,<j) = softmax(Wdechdect,j + bdec)\nThus, a word generation probability from HCLM is defined as follows.", 
        "72": "plm(wt | w<t) = |ct|\u220f\nj=1\np(ct,j | w<t, ct,<j)  2.2 Continuous cache component  The cache component is an external memory structure which store K elements of recent history.", 
        "73": "Similarly to the memory structure used in Grave et al.", 
        "74": "(2017), a word is added to a key-value memory after each generation of wt.", 
        "75": "The key at position i \u2208 [1,K] is ki and its value mi.", 
        "76": "The memory slot is chosen as follows: if the wt exists already in the memory, its key is updated (discussed below).", 
        "77": "Otherwise, if the memory is not full, an empty slot is chosen or the least recently used slot is overwritten.", 
        "78": "When writing a new word to memory, the key is the RNN representation that was used to generate\nthe word (ht) and the value is the word itself (wt).", 
        "79": "In the case when the word already exists in the cache at some position i, the ki is updated to be the arithmetic average of ht and the existing ki.", 
        "80": "To define the copy probability from the cache at time t, a distribution over copy sites is defined using the attention mechanism of Bahdanau et al.", 
        "81": "(2015).", 
        "82": "To do so, we construct a query vector (rt) from the RNN\u2019s current hidden state ht,\nrt = tanh(Wqht + bq),\nthen, for each element i of the cache, a \u2018copy score,\u2019 ui,t is computed,\nui,t = v T tanh(Wuki + rt).", 
        "83": "Finally, the probability of generating a word via the copying mechanism is:\npmem(i | ht) = softmaxi(ut) pptr(wt | ht) = pmem(i | ht)[mi = wt],\nwhere [mi = wt] is 1 if the ith value in memory is wt and 0 otherwise.", 
        "84": "Since pmem defines a distribution of slots in the cache, pptr translates it into word space.", 
        "85": "2.3 Character-level Neural Cache Language Model  The word probability p(wt | w<t) is defined as a mixture of the following two probabilities.", 
        "86": "The first\none is a language model probability, plm(wt | w<t) and the other is pointer probability , pptr(wt | w<t).", 
        "87": "The final probability p(wt | w<t) is\n\u03bbtplm(wt | w<t) + (1\u2212 \u03bbt)pptr(wt | w<t),\nwhere \u03bbt is computed by a multi-layer perceptron with two non-linear transformations using ht as its input, followed by a transformation by the logistic sigmoid function:\n\u03b3t = MLP(ht), \u03bbt = 1\n1\u2212 e\u2212\u03b3t .", 
        "88": "We remark that Grave et al.", 
        "89": "(2017) use a clever trick to estimate the probability, \u03bbt of drawing from the LM by augmenting their (closed) vocabulary with a special symbol indicating that a copy should be used.", 
        "90": "This enables word types that are highly predictive in context to compete with the probability of a copy event.", 
        "91": "However, since we are working with an open vocabulary, this strategy is unavailable in our model, so we use the MLP formulation.", 
        "92": "2.4 Training objective  The model parameters as well as the character projection parameters are jointly trained by maximizing the following log likelihood of the observed characters in the training corpus,\nL = \u2212 \u2211 log p(wt | w<t).", 
        "93": "3 Datasets  We evaluate our model on a range of datasets, employing preexisting benchmarks for comparison to previous published results, and a new multilingual corpus which specifically tests our model\u2019s performance across a range of typological settings.", 
        "94": "3.1 Penn Tree Bank (PTB)  We evaluate our model on the Penn Tree Bank.", 
        "95": "For fair comparison with previous works, we followed the standard preprocessing method used by Mikolov et al.", 
        "96": "(2010).", 
        "97": "In the standard preprocessing, tokenization is applied, words are lowercased, and punctuation is removed.", 
        "98": "Also, less frequent words are replaced by unknown an token (UNK),2 constraining the word vocabulary size to be 10k.", 
        "99": "Because of this preprocessing, we do not expect this dataset to benefit from the modeling innovations we have introduced in the paper.", 
        "100": "Fig.1 summarizes the corpus statistics.", 
        "101": "2When the unknown token is used in character-level model, it is treated as if it were a normal word (i.e.", 
        "102": "UNK is the  3.2 WikiText-2  Merity et al.", 
        "103": "(2017) proposed the WikiText-2 Corpus as a new benchmark dataset.3 They pointed out that the preprocessed PTB is unrealistic for real language use in terms of word distribution.", 
        "104": "Since the vocabulary size is fixed to 10k, the word frequency does not exhibit a long tail.", 
        "105": "The wikiText-2 corpus is constructed from 720 articles.", 
        "106": "They provided two versions.", 
        "107": "The version for word level language modeling was preprocessed by discarding infrequent words.", 
        "108": "But, for character-level models, they provided raw documents without any removal of word or character types or lowercasing, but with tokenization.", 
        "109": "We make one change to this corpus: since Wikipedia articles make extensive use of characters from other languages; we replaced character types that occur fewer than 25 times were replaced with a dummy character (this plays the role of the \u3008UNK\u3009 token in the character vocabulary).", 
        "110": "Tab.", 
        "111": "2 summarizes the corpus statistics.", 
        "112": "3.3 Multilingual Wikipedia Corpus (MWC)  Languages differ in what word formation processes they have.", 
        "113": "For character-level modeling it is therefore interesting to compare a model\u2019s performance\nsequence U, N, and K).", 
        "114": "This is somewhat surprising modeling choice, but it has become conventional (Chung et al., 2017).", 
        "115": "3http://metamind.io/research/thewikitext-long-term-dependency-languagemodeling-dataset/\nacross languages.", 
        "116": "Since there is at present no standard multilingual language modeling dataset, we created a new dataset, the Multilingual Wikipedia Corpus (MWC), a corpus of the same Wikipedia articles in 7 languages which manifest a range of morphological typologies.", 
        "117": "The MWC contains English (EN), French (FR), Spanish (ES), German (DE), Russian (RU), Czech (CS), and Finnish (FI).", 
        "118": "To attempt to control for topic divergences across languages, every language\u2019s data consists of the same articles.", 
        "119": "Although these are only comparable (rather than true translations), this ensures that the corpus has a stable topic profile across languages.4\nConstruction & Preprocessing We constructed the MWC similarly to the WikiText-2 corpus.", 
        "120": "Articles were selected from Wikipedia in the 7 target languages.", 
        "121": "To keep the topic distribution to be approximately the same across the corpora, we extracted articles about entities which explained in all the languages.", 
        "122": "We extracted articles which exist in all languages and each consist of more than 1,000 words, for a total of 797 articles.", 
        "123": "These crosslingual articles are, of course, not usually translations, but they tend to be comparable.", 
        "124": "This filtering ensures that the topic profile in each language is similar.", 
        "125": "Each language corpus is approximately the same size as the WikiText-2 corpus.", 
        "126": "Wikipedia markup was removed with WikiExtractor,5 to obtain plain text.", 
        "127": "We used the same thresholds to remove rare characters in the WikiText-2 corpus.", 
        "128": "No tokenization or other normalization (e.g., lowercasing) was done.", 
        "129": "Statistics After the preprocessing described above, we randomly sampled 360 articles.", 
        "130": "The articles are split into 300, 30, 30 sets and the first 300 articles are used for training and the rest are used for dev and test respectively.", 
        "131": "Table 3 summarizes the corpus statistics.", 
        "132": "Additionally, we show in Fig.", 
        "133": "2 the distribution of frequencies of OOV word types (relative to the training set) in the dev+test portions of the corpus, which shows a power-law distribution, which is expected for the burstiness of rare words found in prior work.", 
        "134": "Curves look similar for all languages (see Appendix A).", 
        "135": "4The Multilingual Wikipedia Corpus (MWC) is available for download from http://k-kawakami.com/ research/mwc\n5https://github.com/attardi/ wikiextractor  4 Experiments  We now turn to a series of experiments to show the value of our hierarchical character-level cache language model.", 
        "136": "For each dataset we trained the model with LSTM units.", 
        "137": "To compare our results with a strong baseline, we also train a model without the cache.", 
        "138": "Model Configuration For HCLM and HCLM with cache models, We used 600 dimensions for the character embeddings and the LSTMs have 600 hidden units for all the experiments.", 
        "139": "This keeps the model complexity to be approximately the same as previous works which used an LSTM with 1000 dimension.", 
        "140": "Our baseline LSTM have 1000 dimensions for embeddings and reccurence weights.", 
        "141": "For the cache model, we used cache size 100 in every experiment.", 
        "142": "All the parameters including character projection parameters are randomly sampled from uniform distribution from \u22120.08 to 0.08.", 
        "143": "The initial hidden and memory state of LSTMenc and LSTMctx are initialized with zero.", 
        "144": "Mini-batches of size 25 are used for PTB experiments and 10 for WikiText-2, due to memory limitations.", 
        "145": "The sequences were truncated with 35 words.", 
        "146": "Then the words are decomposed to characters and fed into the model.", 
        "147": "A Dropout rate of 0.5 was used for all but the recurrent connections.", 
        "148": "Learning The models were trained with the Adam update rule (Kingma and Ba, 2015) with a learning rate of 0.002.", 
        "149": "The maximum norm of the gradients was clipped at 10.", 
        "150": "Evaluation We evaluated our models with bitsper-character (bpc) a standard evaluation metric\nfor character-level language models.", 
        "151": "Following the definition in Graves (2013), bits-per-character is the average value of \u2212 log2 p(wt | w<t) over the whole test set,\nbpc = \u2212 1|c| log2 p(w),\nwhere |c| is the length of the corpus in characters.", 
        "152": "4.1 Results  PTB Tab.", 
        "153": "4 summarizes results on the PTB dataset.6 Our baseline HCLM model achieved 1.276 bpc which is better performance than the LSTM with Zoneout regularization (Krueger et al., 2017).", 
        "154": "And HCLM with cache outperformed the baseline model with 1.247 bpc and achieved competitive results with state-of-the-art models with regularization on recurrence weights, which was not used in our experiments.", 
        "155": "Expressed in terms of per-word perplexity (i.e., rather than normalizing by the length of the corpus in characters, we normalize by words and exponentiate), the test perplexity on HCLM with cache is 94.79.", 
        "156": "The performance of the unregularized 2-layer LSTM with 1000 hidden units on wordlevel PTB dataset is 114.5 and the same model with dropout achieved 87.0.", 
        "157": "Considering the fact that our character-level models are dealing with an open vocabulary without unknown tokens, the results are promising.", 
        "158": "WikiText-2 Tab.", 
        "159": "5 summarizes results on the WikiText-2 dataset.", 
        "160": "Our baseline, LSTM achieved 1.803 bpc and HCLM model achieved 1.670 bpc.", 
        "161": "The HCLM with cache outperformed the baseline models and achieved 1.500 bpc.", 
        "162": "The word level perplexity is 227.30, which is quite high compared to the reported word level baseline result 100.9\n6Models designated with a * have more layers and more parameters.", 
        "163": "with LSTM with ZoneOut and Variational Dropout regularization (Merity et al., 2017).", 
        "164": "However, the character-level model is dealing with 76,136 types in training set and 5.87% OOV rate where the word level models only use 33,278 types without OOV in test set.", 
        "165": "The improvement rate over the HCLM baseline is 10.2% which is much higher than the improvement rate obtained in the PTB experiment.", 
        "166": "Multilingual Wikipedia Corpus (MWC) Tab.", 
        "167": "6 summarizes results on the MWC dataset.", 
        "168": "Similarly to WikiText-2 experiments, LSTM\nis strong baseline.", 
        "169": "We observe that the cache mechanism improve performance in every languages.", 
        "170": "In English, HCLM with cache achieved 1.538 bpc where the baseline is 1.622 bpc.", 
        "171": "It is 5.2% improvement.", 
        "172": "For other languages, the improvement rates were 2.7%, 3.2%, 3.7%, 2.5%, 4.7%, 2.7% in FR, DE, ES, CS, FI, RU respectively.", 
        "173": "The best improvement rate was obtained in Finnish.", 
        "174": "5 Analysis  In this section, we analyse the behavior of proposed model qualitatively.", 
        "175": "To analyse the model, we compute the following posterior probability which tell whether the model used the cache given a word and its preceding context.", 
        "176": "Let zt be a random variable that says whether to use the cache or the LM to generate the word at time t. We would like to know, given the text w, whether the cache was used at time t. This can be computed as follows:\np(zt | w) = p(zt, wt | ht, cachet) p(wt | ht, cachet)\n= (1\u2212 \u03bbt)pptr(wt | ht, cachet)\np(wt | ht, cachet) ,\nwhere cachet is the state of the cache at time t. We report the average posterior probability of cache generation excluding the first occurrence of w, p(z | w).", 
        "177": "Tab.", 
        "178": "7 shows the words in the WikiText-2 test set that occur more than 1 time that are most/least likely to be generated from cache and character language model (words that occur only one time cannot be cache-generated).", 
        "179": "We see that the model uses the cache for proper nouns: Lesnar, Gore, etc., as well as very frequent words which always stored somewhere in the cache such as single-token punctuation, the, and of.", 
        "180": "In contrast, the model uses the language model to generate numbers (which tend not to be repeated): 300, 770 and basic content words: sounds, however, unable, etc.", 
        "181": "This pattern is similar to the pattern found in empirical distribution of frequencies of rare words observed in prior wors (Church and Gale, 1995; Church, 2000), which suggests our model is learning to use the cache to account for bursts of rare words.", 
        "182": "To look more closely at rare words, we also investigate how the model handles words that occurred between 2 and 100 times in the test set, but fewer than 5 times in the training set.", 
        "183": "Fig.", 
        "184": "3 is a scatter plot of p(z | w) vs the empirical frequency\nin the test set.", 
        "185": "As expected, more frequently repeated words types are increasingly likely to be drawn from the cache, but less frequent words show a range of cache generation probabilities.", 
        "186": "Tab.", 
        "187": "8 shows word types with the highest and lowest average p(z | w) that occur fewer than 5 times in the training corpus.", 
        "188": "The pattern here is similar to the unfiltered list: proper nouns are extremely likely to have been cache-generated, whereas numbers and generic (albeit infrequent) content words are less likely to have been.", 
        "189": "6 Discussion  Our results show that the HCLM outperforms a basic LSTM.", 
        "190": "With the addition of the caching mechanism, the HCLM becomes consistently more powerful than both the baseline HCLM and the LSTM.", 
        "191": "This is true even on the PTB, which has no rare or OOV words in its test set (because of preprocessing), by caching repetitive common words such as the.", 
        "192": "In true open-vocabulary settings (i.e., WikiText-2 and MWC), the improvements are much more pronounced, as expected.", 
        "193": "Computational complexity.", 
        "194": "In comparison with word-level models, our model has to read and generate each word character by character, and it also requires a softmax over the entire memory at every time step.", 
        "195": "However, the computation is still linear in terms of the length of the sequence, and the softmax over the memory cells and character\nvocabulary are much smaller than word-level vocabulary.", 
        "196": "On the other hand, since the recurrent states are updated once per character (rather than per word) in our model, the distribution of operations is quite different.", 
        "197": "Depending on the hardware support for these operations (repeated updates of recurrent states vs. softmaxes), our model may be faster or slower.", 
        "198": "However, our model will have fewer parameters than a word-based model since most of the parameters in such models live in the word projection layers, and we use LSTMs in place of these.", 
        "199": "Non-English languages.", 
        "200": "For non-English languages, the pattern is largely similar for nonEnglish languages.", 
        "201": "This is not surprising since morphological processes may generate forms that are related to existing forms, but these still have\nslight variations.", 
        "202": "Thus, they must be generated by the language model component (rather than from the cache).", 
        "203": "Still, the cache demonstrates consistent value in these languages.", 
        "204": "Finally, our analysis of the cache on English does show that it is being used to model word reuse, particularly of proper names, but also of frequent words.", 
        "205": "While empirical analysis of rare word distributions predicts that names would be reused, the fact that cache is used to model frequent words suggests that effective models of language should have a means to generate common words as units.", 
        "206": "Finally, our model disfavors copying numbers from the cache, even when they are available.", 
        "207": "This suggests that it has learnt that numbers are not generally repeated (in contrast to names).", 
        "208": "7 Related Work  Caching language models were proposed to account for burstiness by Kuhn and De Mori (1990), and recently, this idea has been incorporated to augment neural language models with a caching mechanism (Merity et al., 2017; Grave et al., 2017).", 
        "209": "Open vocabulary neural language models have been widely explored (Sutskever et al., 2011; Mikolov et al., 2012; Graves, 2013, inter alia).", 
        "210": "Attempts to make them more aware of word-level dynamics, using models similar to our hierarchical formulation, have also been proposed (Chung et al., 2017).", 
        "211": "The only models that are open vocabulary language modeling together with a caching mechanism are the nonparametric Bayesian language models based on hierarchical Pitman\u2013Yor processes which generate a lexicon of word types using a character model, and then generate a text using these (Teh, 2006; Goldwater et al., 2009; Chahuneau et al., 2013).", 
        "212": "These, however, do not use distributed representations on RNNs to capture long-range dependencies.", 
        "213": "8 Conclusion  In this paper, we proposed a character-level language model with an adaptive cache which selectively assign word probability from past history or character-level decoding.", 
        "214": "And we empirically show that our model efficiently model the word sequences and achieved better perplexity in every standard dataset.", 
        "215": "To further validate the performance of our model on different languages, we collected multilingual wikipedia corpus for 7 typologically diverse languages.", 
        "216": "We also show that our model performs better than character-level models by modeling burstiness of words in local context.", 
        "217": "The model proposed in this paper assumes the observation of word segmentation.", 
        "218": "Thus, the model is not directly applicable to languages, such as Chinese and Japanese, where word segments are not explicitly observable.", 
        "219": "We will investigate a model which can marginalise word segmentation as latent variables in the future work.", 
        "220": "Acknowledgements  We thank the three anonymous reviewers for their valuable feedback.", 
        "221": "The third author acknowledges the support of the EPSRC and nvidia Corporation.", 
        "222": "A Corpus Statistics  Fig.", 
        "223": "4 show distribution of frequencies of OOV word types in 6 languages."
    }, 
    "document_id": "P17-1137.pdf.json"
}
