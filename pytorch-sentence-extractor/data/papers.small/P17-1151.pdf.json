{
    "abstract_sentences": {
        "1": "Word embeddings provide point representations of words containing useful semantic information.", 
        "2": "We introduce multimodal word distributions formed from Gaussian mixtures, for multiple word meanings, entailment, and rich uncertainty information.", 
        "3": "To learn these distributions, we propose an energy-based max-margin objective.", 
        "4": "We show that the resulting approach captures uniquely expressive semantic information, and outperforms alternatives, such as word2vec skip-grams, and Gaussian embeddings, on benchmark datasets such as word similarity and entailment."
    }, 
    "body_sentences": {
        "1": "  Proceedings of the 55th Annual Meeting of the Association for Computational Linguistics, pages 1645\u20131656 Vancouver, Canada, July 30 - August 4, 2017. c\u00a92017 Association for Computational Linguistics\nhttps://doi.org/10.18653/v1/P17-1151  1 Introduction  To model language, we must represent words.", 
        "2": "We can imagine representing every word with a binary one-hot vector corresponding to a dictionary position.", 
        "3": "But such a representation contains no valuable semantic information: distances between word vectors represent only differences in alphabetic ordering.", 
        "4": "Modern approaches, by contrast, learn to map words with similar meanings to nearby points in a vector space (Mikolov et al., 2013a), from large datasets such as Wikipedia.", 
        "5": "These learned word embeddings have become ubiquitous in predictive tasks.", 
        "6": "Vilnis and McCallum (2014) recently proposed an alternative view, where words are represented by a whole probability distribution instead of a deterministic point vector.", 
        "7": "Specifically, they model each word by a Gaussian distribution, and learn its mean and covariance matrix from data.", 
        "8": "This approach generalizes any deterministic point embedding, which can be fully captured by the mean vector of the Gaussian distribution.", 
        "9": "Moreover, the full distribution provides much richer information\nthan point estimates for characterizing words, representing probability mass and uncertainty across a set of semantics.", 
        "10": "However, since a Gaussian distribution can have only one mode, the learned uncertainty in this representation can be overly diffuse for words with multiple distinct meanings (polysemies), in order for the model to assign some density to any plausible semantics (Vilnis and McCallum, 2014).", 
        "11": "Moreover, the mean of the Gaussian can be pulled in many opposing directions, leading to a biased distribution that centers its mass mostly around one meaning while leaving the others not well represented.", 
        "12": "In this paper, we propose to represent each word with an expressive multimodal distribution, for multiple distinct meanings, entailment, heavy tailed uncertainty, and enhanced interpretability.", 
        "13": "For example, one mode of the word \u2018bank\u2019 could overlap with distributions for words such as \u2018finance\u2019 and \u2018money\u2019, and another mode could overlap with the distributions for \u2018river\u2019 and \u2018creek\u2019.", 
        "14": "It is our contention that such flexibility is critical for both qualitatively learning about the meanings of words, and for optimal performance on many predictive tasks.", 
        "15": "In particular, we model each word with a mixture of Gaussians (Section 3.1).", 
        "16": "We learn all the parameters of this mixture model using a maximum margin energy-based ranking objective (Joachims, 2002; Vilnis and McCallum, 2014) (Section 3.3), where the energy function describes the affinity between a pair of words.", 
        "17": "For analytic tractability with Gaussian mixtures, we use the inner product between probability distributions in a Hilbert space, known as the expected likelihood kernel (Jebara et al., 2004), as our energy function (Section 3.4).", 
        "18": "Additionally, we propose transformations for numerical stability and initialization A.2, resulting in a robust, straightforward, and\n1645\nscalable learning procedure, capable of training on a corpus with billions of words in days.", 
        "19": "We show that the model is able to automatically discover multiple meanings for words (Section 4.3), and significantly outperform other alternative methods across several tasks such as word similarity and entailment (Section 4.4, 4.5, 4.7).", 
        "20": "We have made code available at http://github.com/ benathi/word2gm, where we implement our model in Tensorflow (Abadi et.", 
        "21": "al, 2015).", 
        "22": "2 Related Work  In the past decade, there has been an explosion of interest in word vector representations.", 
        "23": "word2vec, arguably the most popular word embedding, uses continuous bag of words and skipgram models, in conjunction with negative sampling for efficient conditional probability estimation (Mikolov et al., 2013a,b).", 
        "24": "Other popular approaches use feedforward (Bengio et al., 2003) and recurrent neural network language models (Mikolov et al., 2010, 2011b; Collobert and Weston, 2008) to predict missing words in sentences, producing hidden layers that can act as word embeddings that encode semantic information.", 
        "25": "They employ conditional probability estimation techniques, including hierarchical softmax (Mikolov et al., 2011a; Mnih and Hinton, 2008; Morin and Bengio, 2005) and noise contrastive estimation (Gutmann and Hyva\u0308rinen, 2012).", 
        "26": "A different approach to learning word embeddings is through factorization of word cooccurrence matrices such as GloVe embeddings (Pennington et al., 2014).", 
        "27": "The matrix factorization approach has been shown to have an implicit connection with skip-gram and negative sampling Levy and Goldberg (2014).", 
        "28": "Bayesian matrix factorization where row and columns are modeled as Gaussians has been explored in Salakhutdinov and Mnih (2008) and provides a different probabilistic perspective of word embeddings.", 
        "29": "In exciting recent work, Vilnis and McCallum (2014) propose a Gaussian distribution to model each word.", 
        "30": "Their approach is significantly more expressive than typical point embeddings, with the ability to represent concepts such as entailment, by having the distribution for one word (e.g.", 
        "31": "\u2018music\u2019) encompass the distributions for sets of related words (\u2018jazz\u2019 and \u2018pop\u2019).", 
        "32": "However, with a unimodal distribution, their approach cannot capture multiple distinct meanings, much like most deter-\nministic approaches.", 
        "33": "Recent work has also proposed deterministic embeddings that can capture polysemies, for example through a cluster centroid of context vectors (Huang et al., 2012), or an adapted skip-gram model with an EM algorithm to learn multiple latent representations per word (Tian et al., 2014).", 
        "34": "Neelakantan et al.", 
        "35": "(2014) also extends skip-gram with multiple prototype embeddings where the number of senses per word is determined by a non-parametric approach.", 
        "36": "Liu et al.", 
        "37": "(2015) learns topical embeddings based on latent topic models where each word is associated with multiple topics.", 
        "38": "Another related work by Nalisnick and Ravi (2015) models embeddings in infinite-dimensional space where each embedding can gradually represent incremental word sense if complex meanings are observed.", 
        "39": "Probabilistic word embeddings have only recently begun to be explored, and have so far shown great promise.", 
        "40": "In this paper, we propose, to the best of our knowledge, the first probabilistic word embedding that can capture multiple meanings.", 
        "41": "We use a Gaussian mixture model which allows for a highly expressive distributions over words.", 
        "42": "At the same time, we retain scalability and analytic tractability with an expected likelihood kernel energy function for training.", 
        "43": "The model and training procedure harmonize to learn descriptive representations of words, with superior performance on several benchmarks.", 
        "44": "3 Methodology  In this section, we introduce our Gaussian mixture (GM) model for word representations, and present a training method to learn the parameters of the Gaussian mixture.", 
        "45": "This method uses an energy-based maximum margin objective, where we wish to maximize the similarity of distributions of nearby words in sentences.", 
        "46": "We propose an energy function that compliments the GM model by retaining analytic tractability.", 
        "47": "We also provide critical practical details for numerical stability and initialization.", 
        "48": "The code for model training and evaluation is available at http://github.", 
        "49": "com/benathi/word2gm.", 
        "50": "3.1 Word Representation  We represent each word w in a dictionary as a Gaussian mixture with K components.", 
        "51": "Specifically, the distribution of w, fw, is given by the\ndensity\nfw(~x) =\nK\u2211\ni=1\npw,i N [~x; ~\u00b5w,i,\u03a3w,i] (1)\n= K\u2211\ni=1\npw,i\u221a 2\u03c0|\u03a3w,i| e\u2212 1 2 (~x\u2212~\u00b5w,i)>\u03a3\u22121w,i(~x\u2212~\u00b5w,i) ,\nwhere \u2211K\ni=1 pw,i = 1.", 
        "52": "The mean vectors ~\u00b5w,i represent the location of the ith component of word w, and are akin to the point embeddings provided by popular approaches like word2vec.", 
        "53": "pw,i represents the component probability (mixture weight), and \u03a3w,i is the component covariance matrix, containing uncertainty information.", 
        "54": "Our goal is to learn all of the model parameters ~\u00b5w,i, pw,i,\u03a3w,i from a corpus of natural sentences to extract semantic information of words.", 
        "55": "Each Gaussian component\u2019s mean vector of word w can represent one of the word\u2019s distinct meanings.", 
        "56": "For instance, one component of a polysemous word such as \u2018rock\u2019 should represent the meaning related to \u2018stone\u2019 or \u2018pebbles\u2019, whereas another component should represent the meaning related to music such as \u2018jazz\u2019 or \u2018pop\u2019.", 
        "57": "Figure 1 illustrates our word embedding model, and the difference between multimodal and unimodal representations, for words with multiple meanings.", 
        "58": "3.2 Skip-Gram  The training objective for learning \u03b8 = {~\u00b5w,i, pw,i,\u03a3w,i} draws inspiration from the continuous skip-gram model (Mikolov et al., 2013a), where word embeddings are trained to maximize the probability of observing a word given another nearby word.", 
        "59": "This procedure follows the distributional hypothesis that words occurring in natural contexts tend to be semantically related.", 
        "60": "For instance, the words \u2018jazz\u2019 and \u2018music\u2019 tend to occur near one another more often than \u2018jazz\u2019 and \u2018cat\u2019; hence, \u2018jazz\u2019 and \u2018music\u2019 are more likely to be related.", 
        "61": "The learned word representation contains useful semantic information and can be used to perform a variety of NLP tasks such as word similarity analysis, sentiment classification, modelling word analogies, or as a preprocessed input for complex system such as statistical machine translation.", 
        "62": "3.3 Energy-based Max-Margin Objective  Each sample in the objective consists of two pairs of words, (w, c) and (w, c\u2032).", 
        "63": "w is sampled from a sentence in a corpus and c is a nearby word within a context window of length `.", 
        "64": "For instance, a word w = \u2018jazz\u2019 which occurs in the sentence \u2018I listen to jazz music\u2019 has context words (\u2018I\u2019, \u2018listen\u2019, \u2018to\u2019 , \u2018music\u2019).", 
        "65": "c\u2032 is a negative context word (e.g.", 
        "66": "\u2018airplane\u2019) obtained from random sampling.", 
        "67": "The objective is to maximize the energy between words that occur near each other, w and c, and minimize the energy between w and its negative context c\u2032.", 
        "68": "This approach is similar to neg-\native sampling (Mikolov et al., 2013a,b), which contrasts the dot product between positive context pairs with negative context pairs.", 
        "69": "The energy function is a measure of similarity between distributions and will be discussed in Section 3.4.", 
        "70": "We use a max-margin ranking objective (Joachims, 2002), used for Gaussian embeddings in Vilnis and McCallum (2014), which pushes the similarity of a word and its positive context higher than that of its negative context by a margin m:\nL\u03b8(w, c, c \u2032) = max(0,\nm\u2212 logE\u03b8(w, c) + logE\u03b8(w, c\u2032))\nThis objective can be minimized by mini-batch stochastic gradient descent with respect to the parameters \u03b8 = {~\u00b5w,i, pw,i,\u03a3w,i} \u2013 the mean vectors, covariance matrices, and mixture weights \u2013 of our multimodal embedding in Eq.", 
        "71": "(1).", 
        "72": "Word Sampling We use a word sampling scheme similar to the implementation in word2vec (Mikolov et al., 2013a,b) to balance the importance of frequent words and rare words.", 
        "73": "Frequent words such as \u2018the\u2019, \u2018a\u2019, \u2018to\u2019 are not as meaningful as relatively less frequent words such as \u2018dog\u2019, \u2018love\u2019, \u2018rock\u2019, and we are often more interested in learning the semantics of the less frequently observed words.", 
        "74": "We use subsampling to improve the performance of learning word vectors (Mikolov et al., 2013b).", 
        "75": "This technique discards word wi with probability P (wi) = 1 \u2212 \u221a t/f(wi), where f(wi) is the frequency of word wi in the training corpus and t is a frequency threshold.", 
        "76": "To generate negative context words, each word type wi is sampled according to a distribution Pn(wi) \u221d U(wi)3/4 which is a distorted version of the unigram distribution U(wi) that also serves to diminish the relative importance of frequent words.", 
        "77": "Both subsampling and the negative distribution choice are proven effective in word2vec training (Mikolov et al., 2013b).", 
        "78": "3.4 Energy Function  For vector representations of words, a usual choice for similarity measure (energy function) is a dot product between two vectors.", 
        "79": "Our word representations are distributions instead of point vectors and therefore need a measure that reflects not only the point similarity, but also the uncertainty.", 
        "80": "We propose to use the expected likelihood kernel,\nwhich is a generalization of an inner product between vectors to an inner product between distributions (Jebara et al., 2004).", 
        "81": "That is,\nE(f, g) = \u222b f(x)g(x) dx = \u3008f, g\u3009L2\nwhere \u3008\u00b7, \u00b7\u3009L2 denotes the inner product in Hilbert space L2.", 
        "82": "We choose this form of energy since it can be evaluated in a closed form given our choice of probabilistic embedding in Eq.", 
        "83": "(1).", 
        "84": "For Gaussian mixtures f, g representing the words wf , wg, f(x) = \u2211K i=1 piN (x; ~\u00b5f,i,\u03a3f,i)\nand g(x) = \u2211K i=1 qiN (x; ~\u00b5g,i,\u03a3g,i), \u2211K i=1 pi =\n1, and \u2211K\ni=1 qi = 1, we find (see Section A.1) the log energy is\nlogE\u03b8(f, g) = log K\u2211\nj=1\nK\u2211\ni=1\npiqje \u03bei,j (2)\nwhere\n\u03bei,j \u2261 logN (0; ~\u00b5f,i \u2212 ~\u00b5g,j ,\u03a3f,i + \u03a3g,j)\n= \u22121 2 log det(\u03a3f,i + \u03a3g,j)\u2212 D 2 log(2\u03c0)\n\u22121 2 (~\u00b5f,i \u2212 ~\u00b5g,j)>(\u03a3f,i + \u03a3g,j)\u22121(~\u00b5f,i \u2212 ~\u00b5g,j) (3)\nWe call the term \u03bei,j partial (log) energy.", 
        "85": "Observe that this term captures the similarity between the ith meaning of word wf and the jth meaning of word wg.", 
        "86": "The total energy in Equation 2 is the sum of possible pairs of partial energies, weighted accordingly by the mixture probabilities pi and qj .", 
        "87": "The term\u2212(~\u00b5f,i\u2212~\u00b5g,j)>(\u03a3f,i+\u03a3g,j)\u22121(~\u00b5f,i\u2212 ~\u00b5g,j) in \u03bei,j explains the difference in mean vectors of semantic pair (wf , i) and (wg, j).", 
        "88": "If the semantic uncertainty (covariance) for both pairs are low, this term has more importance relative to other terms due to the inverse covariance scaling.", 
        "89": "We observe that the loss function L\u03b8 in Section 3.3 attains a low value when E\u03b8(w, c) is relatively high.", 
        "90": "High values of E\u03b8(w, c) can be achieved when the component means across different words ~\u00b5f,i and ~\u00b5g,j are close together (e.g., similar point representations).", 
        "91": "High energy can also be achieved by large values of \u03a3f,i and \u03a3g,j , which washes out the importance of the mean vector difference.", 
        "92": "The term\u2212 log det(\u03a3f,i+\u03a3g,j) serves as a regularizer that prevents the covariances from being pushed too high at the expense of learning a good mean embedding.", 
        "93": "At the beginning of training, \u03bei,j roughly are on the same scale among all pairs (i, j)\u2019s.", 
        "94": "During this time, all components learn the signals from the word occurrences equally.", 
        "95": "As training progresses and the semantic representation of each mixture becomes more clear, there can be one term of \u03bei,j\u2019s that is predominantly higher than other terms, giving rise to a semantic pair that is most related.", 
        "96": "The negative KL divergence is another sensible choice of energy function, providing an asymmetric metric between word distributions.", 
        "97": "However, unlike the expected likelihood kernel, KL divergence does not have a closed form if the two distributions are Gaussian mixtures.", 
        "98": "4 Experiments  We have introduced a model for multi-prototype embeddings, which expressively captures word meanings with whole probability distributions.", 
        "99": "We show that our combination of energy and objective functions, proposed in Section 3, enables one to learn interpretable multimodal distributions through unsupervised training, for describing words with multiple distinct meanings.", 
        "100": "By representing multiple distinct meanings, our model also reduces the unnecessarily large variance of a Gaussian embedding model, and has improved results on word entailment tasks.", 
        "101": "To learn the parameters of the proposed mixture model, we train on a concatenation of two datasets: UKWAC (2.5 billion tokens) and Wackypedia (1 billion tokens) (Baroni et al., 2009).", 
        "102": "We discard words that occur fewer than 100 times in the corpus, which results in a vocabulary size of 314, 129 words.", 
        "103": "Our word sampling scheme, described at the end of Section 4.3, is similar to that of word2vec with one negative context word for each positive context word.", 
        "104": "After training, we obtain learned parameters {~\u00b5w,i,\u03a3w,i, pi}Ki=1 for each word w. We treat the mean vector ~\u00b5w,i as the embedding of the ith mixture component with the covariance matrix \u03a3w,i representing its subtlety and uncertainty.", 
        "105": "We perform qualitative evaluation to show that our embeddings learn meaningful multi-prototype representations and compare to existing models using a quantitative evaluation on word similarity datasets and word entailment.", 
        "106": "We name our model as Word to Gaussian Mixture (w2gm) in constrast to Word to Gaussian (w2g) (Vilnis and McCallum, 2014).", 
        "107": "Unless\nstated otherwise, w2g refers to our implementation of w2gm model with one mixture component.", 
        "108": "4.1 Hyperparameters  Unless stated otherwise, we experiment with K = 2 components for the w2gm model, but we have results and discussion of K = 3 at the end of section 4.3.", 
        "109": "We primarily consider the spherical case for computational efficiency.", 
        "110": "We note that for diagonal or spherical covariances, the energy can be computed very efficiently since the matrix inversion would simply require O(d) computation instead of O(d3) for a full matrix.", 
        "111": "Empirically, we have found diagonal covariance matrices become roughly spherical after training.", 
        "112": "Indeed, for these relatively high dimensional embeddings, there are sufficient degrees of freedom for the mean vectors to be learned such that the covariance matrices need not be asymmetric.", 
        "113": "Therefore, we perform all evaluations with spherical covariance models.", 
        "114": "Models used for evaluation have dimension D = 50 and use context window ` = 10 unless stated otherwise.", 
        "115": "We provide additional hyperparameters and training details in the supplementary material (A.2).", 
        "116": "4.2 Similarity Measures  Since our word embeddings contain multiple vectors and uncertainty parameters per word, we use the following measures that generalizes similarity scores.", 
        "117": "These measures pick out the component pair with maximum similarity and therefore determine the meanings that are most relevant.", 
        "118": "4.2.1 Expected Likelihood Kernel  A natural choice for a similarity score is the expected likelihood kernel, an inner product between distributions, which we discussed in Section 3.4.", 
        "119": "This metric incorporates the uncertainty from the covariance matrices in addition to the similarity between the mean vectors.", 
        "120": "4.2.2 Maximum Cosine Similarity  This metric measures the maximum similarity of mean vectors among all pairs of mixture components between distributions f and g. That is,\nd(f, g) = max i,j=1,...,K \u3008\u00b5f,i,\u00b5g,j\u3009 ||\u00b5f,i|| \u00b7 ||\u00b5g,j || , which corresponds to matching the meanings of f and g that are the most similar.", 
        "121": "For a Gaussian embedding, maximum similarity reduces to the usual cosine similarity.", 
        "122": "4.2.3 Minimum Euclidean Distance  Cosine similarity is popular for evaluating embeddings.", 
        "123": "However, our training objective directly involves the Euclidean distance in Eq.", 
        "124": "(3), as opposed to dot product of vectors such as in word2vec.", 
        "125": "Therefore, we also consider the Euclidean metric: d(f, g) = min\ni,j=1,...,K [||\u00b5f,i\u2212\u00b5g,j ||].", 
        "126": "4.3 Qualitative Evaluation  In Table 1, we show examples of polysemous words and their nearest neighbors in the embedding space to demonstrate that our trained embeddings capture multiple word senses.", 
        "127": "For instance, a word such as \u2018rock\u2019 that could mean either \u2018stone\u2019 or \u2018rock music\u2019 should have each of its meanings represented by a distinct Gaussian component.", 
        "128": "Our results for a mixture of two Gaussians model confirm this hypothesis, where we observe that the 0th component of \u2018rock\u2019 being related to (\u2018basalt\u2019, \u2018boulders\u2019) and the 1st component being related to (\u2018indie\u2019, \u2018funk\u2019, \u2018hip-hop\u2019).", 
        "129": "Similarly, the word bank has its 0th component representing the river bank and the 1st component representing the financial bank.", 
        "130": "By contrast, in Table 1 (bottom), see that for Gaussian embeddings with one mixture component, nearest neighbors of polysemous words are predominantly related to a single meaning.", 
        "131": "For instance, \u2018rock\u2019 mostly has neighbors related to rock\nmusic and \u2018bank\u2019 mostly related to the financial bank.", 
        "132": "The alternative meanings of these polysemous words are not well represented in the embeddings.", 
        "133": "As a numerical example, the cosine similarity between \u2018rock\u2019 and \u2018stone\u2019 for the Gaussian representation of Vilnis and McCallum (2014) is only 0.029, much lower than the cosine similarity 0.586 between the 0th component of \u2018rock\u2019 and \u2018stone\u2019 in our multimodal representation.", 
        "134": "In cases where a word only has a single popular meaning, the mixture components can be fairly close; for instance, one component of \u2018stone\u2019 is close to (\u2018stones\u2019, \u2018stonework\u2019, \u2018slab\u2019) and the other to (\u2018carving, \u2018relic\u2019, \u2018excavated\u2019), which reflects subtle variations in meanings.", 
        "135": "In general, the mixture can give properties such as heavy tails and more interesting unimodal characterizations of uncertainty than could be described by a single Gaussian.", 
        "136": "Embedding Visualization We provide an interactive visualization as part of our code repository: https://github.com/benathi/ word2gm#visualization that allows realtime queries of words\u2019 nearest neighbors (in the embeddings tab) for K = 1, 2, 3 components.", 
        "137": "We use a notation similar to that of Table 1, where a token w:i represents the component i of a word w. For instance, if in the K = 2 link we search for bank:0, we obtain the nearest neigh-\nbors such as river:1, confluence:0, waterway:1, which indicates that the 0th component of \u2018bank\u2019 has the meaning \u2018river bank\u2019.", 
        "138": "On the other hand, searching for bank:1 yields nearby words such as banking:1, banker:0, ATM:0, indicating that this component is close to the \u2018financial bank\u2019.", 
        "139": "We also have a visualization of a unimodal (w2g) for comparison in the K = 1 link.", 
        "140": "In addition, the embedding link for our Gaussian mixture model with K = 3 mixture components can learn three distinct meanings.", 
        "141": "For instance, each of the three components of \u2018cell\u2019 is close to (\u2018keypad\u2019, \u2018digits\u2019), (\u2018incarcerated\u2019, \u2018inmate\u2019) or (\u2018tissue\u2019, \u2018antibody\u2019), indicating that the distribution captures the concept of \u2018cellphone\u2019, \u2018jail cell\u2019, or \u2018biological cell\u2019, respectively.", 
        "142": "Due to the limited number of words with more than 2 meanings, our model with K = 3 does not generally offer substantial performance differences to our model with K = 2; hence, we do not further display K = 3 results for compactness.", 
        "143": "4.4 Word Similarity  We evaluate our embeddings on several standard word similarity datasets, namely, SimLex (Hill et al., 2014), WS or WordSim-353, WS-S (similarity), WS-R (relatedness) (Finkelstein et al., 2002), MEN (Bruni et al., 2014), MC (Miller and Charles, 1991), RG (Rubenstein and Goodenough, 1965), YP (Yang and Powers, 2006), MTurk(287,-771) (Radinsky et al., 2011; Halawi et al., 2012), and RW (Luong et al., 2013).", 
        "144": "Each dataset contains a list of word pairs with a human score of how related or similar the two words are.", 
        "145": "We calculate the Spearman correlation (Spearman, 1904) between the labels and our scores generated by the embeddings.", 
        "146": "The Spearman correlation is a rank-based correlation measure that assesses how well the scores describe the true labels.", 
        "147": "The correlation results are shown in Table 2 using the scores generated from the expected likelihood kernel, maximum cosine similarity, and maximum Euclidean distance.", 
        "148": "We show the results of our Gaussian mixture model and compare the performance with that of word2vec and the original Gaussian embedding by Vilnis and McCallum (2014).", 
        "149": "We note that our model of a unimodal Gaussian embedding w2g also outperforms the original model, which differs in model hyperparame-\nters and initialization, for most datasets.", 
        "150": "Our multi-prototype model w2gm also performs better than skip-gram or Gaussian embedding methods on many datasets, namely, WS, WS-R, MEN, MC, RG, YP, MT-287, RW.", 
        "151": "The maximum cosine similarity yields the best performance on most datasets; however, the minimum Euclidean distance is a better metric for the datasets MC and RW.", 
        "152": "These results are consistent for both the single-prototype and the multi-prototype models.", 
        "153": "We also compare out results on WordSim-353 with the multi-prototype embedding method by Huang et al.", 
        "154": "(2012) and Neelakantan et al.", 
        "155": "(2014), shown in Table 3.", 
        "156": "We observe that our singleprototype model w2g is competitive compared to models by Huang et al.", 
        "157": "(2012), even without using a corpus with stop words removed.", 
        "158": "This could be due to the auto-calibration of importance via the covariance learning which decrease the importance of very frequent words such as \u2018the\u2019, \u2018to\u2019, \u2018a\u2019, etc.", 
        "159": "Moreover, our multi-prototype model substantially outperforms the model of Huang et al.", 
        "160": "(2012) and the MSSG model of Neelakantan et al.", 
        "161": "(2014) on the WordSim-353 dataset.", 
        "162": "4.5 Word Similarity for Polysemous Words  We use the dataset SCWS introduced by Huang et al.", 
        "163": "(2012), where word pairs are chosen to have variations in meanings of polysemous and homonymous words.", 
        "164": "We compare our method with multiprototype models by Huang (Huang et al., 2012), Tian (Tian et al., 2014), Chen (Chen et al., 2014), and MSSG model by (Neelakantan et al., 2014).", 
        "165": "We note that Chen model uses an external lexical source WordNet that gives it an extra advantage.", 
        "166": "We use many metrics to calculate the scores for the Spearman correlation.", 
        "167": "MaxSim refers to the maximum cosine similarity.", 
        "168": "AveSim is the average of cosine similarities with respect to the component probabilities.", 
        "169": "In Table 4, the model w2g performs the best among all single-prototype models for either 50 or 200 vector dimensions.", 
        "170": "Our model w2gm performs competitively compared to other multiprototype models.", 
        "171": "In SCWS, the gain in flexibility in moving to a probability density approach appears to dominate over the effects of using a multiprototype.", 
        "172": "In most other examples, we see w2gm surpass w2g, where the multi-prototype structure is just as important for good performance as the\nprobabilistic representation.", 
        "173": "4.6 Reduction in Variance of Polysemous Words  One motivation for our Gaussian mixture embedding is to model word uncertainty more accurately than Gaussian embeddings, which can have overly large variances for polysemous words (in order to assign some mass to all of the distinct meanings).", 
        "174": "We see that our Gaussian mixture model does indeed reduce the variances of each component for such words.", 
        "175": "For instance, we observe that the word rock in w2g has much higher variance per dimension (e\u22121.8 \u2248 1.65) compared to that of Gaussian components of rock in w2gm (which has variance of roughly e\u22122.5 \u2248 0.82).", 
        "176": "We also\nsee, in the next section, that the Gaussian mixture model has desirable quantitative behavior for word entailment.", 
        "177": "4.7 Word Entailment  We evaluate our embeddings on the word entailment dataset from Baroni et al.", 
        "178": "(2012).", 
        "179": "The lexical entailment between words is denoted by w1 |= w2 which means that all instances of w1 are w2.", 
        "180": "The entailment dataset contains positive pairs such as aircraft |= vehicle and negative pairs such as aircraft 6|= insect.", 
        "181": "We generate entailment scores of word pairs and find the best threshold, measured by Average Precision (AP) or F1 score, which identifies negative versus positive entailment.", 
        "182": "We use the max-\nimum cosine similarity and the minimum KL divergence, d(f, g) = min\ni,j=1,...,K KL(f ||g), for en-\ntailment scores.", 
        "183": "The minimum KL divergence is similar to the maximum cosine similarity, but also incorporates the embedding uncertainty.", 
        "184": "In addition, KL divergence is an asymmetric measure, which is more suitable for certain tasks such as word entailment where a relationship is unidirectional.", 
        "185": "For instance, w1 |= w2 does not imply w2 |= w1.", 
        "186": "Indeed, aircraft |= vehicle does not imply vehicle |= aircraft, since all aircraft are vehicles but not all vehicles are aircraft.", 
        "187": "The difference between KL(w1||w2) versus KL(w2||w1) distinguishes which word distribution encompasses another distribution, as demonstrated in Figure 1.", 
        "188": "Table 5 shows the results of our w2gm model versus the Gaussian embedding model w2g.", 
        "189": "We observe a trend for both models with window size 5 and 10 that the KL metric yields improvement (both AP and F1) over cosine similarity.", 
        "190": "In addition, w2gm has a better performance compared to w2g.", 
        "191": "The multi-prototype model estimates the meaning uncertainty better since it is no longer constrained to be unimodal, leading to better characterizations of entailment.", 
        "192": "On the other hand, the Gaussian embedding model suffers from large variance problem for polysemous words, which results in less informative word distribution and inferior entailment scores.", 
        "193": "5 Discussion  We introduced a model that represents words with expressive multimodal distributions formed from Gaussian mixtures.", 
        "194": "To learn the properties of each\nmixture, we proposed an analytic energy function for combination with a maximum margin objective.", 
        "195": "The resulting embeddings capture different semantics of polysemous words, uncertainty, and entailment, and also perform favorably on word similarity benchmarks.", 
        "196": "Elsewhere, latent probabilistic representations are proving to be exceptionally valuable, able to capture nuances such as face angles with variational autoencoders (Kingma and Welling, 2013) or subtleties in painting strokes with the InfoGAN (Chen et al., 2016).", 
        "197": "Moreover, classically deterministic deep learning architectures are now being generalized to probabilistic deep models, for full predictive distributions instead of point estimates, and significantly more expressive representations (Wilson et al., 2016b,a; Al-Shedivat et al., 2016; Gan et al., 2016; Fortunato et al., 2017).", 
        "198": "Similarly, probabilistic word embeddings can capture a range of subtle meanings, and advance the state of the art in predictive tasks.", 
        "199": "Multimodal word distributions naturally represent our belief that words do not have single precise meanings: indeed, the shape of a word distribution can express much more semantic information than any point representation.", 
        "200": "In the future, multimodal word distributions could open the doors to a new suite of applications in language modelling, where whole word distributions are used as inputs to new probabilistic LSTMs, or in decision functions where uncertainty matters.", 
        "201": "As part of this effort, we can explore different metrics between distributions, such as KL divergences, which would be a natural choice for order embeddings that model entailment properties.", 
        "202": "It would also be informative to explore inference over the number of components in mixture models for word distributions.", 
        "203": "Such an approach could potentially discover an unbounded number of distinct meanings for words, but also distribute the support of each word distribution to express highly nuanced meanings.", 
        "204": "Alternatively, we could imagine a dependent mixture model where the distributions over words are evolving with time and other covariates.", 
        "205": "One could also build new types of supervised language models, constructed to more fully leverage the rich information provided by word distributions.", 
        "206": "Acknowledgements  We thank NSF IIS-1563887 for support.", 
        "207": "A Supplementary Material  A.1 Derivation of Expected Likelihood Kernel\nWe derive the form of expected likelihood kernel for Gaussian mixtures.", 
        "208": "Let f, g be Gaussian mixture distributions representing the words wf , wg .", 
        "209": "That is, f(x) =\n\u2211K i=1 piN (x;\u00b5f,i,\u03a3f,i) and g(x) =\u2211K\ni=1 qiN (x;\u00b5g,i,\u03a3g,i), \u2211K i=1 pi = 1, and \u2211K i=1 qi = 1.", 
        "210": "The expected likelihood kernel is given by\nE\u03b8(f, g) =\n\u222b ( K\u2211\ni=1\npiN (x;\u00b5f,i,\u03a3f,i) ) \u00b7\n( K\u2211\nj=1\nqjN (x;\u00b5g,j ,\u03a3g,j) ) dx\n=\nK\u2211\ni=1\nK\u2211\nj=1\npiqj \u222b N (x;\u00b5f,i,\u03a3f,i) \u00b7 N (x;\u00b5g,j ,\u03a3g,j) dx\n=\nK\u2211\ni=1\nK\u2211\nj=1\npiqjN (0;\u00b5f,i \u2212 \u00b5g,j ,\u03a3f,i + \u03a3g,j)\n=\nK\u2211\ni=1\nK\u2211\nj=1\npiqje \u03bei,j\nwhere we note that \u222b N (x;\u00b5i,\u03a3i)N (x;\u00b5j ,\u03a3j) dx = N (0, \u00b5i \u2212 \u00b5j ,\u03a3i + \u03a3j) (Vilnis and McCallum, 2014) and \u03bei,j is the log partial energy, given by equation 3.", 
        "211": "A.2 Implementation In this section we discuss practical details for training the proposed model.", 
        "212": "Reduction to Diagonal Covariance We use a diagonal \u03a3, in which case inverting the covariance matrix is trivial and computations are particularly efficient.", 
        "213": "Let df ,dg denote the diagonal vectors of \u03a3f ,\u03a3g The expression for \u03bei,j reduces to\n\u03bei,j = \u22121 2\nD\u2211\nr=1\nlog(dpr + d q r)\n\u22121 2\n\u2211[ (\u00b5p,i \u2212 \u00b5q,j) \u25e6 1\ndp + dq \u25e6 (\u00b5p,i \u2212 \u00b5q,j)\n]\nwhere \u25e6 denotes element-wise multiplication.", 
        "214": "The spherical case which we use in all our experiments is similar since we simply replace a vector d with a single value.", 
        "215": "Optimization Constraint and Stability We optimize logd since each component of diagonal vector d is constrained to be positive.", 
        "216": "Similarly, we constrain the probability pi to be in [0, 1] and sum to 1 by optimizing over unconstrained scores si \u2208 (\u2212\u221e,\u221e) and using a softmax function to convert the scores to probability pi = e\nsi\u2211K j=1 e sj .", 
        "217": "The loss computation can be numerically unstable if elements of the diagonal covariances are very small, due to the term log(dfr + dgr) and 1dq+dp .", 
        "218": "Therefore, we add a small constant = 10\u22124 so that dfr + dgr and dq + dp becomes dfr + d g r + and dq + dp + .", 
        "219": "In addition, we observe that \u03bei,j can be very small which would result in e\u03bei,j \u2248 0 up to machine precision.", 
        "220": "In order to stabilize the computation in eq.", 
        "221": "2, we compute its equivalent form\nlogE(f, g) = \u03bei\u2032,j\u2032 + log\nK\u2211\nj=1\nK\u2211\ni=1\npiqje \u03bei,j\u2212\u03bei\u2032,j\u2032\nwhere \u03bei\u2032,j\u2032 = maxi,j \u03bei,j .", 
        "222": "Model Hyperparameters and Training Details In the loss function L\u03b8 , we use a margin m = 1 and a batch size of 128.", 
        "223": "We initialize the word embeddings with a uniform distribution over [\u2212 \u221a 3 D , \u221a 3 D\n] so that the expectation of variance is 1 and the mean is zero (LeCun et al., 1998).", 
        "224": "We initialize each dimension of the diagonal matrix (or a single value for spherical case) with a constant value v = 0.05.", 
        "225": "We also initialize the mixture scores si to be 0 so that the initial probabilities are equal among all K components.", 
        "226": "We use the threshold t = 10\u22125 for negative sampling, which is the recommended value for word2vec skip-gram on large datasets.", 
        "227": "We also use a separate output embeddings in addition to input embeddings, similar to word2vec implementation (Mikolov et al., 2013a,b).", 
        "228": "That is, each word has two sets of distributions qI and qO , each of which is a Gaussian mixture.", 
        "229": "For a given pair of word and context (w, c), we use the input distribution qI for w (input word) and the output distribution qO for context c (output word).", 
        "230": "We optimize the parameters of both qI and qO and use the trained input distributions qI as our final word representations.", 
        "231": "We use mini-batch asynchronous gradient descent with Adagrad (Duchi et al., 2011) which performs adaptive learning rate for each parameter.", 
        "232": "We also experiment with Adam (Kingma and Ba, 2014) which corrects the bias in adaptive gradient update of Adagrad and is proven very popular for most recent neural network models.", 
        "233": "However, we found that it is much slower than Adagrad (\u2248 10 times).", 
        "234": "This is because the gradient computation of the model is relatively fast, so a complex gradient update algorithm such as Adam becomes the bottleneck in the optimization.", 
        "235": "Therefore, we choose to use Adagrad which allows us to better scale to large datasets.", 
        "236": "We use a linearly decreasing learning rate from 0.05 to 0.00001."
    }, 
    "document_id": "P17-1151.pdf.json"
}
