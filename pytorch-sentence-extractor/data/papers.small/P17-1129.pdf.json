{
    "abstract_sentences": {
        "1": "Reading comprehension (RC), aiming to understand natural texts and answer questions therein, is a challenging task.", 
        "2": "In this paper, we study the RC problem on the Stanford Question Answering Dataset (SQuAD).", 
        "3": "Observing from the training set that most correct answers are centered around constituents in the parse tree, we design a constituent-centric neural architecture where the generation of candidate answers and their representation learning are both based on constituents and guided by the parse tree.", 
        "4": "Under this architecture, the search space of candidate answers can be greatly reduced without sacrificing the coverage of correct answers and the syntactic, hierarchical and compositional structure among constituents can be well captured, which contributes to better representation learning of the candidate answers.", 
        "5": "On SQuAD, our method achieves the state of the art performance and the ablation study corroborates the effectiveness of individual modules."
    }, 
    "body_sentences": {
        "1": "  Proceedings of the 55th Annual Meeting of the Association for Computational Linguistics, pages 1405\u20131414 Vancouver, Canada, July 30 - August 4, 2017. c\u00a92017 Association for Computational Linguistics\nhttps://doi.org/10.18653/v1/P17-1129  1 Introduction  Reading comprehension (RC) aims to answer questions by understanding texts, which is a challenge task in natural language processing.", 
        "2": "Various RC tasks and datasets have been developed, including Machine Comprehension Test (Richardson et al., 2013) for multiple-choice question answering (QA) (Sachan et al., 2015; Wang and McAllester, 2015), Algebra (Hosseini et al., 2014) and Science (Clark and Etzioni, 2016) for passing standardized tests (Clark et al., 2016), CNN/Daily Mail (Hermann et al., 2015) and Children\u2019s Book Test (Hill et al., 2015) for cloze-style\nQA (Chen et al., 2016; Shen et al., 2016), WikiQA (Yang et al., 2015), Stanford Question Answering Dataset (SQuAD) (Rajpurkar et al., 2016) and Microsoft Machine Reading Comprehension (Nguyen et al., 2016) for open domain QA.", 
        "3": "In this paper, we are specifically interested in solving the SQuAD QA task (Figure 1 shows an example), in light of its following features: (1) large scale: 107,785 questions, 23,215 paragraphs; (2) nonsynthetic: questions are generated by crowdworkers; (3) large search space of candidate answers.", 
        "4": "We study two major problems: (1) how to generate candidate answers?", 
        "5": "Unlike in multiplechoice QA and cloze-style QA where a small amount of answer choices are given, an answer in SQuAD could be any span in the text, resulting in a large search space with sizeO(n2) (Rajpurkar et al., 2016), where n is the number of words in the sentence.", 
        "6": "This would incur a lot of noise, ambigu-\n1405\nity and uncertainty, making it highly difficult to pick up the correct answer.", 
        "7": "(2) how to effectively represent the candidate answers?", 
        "8": "First, long-range semantics spanning multiple sentences need to be captured.", 
        "9": "As noted in (Rajpurkar et al., 2016), the answering of many questions requires multiplesentence reasoning.", 
        "10": "For instance, in Figure 1, the last two sentences in the passages are needed to answer the third question.", 
        "11": "Second, local syntactic structure needs to be incorporated into representation learning.", 
        "12": "The study by (Rajpurkar et al., 2016) shows that syntax plays an important role in SQuAD QA: there are a wide range of syntactic divergence between a question and the sentence containing the answer; the answering of 64.1% questions needs to deal with syntactic variation; experiments show that syntactic features are the major contributing factors to good performance.", 
        "13": "To tackle the first problem, motivated by the observation in (Rajpurkar et al., 2016) that the correct answers picked up by human are not arbitrary spans, but rather centered around constituents in the parse tree, we generate candidate answers based upon constituents, which significantly reduces the search space.", 
        "14": "Different from (Rajpurkar et al., 2016) who only consider exact constituents, we adopt a constituent expansion mechanism which greatly improves the coverage of correct answers.", 
        "15": "For the representation learning of candidate answers which are sequences of constituents, we first encode individual constituents using a chainof-trees LSTM (CT-LSTM) and tree-guided attention mechanism, then feed these encodings into a chain LSTM (Hochreiter and Schmidhuber, 1997) to generate representations for the constituent sequences.", 
        "16": "The CT-LSTM seamlessly integrates intra-sentence tree LSTMs (Tai et al., 2015) which capture the local syntactic properties of constituents and an inter-sentence chain LSTM which glues together the sequence of tree LSTMs such that the semantics of each sentence can be propagated to others.", 
        "17": "The tree-guided attention leverages the hierarchical relations among constituents to learn question-aware representations.", 
        "18": "Putting these pieces together, we design a constituent-centric neural network (CCNN), which contains four layers: a chain-of-trees LSTM encoding layer, a tree-guided attention layer and a candidate-answer generation layer, a prediction layer.", 
        "19": "Evaluation on SQuAD demonstrates the ef-\nfectiveness of CCNN.", 
        "20": "2 Constituent-Centric Neural Network for Reading Comprehension    2.1 Overall Architecture  As observed in (Rajpurkar et al., 2016), almost all correct answers are centered around the constituents.", 
        "21": "To formally confirm this, we compare the correct answers in the training set with constituents generated by the Stanford parser (Manning et al., 2014): for each correct answer, we find its \u201cclosest\u201d constituent \u2013 the longest constituent that is a substring of the answer, and count how many words they differ from (let N denote this number).", 
        "22": "Figure 2 shows the percentage of answers whose N equals to 0, \u00b7 \u00b7 \u00b7 , 8 and N > 8.", 
        "23": "As can be seen, \u223c70% answers are exactly constituents (N = 0) and \u223c97% answers differ from the closest constituents by less equal to 4 words.", 
        "24": "This observation motivates us to approach the\nreading comprehension problem in a constituentcentric manner, where the generation of candidate answers and their representation learning are both based upon constituents.", 
        "25": "Specifically, we design a Constituent-Centric Neural Network (CCNN) to perform end-to-end reading comprehension, where the inputs are the passage and question, and the output is a span in the passage that is mostly suitable to answer this question.", 
        "26": "As shown in Figure 3, the CCNN contains four layers.", 
        "27": "In the encoding layer, the chainof-trees LSTM and tree LSTM encode the constituents in the passage and question respectively.", 
        "28": "The encodings are fed to the tree-guided attention layer to learn question-aware representations, which are passed to the candidate-answer generation layer to produce and encode the candidate answers based on constituent expansion.", 
        "29": "Finally, the prediction layer picks up the best answer from the candidates using a feed-forward network.", 
        "30": "2.2 Encoding  Given the passages and questions, we first use the Stanford parser to parse them into constituent parse trees, then the encoding layer of CCNN learns representations for constituents in questions and passages, using tree LSTM (Tai et al., 2015) and chain-of-trees LSTM respectively.", 
        "31": "These LSTM encoders are able to capture the syntactic properties of constituents and long-range semantics across multiple sentences, which are crucial for SQuAD QA.", 
        "32": "2.2.1 Tree LSTM for Question Encoding  Each question is a single sentence, having one constituent parse tree.", 
        "33": "Internal nodes in the tree represent constituents having more than one word and leaf nodes represent single-word constituent.", 
        "34": "Inspired by (Tai et al., 2015; Teng and Zhang, 2016), we build a bi-directional tree LSTM which consists of a bottom-up LSTM and a top-down LSTM, to encode these constituents (as shown in Figure 4).", 
        "35": "Each node (constituent) has two hidden states: h\u2191 produced by the LSTM in bottomup direction and h\u2193 produced by the LSTM in top-down direction.", 
        "36": "Let T denote the maximum number of children an internal node could have.", 
        "37": "For each particular node, let L (0 \u2264 L \u2264 T ) be the number of children it has, h(l)\u2191 and c (l) \u2191 be the bottom-up hidden state and memory cell of the lth (1 \u2264 l \u2264 L) child (if any) respectively and h(p)\u2193\nand c(p)\u2193 be the top-down hidden state and memory cell of the parent.", 
        "38": "In the bottom-up LSTM, each node has an input gate i\u2191, L forget gates {f (l)\u2191 }Ll=1 corresponding to different children, an output gate o\u2191 and a memory cell c\u2191.", 
        "39": "For an internal node, the inputs are the hidden states and memory cells of its children and the transition equations are defined as:\ni\u2191 = \u03c3( \u2211L l=1W (i,l) \u2191 h (l) \u2191 + b (i) \u2191 ) \u2200l, f (l)\u2191 = \u03c3(W (f,l) \u2191 h (l) \u2191 + b (f,l) \u2191 ) o\u2191 = \u03c3( \u2211L l=1W (o,l) \u2191 h (l) \u2191 + b (o) \u2191 ) u\u2191 = tanh( \u2211L l=1W (u,l) \u2191 h (l) \u2191 + b (u) \u2191 ) c\u2191 = i\u2191 u\u2191 + \u2211L l=1 f (l) \u2191 c (l) \u2191 h\u2191 = o\u2191 tanh(c\u2191)\n(1)\nwhere the weight parameters W and bias parameters b with superscript l such as W(i,l)\u2191 are specific to the l-th child.", 
        "40": "For a leaf node which represents a single word, it has no forget gate and the input is the wording embedding (Pennington et al., 2014) of this word.", 
        "41": "In the top-down direction, the gates, memory cell and hidden state are defined in a similar fashion as the bottom-up direction (Eq.(1)).", 
        "42": "For an internal node except the root, the inputs are the hidden state h(p)\u2193 and memory cell c (p) \u2193 of its parents.", 
        "43": "For a leaf node, in addition to h(p)\u2193 and c (p) \u2193 , the inputs also contain the word embedding.", 
        "44": "For the root node, the top-down hidden state h(r)\u2193 is set to its bottom-up hidden state h(r)\u2191 .", 
        "45": "h (r) \u2191 captures the semantics of all constituents, which is then replicated as hr\u2193 and propagated downwards to each individual constituent.", 
        "46": "Concatenating the hidden states of two directions, we obtain the LSTM encoding for each node\nh = [h\u2191;h\u2193] which will be the input of the attention layer.", 
        "47": "The bottom-up hidden state h\u2191 composes the semantics of sub-constituents contained in this constituent and the top-down hidden state h\u2193 captures the contextual semantics manifested in the entire sentence.", 
        "48": "2.2.2 Chain-of-Trees LSTM for Passage Encoding  To encode the passage which contains multiple sentences, we design a chain-of-trees LSTM (Figure 4).", 
        "49": "A bi-directional tree LSTM is built for each sentence to capture the local syntactic structure and these tree LSTMs are glued together via a bi-directional chain LSTM (Graves et al., 2013) to capture long-range semantics spanning multiple sentences.", 
        "50": "The hidden states generated by the bottom-up tree LSTM serves as the input of the chain LSTM.", 
        "51": "Likewise, the chain LSTM states are fed to the top-down tree LSTM.", 
        "52": "This enables the encoding of every constituent to be propagated to all other constituents in the passage.", 
        "53": "In the chain LSTM, each sentence t is treated as a unit.", 
        "54": "The input of this unit is generated by the tree LSTM of sentence t, which is the bottom-up hidden state h\u2191t at the root.", 
        "55": "Sentence t is associated with a forward hidden state \u2212\u2192 h t and a back-\nward state \u2190\u2212 h t. In the forward direction, the tran-\nsition equations among the input gate \u2212\u2192 i t, forget gate \u2212\u2192 f t, output gate \u2212\u2192o t and memory cell \u2212\u2192c t are:\n\u2212\u2192 i t = \u03c3( \u2212\u2192 W(i)h\u2191t + \u2212\u2192 U(i) \u2212\u2192 h t\u22121 + \u2212\u2192 b (i))\u2212\u2192\nf t = \u03c3( \u2212\u2192 W(f)h\u2191t + \u2212\u2192 U(f) \u2212\u2192 h t\u22121 + \u2212\u2192 b (f))\n\u2212\u2192o t = \u03c3( \u2212\u2192 W(o)h\u2191t + \u2212\u2192 U(o) \u2212\u2192 h t\u22121 + \u2212\u2192 b (o)) \u2212\u2192u t = tanh( \u2212\u2192 W(u)h\u2191t + \u2212\u2192 U(u) \u2212\u2192 h t\u22121 + \u2212\u2192 b (u)) \u2212\u2192c t = \u2212\u2192 i t \u2212\u2192u t +\n\u2212\u2192 f t \u2212\u2192c t\u22121\u2212\u2192\nh t = \u2212\u2192o t tanh(\u2212\u2192c t)\n(2) The backward LSTM is defined in a similar way.", 
        "56": "Subsequently, \u2212\u2192 h t and \u2190\u2212 h t, which encapsulate the semantics of all sentences, are inputted to the root of the top-down tree LSTM and propagated to all the constituents in sentence t.\nTo sum up, the CT-LSTM encodes a passage in the following way: (1) the bottom-up tree LSTMs compute hidden states h\u2191 for each sentence and feed h\u2191 of the root node into the chain LSTM; (2) the chain LSTM computes forward and backward states and feed them into the root of the top-down tree LSTMs; (3) the top-down tree LSTMs com-\npute hidden states h\u2193.", 
        "57": "At each constituent C, the bottom-up state h\u2191 captures the semantics of subconstituents in C and the top-down state h\u2193 captures the semantics of the entire passage.", 
        "58": "2.3 Tree-Guided Attention Mechanism  We propose a tree-guided attention (TGA) mechanism to learn a question-aware representation for each constituent in the passage, which consists of three ingredients: (1) constituent-level attention score computation; (2) tree-guided local normalization; (3) tree-guided attentional summarization.", 
        "59": "Given a constituent h(p) in the passage, for each constituent h(q) in the question, an unnormalized attention weight score a is computed as a = h(p) \u00b7 h(q) which measures the similarity between the two constituents.", 
        "60": "Then we perform a tree-guided local normalization of these scores.", 
        "61": "At each internal node in the parse tree, where the unnormalized attention scores of its L children are {al}Ll=1, a local normalization is performed using a softmax operation a\u0303l = exp(al)/ \u2211L m=1 exp(am) which maps these scores into a probabilistic simplex.", 
        "62": "This normalization scheme stands in contrast with the global normalization adopted in word-based attention (Wang and Jiang, 2016; Wang et al., 2016), where a single softmax is globally applied to the attention scores of all the words in the question.", 
        "63": "Given these locally normalized attention scores, we merge the LSTM encodings of constituents in the question into an attentional representation in a recursive and bottom-up way.", 
        "64": "At each internal node, let h be its LSTM encoding, a and {al}Ll=1 be the normalized attention scores of this node and its L children, and {bl}Ll=1 be the attentional representations (which we will define later) generated at the children, then the attentional representation b of this node is defined as:\nb = a(h+ L\u2211\nl=1\nalbl) (3)\nwhich takes the weighted representation\u2211L l=1 albl contributed from its children, adds in its own encoding h, then performs a re-weighting using the attention score a.", 
        "65": "The attentional representation b(r) at the root node acts as the final summarization of constituents in the question.", 
        "66": "We concatenate it to the LSTM encoding h(p) of the passage constituent and obtain a concatenated representation z = [h(p);b(r)] which will be the input of the candidate answer generation layer.", 
        "67": "Unlike the word-based flat-structure attention mechanism (Wang and Jiang, 2016; Wang et al., 2016) where the attention scores are computed between words and normalized using a single global softmax, and the attentional summary is computed in a flat manner, the tree-guided attention calculates attention scores between constituents, normalizes them locally at each node in the parse tree and computes the attentional summary in a hierarchical way.", 
        "68": "Tailored to the parse tree, TGA is able to capture the syntactic, hierarchical and compositional structures among constituents and arguably generate better attentional representations, as we will validate in the experiments.", 
        "69": "2.4 Candidate Answer Generation  As shown in Figure 2, while most correct answers in the training set are exactly constituents, some of them are not the case.", 
        "70": "To cover the non-constituent answers, we propose to expand each constituent by appending words adjacent to it.", 
        "71": "Let C denote a constituent and S = \u201c \u00b7 \u00b7 \u00b7wi\u22121wiCwjwj+1 \u00b7 \u00b7 \u00b7 \u201d be the sentence containingC.", 
        "72": "We expandC by appending words preceding C (such as wi\u22121 and wi) and words succeeding C (such as wj and wj+1) to C. We define an (l, r)-expansion of a constituent C as follows: append l words preceding C in the sentence to C; append r words succeeding C to C. Let M be the maximum expansion number that l \u2264 M and r \u2264 M .", 
        "73": "Figure 5 shows an example.", 
        "74": "On the left is the constituent parse tree of the sentence \u201cit came from the medical faculty in Paris\u201d.", 
        "75": "On the upper right are the expansions of the constituent C1 \u2013 \u201cthe medical faculty\u201d.", 
        "76": "To expand this constituent, we trace it back to the sentence and look up the M (M=2 in this\ncase) words preceding C1 (which are \u201ccame\u201d and \u201cfrom\u201d) and succeeding C1 (which are \u201cin\u201d and \u201cParis\u201d).", 
        "77": "Then combinations of C1 and the preceding/succeeding words are taken to generate constituent expansions.", 
        "78": "On both the left and right side of C1, we have three choices of expansion: expanding 0,1,2 words.", 
        "79": "Taking combination of these cases, we obtain 9 expansions, including C1 itself ((0, 0)-expansion).", 
        "80": "The next step is to perform reduction of constituent expansions.", 
        "81": "Two things need to be reduced.", 
        "82": "First, while expanding the current constituent, new constituents may come into being.", 
        "83": "For instance, in the expansion \u201ccame from C1 in Paris\u201d, \u201cin\u201d and \u201cParis\u201d form a constituent C3; \u201cfrom\u201d and C1 form a constituent C2; \u201ccame\u201d, C2 and C3 form a constituent C4.", 
        "84": "Eventually, this expansion is reduced to C4.", 
        "85": "Second, the expansions generated from different constituents may have overlap and the duplicated expansions need to be removed.", 
        "86": "For example, the (2, 1)-expansion of C1 \u2013 \u201ccame from the medical faculty in\u201d \u2013 can be reduced to \u201ccame C2 in\u201d, which is the (1, 1)- expansion of C2.", 
        "87": "After reduction, each expansion is a sequence of constituents.", 
        "88": "Next we encode these candidate answers and the encodings will be utilized in the prediction layer.", 
        "89": "In light of the fact that each expansion is a constituent sequence, we build a bi-directional chain LSTM (Figure 5, bottom right) to synthesize the representations of individual constituents therein.", 
        "90": "Let E = C1 \u00b7 \u00b7 \u00b7Cn be an expansion consisting of n constituents.", 
        "91": "In the chain LSTM, the input of unit i is the combined representation of Ci.", 
        "92": "We concatenate the forward hidden state at Cn and backward state at C1 as the final representation of E.  2.5 Answer Prediction and Parameter Learning  Given the representation of candidate answers, we use a feed-forward network f : Rd \u2192 R to predict the correct answer.", 
        "93": "The input of the network is the feature vector of a candidate answer and the output is a confidence score.", 
        "94": "The one with the largest score is chosen as the the correct answer.", 
        "95": "For parameter learning, we normalize the confidence scores into a probabilistic simplex using softmax and define a cross entropy loss thereupon.", 
        "96": "Let Jk be the number of candidate answers produced from the k-th passage-question pair and\n{z(k)j }Jkj=1 be their representations.", 
        "97": "Let tk be the index of the correct answer.", 
        "98": "Then the cross entropy loss of K pairs is defined as\nK\u2211\nk=1\n(\u2212f(ztk) + log Jk\u2211\nj=1\nexp(f(z (k) j ))) (4)\nModel parameters are learned by minimizing this loss using stochastic gradient descent.", 
        "99": "3 Experiments    3.1 Experimental Setup  The experiments are conducted on the Stanford Question Answering Dataset (SQuAD) v1.1, which contains 107,785 questions and 23,215 passages coming from 536 Wikipedia articles.", 
        "100": "The data was randomly partitioned into a training set (80%), a development set (10%) and an unreleased test set (10%).", 
        "101": "Rajpurkar et al.", 
        "102": "(2016) build a leaderboard to evaluate and publish results on the test set.", 
        "103": "Due to software copyright issues, we did not participate this online evaluation.", 
        "104": "Instead, we use the development set (which is untouched during model training) as test set.", 
        "105": "In training, if the correct answer is not in the candidate-answer set, we use the shortest candidate containing the correct answer as the target.", 
        "106": "The Stanford parser is utilized to obtain the constituent parse trees for questions and passages.", 
        "107": "In the parse tree, any internal node which has one child is merged together with its child.", 
        "108": "For instance, in \u201c(NP (NNS sufferers))\u201d, the parent \u201cNP\u201d has only one child \u201c(NNS sufferers)\u201d, we merge them into \u201c(NP sufferers)\u201d.", 
        "109": "We use 300- dimensional word embeddings from GloVe (Pennington et al., 2014) to initialize the model.", 
        "110": "Words not found in GloVe are initialized as zero vectors.", 
        "111": "We use a feed-forward network with 2 hidden layers (both having the same amount of units) for answer prediction.", 
        "112": "The activation function is set to rectified linear.", 
        "113": "Hyperparameters in CCNN are tuned via 5-fold cross validation (CV) on the training set, summarized in Table 1.", 
        "114": "We use the ADAM (Kingma and Ba, 2014) optimizer to train the model with an initial learning rate 0.001 and a mini-batch size 100.", 
        "115": "An ensemble model is also trained, consisting of 10 training runs using the same hyperparameters.", 
        "116": "The performance is evaluated by two metrics (Rajpurkar et al., 2016): (1) exact match (EM) which measures the percentage of predictions that match any one of the ground\ntruth answers exactly; (2) F1 score which measures the average overlap between the prediction and ground truth answer.", 
        "117": "In the development set each question has about three ground truth answers.", 
        "118": "F1 scores with the best matching answers are used to compute the average F1 score.", 
        "119": "3.2 Results  Table 2 shows the performance of our model and previous approaches on the development set.", 
        "120": "CCNN (single model) achieves an EM score of 69.3% and an F1 score of 78.5%, significantly outperforming all previous approaches (single model).", 
        "121": "Through ensembling, the performance of CCNN is further improved and outperforms the baseline ensemble methods.", 
        "122": "The key difference between our method and previous approaches is that CCNN is constituent-centric where the generation and encoding of candidate answers are both based on constituents while the baseline approaches are mostly word-based where the candidate answer is an arbitrary span of words and the encoding is performed over individual words rather than at the constituent level.", 
        "123": "The constituent-centric model-design enjoys two major benefits.", 
        "124": "First, restricting the candidate answers from arbitrary spans to neighborhoods around the constituents greatly reduces the search space, which mitigates the ambiguity and uncertainty in picking up the correct answer.", 
        "125": "Second, the tree LSTMs and tree-guided attention mechanism encapsulate the syntactic, hierarchical and compositional structure among constituents, which leads to better representation learning of the candidate answers.", 
        "126": "We conjecture these are the primary reasons that CCNN outperforms the baselines and provide a validation in the next section.", 
        "127": "3.3 Ablation Study  To further understand the individual modules in CCNN, we perform an ablation study.", 
        "128": "The results are shown in Table 2.", 
        "129": "Tree LSTM To evaluate the effectiveness of tree LSTM in learning syntax-aware representations, we replace it with a syntax-agnostic chain LSTM.", 
        "130": "We build a bi-directional chain LSTM (denoted by A) over the entire passage to encode the individual words.", 
        "131": "Given a constituent C = wi \u00b7 \u00b7 \u00b7wj , we build another bi-directional chain LSTM (denoted by B) over C where the inputs are the encodings of words wi, \u00b7 \u00b7 \u00b7 , wj generated by LSTM\nA.", 
        "132": "In LSTM B, the forward hidden state of wj and backward state of wi are concatenated to represent C. Note that the attention mechanism remains intact, which is still guided by the parse tree.", 
        "133": "This replacement cause 5.8% and 4.6% drop of the EM and F1 scores respectively, which demonstrates the necessity of incorporating syntactic structure (via tree LSTM) into representation learning.", 
        "134": "Chain-of-Trees LSTM (CT-LSTM) We evaluate the effectiveness of CT-LSTM by comparing it with a bag of tree LSTMs: instead of using a chain LSTM to glue the tree LSTMs, we treat them as independent.", 
        "135": "Keeping the other modules intact and replacing CT-LSTM with a bag of independent tree LSTMs, the EM and F1 score drop 4.5% and 3.3% respectively.", 
        "136": "The advantage of CT-LSTM is that it enables the semantics of one\nsentence to be propagated to others, which makes multiple-sentence reasoning possible.", 
        "137": "Tree-Guided Attention (TGA) Mechanism To evaluate the effectiveness of TGA, we performed two studies.", 
        "138": "First, we take it off from the architecture.", 
        "139": "Then constituents in the passage are solely represented by the chain-of-trees LSTM encodings and the question sentence is represented by the tree LSTM encoding at the root of the parse tree.", 
        "140": "At test time, we concatenate the encodings of a candidate answer and the question as inputs of the prediction network.", 
        "141": "Removing the attention layer decreases the EM and F1 by 5.4% and 4.2% respectively, demonstrating the effectiveness of attention mechanism for question-aware representation learning.", 
        "142": "Second, we compare the tree-structured mech-\n0 69 49.6 63.7 1 91 61.8 72.1 2 69.3 78.5 3 66.2 77.1 4 57.4 72.8 5 52.9 70.1\nanism in TGA with a flat-structure mechanism.", 
        "143": "For each constituent h(p)i in the passage, we compute its unnormalized score aij = h (p) i \u00b7 h (q) j with every constituent h(q)j in the question (which has R constituents).", 
        "144": "Then a global softmax operation is applied to these scores, {a\u0303ij}Rj=1 = softmax({aij}Rj=1), to project them into a probabilistic simplex.", 
        "145": "Finally, a flat summarization \u2211R j=1 a\u0303ijh (q) j is computed and appended to h (p) i .", 
        "146": "Replacing TGA with flat-structure attention causes the EM and F1 to drop 3.7% and 2.6% respectively, which demonstrates the advantage of the tree-guided mechanism.", 
        "147": "Constituent Expansion We study how the maximum expansion number M affects performance.", 
        "148": "If M is too small, many correct answers are not contained in the candidate set, which results in low recall.", 
        "149": "If M is too large, excessive candidates are generated, making it harder to pick up the correct one.", 
        "150": "Figure 6(a) shows how EM and F1 vary asM increases, from which we can see a value of M in the middle ground achieves the best tradeoff.", 
        "151": "3.4 Analysis  In this section, we study how CCNN behaves across different answer length (number of words in the answer) and question types, which are shown in Figure 6(b) and (c).", 
        "152": "In Figure 6(b), we compare with the MPCM method (Wang et al., 2016).", 
        "153": "As answer length increases, the performance of both methods decreases.", 
        "154": "This is because for longer answers, it is more difficult to pinpoint the precise boundaries.", 
        "155": "The decreasing of F1 is slower than EM, because F1 is more elastic to small mismatches.", 
        "156": "Our method achieves larger improvement over MPCM at longer answers.", 
        "157": "We conjecture the reason is: longer answers have more complicated syntactic structure, which can be better captured by the tree LSTMs and tree-guided attention mechanism in\nour method.", 
        "158": "MPCM is built upon individual words and is syntax-agnostic.", 
        "159": "In Figure 6(c), we compare with DCN (Xiong et al., 2016) on 8 question types.", 
        "160": "Our method achieves significant improvement over DCN on four types: \u201cwhat\u201d, \u201cwhere\u201d, \u201cwhy\u201d and \u201cother\u201d.", 
        "161": "The answers of questions in these types are typically longer and have more complicated syntactic structure than the other four types where the answers are mostly entities (person, numeric, time, etc.).", 
        "162": "The syntax-aware nature of our method makes it outperform DCN whose model design does not explicitly consider syntactic structures.", 
        "163": "4 Related Works  Several neural network based approaches have been proposed to solve the SQuAD QA problem, which we briefly review from three aspects: candidate answer generation, representation learning and attention mechanism.", 
        "164": "Two ways were investigated for candidate answer generation: (1) chunking: candidates are preselected based on lexical and syntactic analysis, such as constituent parsing (Rajpurkar et al., 2016) and part-of-speech pattern (Yu et al., 2016); (2) directly predicting the start and end position of the answer span, using feed-forward neural network (Wang et al., 2016), LSTM (Seo et al., 2016), pointer network (Vinyals et al., 2015; Wang and Jiang, 2016), dynamic pointer decoder (Xiong et al., 2016).", 
        "165": "The representation learning in previous approaches is conducted over individual words using the following encoders: LSTM in (Wang et al., 2016; Xiong et al., 2016); bi-directional gated recurrent unit (Chung et al., 2014) in (Yu et al., 2016); match-LSTM in (Wang and Jiang, 2016); bi-directional LSTM in (Seo et al., 2016).", 
        "166": "In previous approaches, the attention (Bahdanau et al., 2014; Xu et al., 2015) mechanism is mostly word-based and flat-structured (Kadlec et al., 2016; Sordoni et al., 2016; Wang and Jiang,\n2016; Wang et al., 2016; Yu et al., 2016): the attention scores are computed between individual words, are normalized globally and are used to summarize word-level encodings in a flat manner.", 
        "167": "Cui et al.", 
        "168": "(2016); Xiong et al.", 
        "169": "(2016) explored a coattention mechanism to learn question-topassage and passage-to-question summaries.", 
        "170": "Seo et al.", 
        "171": "(2016) proposed to directly use the attention weights as augmented features instead of applying them for early summarization.", 
        "172": "5 Conclusions and Future Work  To solve the SQuAD question answering problem, we design a constituent centric neural network (CCNN), where the generation and representation learning of candidate answers are both based on constituents.", 
        "173": "We use a constituent expansion mechanism to produce candidate answers, which can greatly reduce the search space without losing the recall of hitting the correct answer.", 
        "174": "To represent these candidate answers, we propose a chain-of-trees LSTM to encode constituents and a tree-guided attention mechanism to learn question-aware representations.", 
        "175": "Evaluations on the SQuAD dataset demonstrate the effectiveness of the constituent-centric neural architecture.", 
        "176": "For future work, we will investigate the wider applicability of chain-of-trees LSTM as a general text encoder that can simultaneously capture local syntactic structure and long-range semantic dependency.", 
        "177": "It can be applied to named entity recognition, sentiment analysis, dialogue generation, to name a few.", 
        "178": "We will also apply the tree-guided attention mechanism to NLP tasks that need syntaxaware attention, such as machine translation, sentence summarization, textual entailment, etc.", 
        "179": "Another direction to explore is joint learning of syntactic parser and chain-of-trees LSTM.", 
        "180": "Currently, the two are separated, which may lead to suboptimal performance."
    }, 
    "document_id": "P17-1129.pdf.json"
}
