{
    "abstract_sentences": {
        "1": "Sequence-to-sequence models have shown strong performance across a broad range of applications.", 
        "2": "However, their application to parsing and generating text using Abstract Meaning Representation (AMR) has been limited, due to the relatively limited amount of labeled data and the nonsequential nature of the AMR graphs.", 
        "3": "We present a novel training procedure that can lift this limitation using millions of unlabeled sentences and careful preprocessing of the AMR graphs.", 
        "4": "For AMR parsing, our model achieves competitive results of 62.1 SMATCH, the current best score reported without significant use of external semantic resources.", 
        "5": "For AMR generation, our model establishes a new state-of-the-art performance of BLEU 33.8.", 
        "6": "We present extensive ablative and qualitative analysis including strong evidence that sequencebased AMR models are robust against ordering variations of graph-to-sequence conversions."
    }, 
    "body_sentences": {
        "1": "  Proceedings of the 55th Annual Meeting of the Association for Computational Linguistics, pages 146\u2013157 Vancouver, Canada, July 30 - August 4, 2017. c\u00a92017 Association for Computational Linguistics\nhttps://doi.org/10.18653/v1/P17-1014\nNeural AMR: Sequence-to-Sequence Models for Parsing and Generation\nIoannis Konstas\u2020 Srinivasan Iyer\u2020 Mark Yatskar\u2020 Yejin Choi\u2020 Luke Zettlemoyer\u2020\u2021\n\u2020Paul G. Allen School of Computer Science & Engineering, Univ.", 
        "2": "of Washington, Seattle, WA {ikonstas,sviyer,my89,yejin,lsz}@cs.washington.edu\n\u2021Allen Institute for Artificial Intelligence, Seattle, WA lukez@allenai.org\nAbstract\nSequence-to-sequence models have shown strong performance across a broad range of applications.", 
        "3": "However, their application to parsing and generating text using Abstract Meaning Representation (AMR) has been limited, due to the relatively limited amount of labeled data and the nonsequential nature of the AMR graphs.", 
        "4": "We present a novel training procedure that can lift this limitation using millions of unlabeled sentences and careful preprocessing of the AMR graphs.", 
        "5": "For AMR parsing, our model achieves competitive results of 62.1 SMATCH, the current best score reported without significant use of external semantic resources.", 
        "6": "For AMR generation, our model establishes a new state-of-the-art performance of BLEU 33.8.", 
        "7": "We present extensive ablative and qualitative analysis including strong evidence that sequencebased AMR models are robust against ordering variations of graph-to-sequence conversions.", 
        "8": "1 Introduction  Abstract Meaning Representation (AMR) is a semantic formalism to encode the meaning of natural language text.", 
        "9": "As shown in Figure 1, AMR represents the meaning using a directed graph while abstracting away the surface forms in text.", 
        "10": "AMR has been used as an intermediate meaning representation for several applications including machine translation (MT) (Jones et al., 2012), summarization (Liu et al., 2015), sentence compression (Takase et al., 2016), and event extraction (Huang et al., 2016).", 
        "11": "While AMR allows for rich semantic representation, annotating training data in AMR is expensive, which in turn limits the use\nObama was elected and his voters celebrated\nof neural network models (Misra and Artzi, 2016; Peng et al., 2017; Barzdins and Gosko, 2016).", 
        "12": "In this work, we present the first successful sequence-to-sequence (seq2seq) models that achieve strong results for both text-to-AMR parsing and AMR-to-text generation.", 
        "13": "Seq2seq models have been broadly successful in many other applications (Wu et al., 2016; Bahdanau et al., 2015; Luong et al., 2015; Vinyals et al., 2015).", 
        "14": "However, their application to AMR has been limited, in part because effective linearization (encoding graphs as linear sequences) and data sparsity were thought to pose significant challenges.", 
        "15": "We show that these challenges can be easily overcome, by demonstrating that seq2seq models can be trained using any graph-isomorphic linearization and that unlabeled text can be used to significantly reduce sparsity.", 
        "16": "Our approach is two-fold.", 
        "17": "First, we introduce a novel paired training procedure that enhances both the text-to-AMR parser and AMR-to-text generator.", 
        "18": "More concretely, first we use self-training to\n146\nbootstrap a high quality AMR parser from millions of unlabeled Gigaword sentences (Napoles et al., 2012) and then use the automatically parsed AMR graphs to pre-train an AMR generator.", 
        "19": "This paired training allows both the parser and generator to learn high quality representations of fluent English text from millions of weakly labeled examples, that are then fine-tuned using human annotated AMR data.", 
        "20": "Second, we propose a preprocessing procedure for the AMR graphs, which includes anonymizing entities and dates, grouping entity categories, and encoding nesting information in concise ways, as illustrated in Figure 2(d).", 
        "21": "This preprocessing procedure helps overcoming the data sparsity while also substantially reducing the complexity of the AMR graphs.", 
        "22": "Under such a representation, we show that any depth first traversal of the AMR is an effective linearization, and it is even possible to use a different random order for each example.", 
        "23": "Experiments on the LDC2015E86 AMR corpus (SemEval-2016 Task 8) demonstrate the effectiveness of the overall approach.", 
        "24": "For parsing, we are able to obtain competitive performance of 62.1 SMATCH without using any external annotated examples other than the output of a NER system, an improvement of over 10 points relative to neural models with a comparable setup.", 
        "25": "For generation, we substantially outperform previous best results, establishing a new state of the art of 33.8 BLEU.", 
        "26": "We also provide extensive ablative and qualitative analysis, quantifying the contributions that come from preprocessing and the paired training procedure.", 
        "27": "2 Related Work  Alignment-based Parsing Flanigan et al.", 
        "28": "(2014) (JAMR) pipeline concept and relation identification with a graph-based algorithm.", 
        "29": "Zhou et al.", 
        "30": "(2016) extend JAMR by performing the concept and relation identification tasks jointly with an incremental model.", 
        "31": "Both systems rely on features based on a set of alignments produced using bi-lexical cues and hand-written rules.", 
        "32": "In contrast, our models train directly on parallel corpora, and make only minimal use of alignments to anonymize named entities.", 
        "33": "Grammar-based Parsing Wang et al.", 
        "34": "(2016) (CAMR) perform a series of shift-reduce transformations on the output of an externally-trained dependency parser, similar to Damonte et al.", 
        "35": "(2017),\nBrandt et al.", 
        "36": "(2016), Puzikov et al.", 
        "37": "(2016), and Goodman et al.", 
        "38": "(2016).", 
        "39": "Artzi et al.", 
        "40": "(2015) use a grammar induction approach with Combinatory Categorical Grammar (CCG), which relies on pretrained CCGBank categories, like Bjerva et al.", 
        "41": "(2016).", 
        "42": "Pust et al.", 
        "43": "(2015) recast parsing as a string-to-tree Machine Translation problem, using unsupervised alignments (Pourdamghani et al., 2014), and employing several external semantic resources.", 
        "44": "Our neural approach is engineering lean, relying only on a large unannotated corpus of English and algorithms to find and canonicalize named entities.", 
        "45": "Neural Parsing Recently there have been a few seq2seq systems for AMR parsing (Barzdins and Gosko, 2016; Peng et al., 2017).", 
        "46": "Similar to our approach, Peng et al.", 
        "47": "(2017) deal with sparsity by anonymizing named entities and typing low frequency words, resulting in a very compact vocabulary (2k tokens).", 
        "48": "However, we avoid reducing our vocabulary by introducing a large set of unlabeled sentences from an external corpus, therefore drastically lowering the out-of-vocabulary rate (see Section 6).", 
        "49": "AMR Generation Flanigan et al.", 
        "50": "(2016) specify a number of tree-to-string transduction rules based on alignments and POS-based features that are used to drive a tree-based SMT system.", 
        "51": "Pourdamghani et al.", 
        "52": "(2016) also use an MT decoder; they learn a classifier that linearizes the input AMR graph in an order that follows the output sentence, effectively reducing the number of alignment crossings of the phrase-based decoder.", 
        "53": "Song et al.", 
        "54": "(2016) recast generation as a traveling salesman problem, after partitioning the graph into fragments and finding the best linearization order.", 
        "55": "Our models do not need to rely on a particular linearization of the input, attaining comparable performance even with a per example random traversal of the graph.", 
        "56": "Finally, all three systems intersect with a large language model trained on Gigaword.", 
        "57": "We show that our seq2seq model has the capacity to learn the same information as a language model, especially after pretraining on the external corpus.", 
        "58": "Data Augmentation Our paired training procedure is largely inspired by Sennrich et al.", 
        "59": "(2016).", 
        "60": "They improve neural MT performance for low resource language pairs by using a back-translation MT system for a large monolingual corpus of the target language in order to create synthetic output,\nand mixing it with the human translations.", 
        "61": "We instead pre-train on the external corpus first, and then fine-tune on the original dataset.", 
        "62": "3 Methods  In this section, we first provide the formal definition of AMR parsing and generation (section 3.1).", 
        "63": "Then we describe the sequence-to-sequence models we use (section 3.2), graph-to-sequence conversion (section 3.3), and our paired training procedure (section 3.4).", 
        "64": "3.1 Tasks  We assume access to a training dataset D where each example pairs a natural language sentence s with an AMR a.", 
        "65": "The AMR is a rooted directed acylical graph.", 
        "66": "It contains nodes whose names correspond to sense-identified verbs, nouns, or AMR specific concepts, for example elect.01, Obama, and person in Figure 1.", 
        "67": "One of these nodes is a distinguished root, for example, the node and in Figure 1.", 
        "68": "Furthermore, the graph contains labeled edges, which correspond to PropBank-style (Palmer et al., 2005) semantic roles for verbs or other relations introduced for AMR, for example, arg0 or op1 in Figure 1.", 
        "69": "The set of node and edge names in an AMR graph is drawn from a set of tokens C, and every word in a sentence is drawn from a vocabulary W .", 
        "70": "We study the task of training an AMR parser, i.e., finding a set of parameters \u03b8P for model f , that predicts an AMR graph a\u0302, given a sentence s:\na\u0302 = argmax a\nf ( a|s; \u03b8P ) (1)\nWe also consider the reverse task, training an AMR generator by finding a set of parameters \u03b8G, for a model f that predicts a sentence s\u0302, given an AMR graph a:\ns\u0302 = argmax s\nf ( s|a; \u03b8G ) (2)\nIn both cases, we use the same family of predictors f , sequence-to-sequence models that use global attention, but the models have independent parameters, \u03b8P and \u03b8G.", 
        "71": "3.2 Sequence-to-sequence Model  For both tasks, we use a stacked-LSTM sequenceto-sequence neural architecture employed in neural machine translation (Bahdanau et al., 2015; Wu\net al., 2016).1 Our model uses a global attention decoder and unknown word replacement with small modifications (Luong et al., 2015).", 
        "72": "The model uses a stacked bidirectional-LSTM encoder to encode an input sequence and a stacked LSTM to decode from the hidden states produced by the encoder.", 
        "73": "We make two modifications to the encoder: (1) we concatenate the forward and backward hidden states at every level of the stack instead of at the top of the stack, and (2) introduce dropout in the first layer of the encoder.", 
        "74": "The decoder predicts an attention vector over the encoder hidden states using previous decoder states.", 
        "75": "The attention is used to weigh the hidden states of the encoder and then predict a token in the output sequence.", 
        "76": "The weighted hidden states, the decoded token, and an attention signal from the previous time step (input feeding) are then fed together as input to the next decoder state.", 
        "77": "The decoder can optionally choose to output an unknown word symbol, in which case the predicted attention is used to copy a token directly from the input sequence into the output sequence.", 
        "78": "3.3 Linearization  Our seq2seq models require that both the input and target be presented as a linear sequence of tokens.", 
        "79": "We define a linearization order for an AMR graph as any sequence of its nodes and edges.", 
        "80": "A linearization is defined as (1) a linearization order and (2) a rendering function that generates any number of tokens when applied to an element in the linearization order (see Section 4.2 for implementation details).", 
        "81": "Furthermore, for parsing, a valid AMR graph must be recoverable from the linearization.", 
        "82": "3.4 Paired Training  Obtaining a corpus of jointly annotated pairs of sentences and AMR graphs is expensive and current datasets only extend to thousands of examples.", 
        "83": "Neural sequence-to-sequence models suffer from sparsity with so few training pairs.", 
        "84": "To reduce the effect of sparsity, we use an external unannotated corpus of sentences Se, and a procedure which pairs the training of the parser and generator.", 
        "85": "Our procedure is described in Algorithm 1, and first trains a parser on the datasetD of pairs of sentences and AMR graphs.", 
        "86": "Then it uses self-training\n1We extended the Harvard NLP seq2seq framework from http://nlp.seas.harvard.edu/code.", 
        "87": "Algorithm 1 Paired Training Procedure Input: Training set of sentences and AMR graphs (s, a) \u2208\nD, an unannotated external corpus of sentences Se, a number of self training iterations,N , and an initial sample size k. Output: Model parameters for AMR parser \u03b8P and AMR generator \u03b8G.", 
        "88": "1: \u03b8P \u2190 Train parser on D .", 
        "89": "Self-train AMR parser.", 
        "90": "2: S1e \u2190 sample k sentences from Se 3: for i = 1 to N do 4: Aie \u2190 Parse Sie using parameters \u03b8P\n.", 
        "91": "Pre-train AMR parser.", 
        "92": "5: \u03b8P \u2190 Train parser on (Aie, Sie)\n.", 
        "93": "Fine tune AMR parser.", 
        "94": "6: \u03b8P \u2190 Train parser on D with initial parameters \u03b8P 7: Si+1e \u2190 sample k \u00b7 10i new sentences from Se 8: end for 9: SNe \u2190 sample k \u00b7 10N new sentences from Se\n.", 
        "95": "Pre-train AMR generator.", 
        "96": "10: Ae \u2190 Parse SNe using parameters \u03b8P 11: \u03b8G \u2190 Train generator on (ANe , SNe )\n.", 
        "97": "Fine tune AMR generator.", 
        "98": "12: \u03b8G \u2190 Train generator on D using initial parameters \u03b8G 13: return \u03b8P , \u03b8G\nto improve the initial parser.", 
        "99": "Every iteration of self-training has three phases: (1) parsing samples from a large, unlabeled corpus Se, (2) creating a new set of parameters by training on Se, and (3) fine-tuning those parameters on the original paired data.", 
        "100": "After each iteration, we increase the size of the sample from Se by an order of magnitude.", 
        "101": "After we have the best parser from self-training, we use it to label AMRs for Se and pre-train the generator.", 
        "102": "The final step of the procedure fine-tunes the generator on the original dataset D.  4 AMR Preprocessing  We use a series of preprocessing steps, including AMR linerization, anonymization, and other modifications we make to sentence-graph pairs.", 
        "103": "Our methods have two goals: (1) reduce the complexity of the linearized sequences to make learning easier while maintaining enough original information, and (2) address sparsity from certain open class vocabulary entries, such as named entities (NEs) and quantities.", 
        "104": "Figure 2(d) contains example inputs and outputs with all of our preprocessing techniques.", 
        "105": "Graph Simplification In order to reduce the overall length of the linearized graph, we first remove variable names and the instance-of relation ( / ) before every concept.", 
        "106": "In case of re-entrant nodes we replace the variable mention with its co-referring concept.", 
        "107": "Even though this replacement incurs loss of information, often the\nsurrounding context helps recover the correct realization, e.g., the possessive role :poss in the example of Figure 1 is strongly correlated with the surface form his.", 
        "108": "Following Pourdamghani et al.", 
        "109": "(2016) we also remove senses from all concepts for AMR generation only.", 
        "110": "Figure 2(a) contains an example output after this stage.", 
        "111": "4.1 Anonymization of Named Entities  Open-class types including NEs, dates, and numbers account for 9.6% of tokens in the sentences of the training corpus, and 31.2% of vocabulary W .", 
        "112": "83.4% of them occur fewer than 5 times in the dataset.", 
        "113": "In order to reduce sparsity and be able to account for new unseen entities, we perform extensive anonymization.", 
        "114": "First, we anonymize sub-graphs headed by one of AMR\u2019s over 140 fine-grained entity types that contain a :name role.", 
        "115": "This captures structures referring to entities such as person, country, miscellaneous entities marked with *-enitity, and typed numerical values, *-quantity.", 
        "116": "We exclude date entities (see the next section).", 
        "117": "We then replace these sub-graphs with a token indicating fine-grained type and an index, i, indicating it is the ith occurrence of that type.2 For example, in Figure 2 the sub-graph headed by country gets replaced with country 0.", 
        "118": "On the training set, we use alignments obtained using the JAMR aligner (Flanigan et al., 2014) and the unsupervised aligner of Pourdamghani et al.", 
        "119": "(2014) in order to find mappings of anonymized subgraphs to spans of text and replace mapped text with the anonymized token that we inserted into the AMR graph.", 
        "120": "We record this mapping for use during testing of generation models.", 
        "121": "If a generation model predicts an anonymization token, we find the corresponding token in the AMR graph and replace the model\u2019s output with the most frequent mapping observed during training for the entity name.", 
        "122": "If the entity was never observed, we copy its name directly from the AMR graph.", 
        "123": "Anonymizing Dates For dates in AMR graphs, we use separate anonymization tokens for year, month-number, month-name, day-number and day-name, indicating whether the date is mentioned by word or by number.3 In AMR gener-\n2In practice we only used three groups of ids: a different one for NEs, dates and constants/numbers.", 
        "124": "3We also use three date format markers that appear in the text as: YYYYMMDD, YYMMDD, and YYYY-MM-DD.", 
        "125": "ation, we render the corresponding format when predicted.", 
        "126": "Figure 2(b) contains an example of all preprocessing up to this stage.", 
        "127": "Named Entity Clusters When performing AMR generation, each of the AMR fine-grained entity types is manually mapped to one of the four coarse entity types used in the Stanford NER system (Finkel et al., 2005): person, location, organization and misc.", 
        "128": "This reduces the sparsity associated with many rarely occurring entity types.", 
        "129": "Figure 2 (c) contains an example with named entity clusters.", 
        "130": "NER for Parsing When parsing, we must normalize test sentences to match our anonymized training data.", 
        "131": "To produce fine-grained named entities, we run the Stanford NER system and first try to replace any identified span with a fine-grained category based on alignments observed during training.", 
        "132": "If this fails, we anonymize the sentence using the coarse categories predicted by the NER system, which are also categories in AMR.", 
        "133": "After parsing, we deterministically generate AMR for anonymizations using the corresponding text span.", 
        "134": "4.2 Linearization  Linearization Order Our linearization order is defined by the order of nodes visited by depth first search, including backward traversing steps.", 
        "135": "For example, in Figure 2, starting at meet the order contains meet, :ARG0, person, :ARG1-of, expert, :ARG2-of,\ngroup, :ARG2-of, :ARG1-of, :ARG0.4 The order traverses children in the sequence they are presented in the AMR.", 
        "136": "We consider alternative orderings of children in Section 7 but always follow the pattern demonstrated above.", 
        "137": "Rendering Function Our rendering function marks scope, and generates tokens following the pre-order traversal of the graph: (1) if the element is a node, it emits the type of the node.", 
        "138": "(2) if the element is an edge, it emits the type of the edge and then recursively emits a bracketed string for the (concept) node immediately after it.", 
        "139": "In case the node has only one child we omit the scope markers (denoted with left \u201c(\u201d, and right \u201c)\u201d parentheses), thus significantly reducing the number of generated tokens.", 
        "140": "Figure 2(d) contains an example showing all of the preprocessing techniques and scope markers that we use in our full model.", 
        "141": "5 Experimental Setup  We conduct all experiments on the AMR corpus used in SemEval-2016 Task 8 (LDC2015E86), which contains 16,833/1,368/1,371 train/dev/test examples.", 
        "142": "For the paired training procedure of Algorithm 1, we use Gigaword as our external corpus and sample sentences that only contain words from the AMR corpus vocabulary W .", 
        "143": "We subsampled the original sentence to ensure there is no overlap with the AMR training or test sets.", 
        "144": "Table 2\n4Sense, instance-of and variable information has been removed at the point of linearization.", 
        "145": "summarizes statistics about the original dataset and the extracted portions of Gigaword.", 
        "146": "We evaluate AMR parsing with SMATCH (Cai and Knight, 2013), and AMR generation using BLEU (Papineni et al., 2002)5.", 
        "147": "We validated word embedding sizes and RNN hidden representation sizes by maximizing AMR development set performance (Algorithm 1 \u2013 line 1).", 
        "148": "We searched over the set {128, 256, 500, 1024} for the best combinations of sizes and set both to 500.", 
        "149": "Models were trained by optimizing cross-entropy loss with stochastic gradient descent, using a batch size of 100 and dropout rate of 0.5.", 
        "150": "Across all models when performance does not improve on the AMR dev set, we decay the learning rate by 0.8.", 
        "151": "For the initial parser trained on the AMR corpus, (Algorithm 1 \u2013 line 1), we use a single stack version of our model, set initial learning rate to 0.5 and train for 60 epochs, taking the best performing model on the development set.", 
        "152": "All subsequent models benefited from increased depth and we used 2-layer stacked versions, maintaining the same embedding sizes.", 
        "153": "We set the initial Gigaword sample size to k = 200, 000 and executed a maximum of 3 iterations of self-training.", 
        "154": "For pretraining the parser and generator, (Algorithm 1 \u2013 lines 4 and 9), we used an initial learning rate of 1.0, and ran for 20 epochs.", 
        "155": "We attempt to fine-tune the parser and generator, respectively, after every epoch of pre-training, setting the initial learning rate to 0.1.", 
        "156": "We select the best performing model on the development set among all of these fine-tuning\n5We use the multi-BLEU script from the MOSES decoder suite (Koehn et al., 2007).", 
        "157": "attempts.", 
        "158": "During prediction we perform decoding using beam search and set the beam size to 5 both for parsing and generation.", 
        "159": "6 Results  Parsing Results Table 1 summarizes our development results for different rounds of self-training and test results for our final system, self-trained on 200k, 2M and 20M unlabeled Gigaword sentences.", 
        "160": "Through every round of self-training, our\nparser improves.", 
        "161": "Our final parser outperforms comparable seq2seq and character LSTM models by over 10 points.", 
        "162": "While much of this improvement comes from self-training, our model without Gigaword data outperforms these approaches by 3.5 points on F1.", 
        "163": "We attribute this increase in performance to different handling of preprocessing and more careful hyper-parameter tuning.", 
        "164": "All other models that we compare against use semantic resources, such as WordNet, dependency parsers or CCG parsers (models marked with * were trained with less data, but only evaluate on newswire text; the rest evaluate on the full test set, containing text from blogs).", 
        "165": "Our full models outperform JAMR, a graph-based model but still lags behind other parser-dependent systems (CAMR6), and resource heavy approaches (SBMT).", 
        "166": "Generation Results Table 3 summarizes our AMR generation results on the development and test set.", 
        "167": "We outperform all previous state-of-theart systems by the first round of self-training and further improve with the next rounds.", 
        "168": "Our final model trained on GIGA-20M outperforms TSP and TREETOSTR trained on LDC2015E86, by over 9 BLEU points.7 Overall, our model incorporates less data than previous approaches as all reported methods train language models on the whole Gigaword corpus.", 
        "169": "We leave scaling our models to all of Gigaword for future work.", 
        "170": "Sparsity Reduction Even after anonymization of open class vocabulary entries, we still encounter a great deal of sparsity in vocabulary given the small size of the AMR corpus, as shown in Table 2.", 
        "171": "By incorporating sentences from Gigaword we are able to reduce vocabulary sparsity dramatically, as we increase the size of sampled sentences: the out-of-vocabulary rate with a threshold of 5 reduces almost 5 times for GIGA-20M.", 
        "172": "Preprocessing Ablation Study We consider the contribution of each main component of our preprocessing stages while keeping our linearization order identical.", 
        "173": "Figure 2 contains examples for each setting of the ablations we evaluate on.", 
        "174": "First we evaluate using linearized graphs without paren-\n6Since we are currently not using any Wikipedia resources for the prediction of named entities, we compare against the no-wikification version of the CAMR system.", 
        "175": "7We also trained our generator on GIGA-2M and finetuned on LDC2014T12 in order to have a direct comparison with PBMT, and achieved a BLEU score of 29.7, i.e., 2.8 points of improvement.", 
        "176": "theses for indicating scope, Figure 2(c), then without named entity clusters, Figure 2(b), and additionally without any anonymization, Figure 2(a).", 
        "177": "Tables 4 summarizes our evaluation on the AMR generation.", 
        "178": "Each components is required, and scope markers and anonymization contribute the most to overall performance.", 
        "179": "We suspect without scope markers our seq2seq models are not as effective at capturing long range semantic relationships between elements of the AMR graph.", 
        "180": "We also evaluated the contribution of anonymization to AMR parsing (Table 5).", 
        "181": "Following previous work, we find that seq2seq-based AMR parsing is largely ineffective without anonymization (Peng et al., 2017).", 
        "182": "7 Linearization Evaluation  In this section we evaluate three strategies for converting AMR graphs into sequences in the context of AMR generation and show that our models are largely agnostic to linearization orders.", 
        "183": "Our results argue, unlike SMT-based AMR generation methods (Pourdamghani et al., 2016), that seq2seq models can learn to ignore artifacts of the conversion of graphs to linear sequences.", 
        "184": "7.1 Linearization Orders  All linearizations we consider use the pattern described in Section 4.2, but differ on the order in which children are visited.", 
        "185": "Each linearization generates anonymized, scope-marked output (see Section 4), of the form shown in Figure 2(d).", 
        "186": "Human The proposal traverses children in the order presented by human authored AMR annotations exactly as shown in Figure 2(d).", 
        "187": "Global-Random We construct a random global ordering of all edge types appearing in AMR graphs and re-use it for every example in the dataset.", 
        "188": "We traverse children based on the position in the global ordering of the edge leading to a child.", 
        "189": "Random For each example in the dataset we traverse children following a different random order of edge types.", 
        "190": "7.2 Results  We present AMR generation results for the three proposed linearization orders in Table 6.", 
        "191": "Random linearization order performs somewhat worse than traversing the graph according to Human linearization order.", 
        "192": "Surprisingly, a per example random linearization order performs nearly identically to a global random order, arguing seq2seq models can learn to ignore artifacts of the conversion of graphs to linear sequences.", 
        "193": "Human-authored AMR leaks information The small difference between random and globalrandom linearizations argues that our models are largely agnostic to variation in linearization order.", 
        "194": "On the other hand, the model that follows the human order performs better, which leads us to suspect it carries extra information not apparent in the graphical structure of the AMR.", 
        "195": "To further investigate, we compared the relative ordering of edge pairs under the same parent to the relative position of children nodes derived from those edges in a sentence, as reported by JAMR alignments.", 
        "196": "We found that the majority of pairs of AMR edges (57.6%) always occurred in the same relative order, therefore revealing no extra generation order information.8 Of the examples corresponding to edge pairs that showed variation, 70.3% appeared in an order consistent with the order they were realized in the sentence.", 
        "197": "The relative ordering of some pairs of AMR edges was\n8This is consistent with constraints encoded in the annotation tool used to collect AMR.", 
        "198": "For example, :ARG0 edges are always ordered before :ARG1 edges.", 
        "199": "particularly indicative of generation order.", 
        "200": "For example, the relative ordering of edges with types location and time, was 17% more indicative of the generation order than the majority of generated locations before time.9\nTo compare to previous work we still report results using human orderings.", 
        "201": "However, we note that any practical application requiring a system to generate an AMR representation with the intention to realize it later on, e.g., a dialog agent, will need to be trained either using consistent, or randomderived linearization orders.", 
        "202": "Arguably, our models are agnostic to this choice.", 
        "203": "8 Qualitative Results  Figure 3 shows example outputs of our full system.", 
        "204": "The generated text for the first graph is nearly perfect with only a small grammatical error due to anonymization.", 
        "205": "The second example is more challenging, with a deep right-branching structure, and a coordination of the verbs stabilize and push in the subordinate clause headed by state.", 
        "206": "The model omits some information from the graph, namely the concepts terrorist and virus.", 
        "207": "In the third example there are greater parts of the graph that are missing, such as the whole sub-graph headed by expert.", 
        "208": "Also the model makes wrong attachment decisions in the last two sub-graphs (it is the evidence that is unimpeachable and irrefutable, and not the equipment), mostly due to insufficient annotation (thing) thus making their generation harder.", 
        "209": "Finally, Table 7 summarizes the proportions of error types we identified on 50 randomly selected examples from the development set.", 
        "210": "We found that the generator mostly suffers from coverage issues,\n9Consider the sentences \u201cShe went to school in New York two years ago\u201d, and \u201cTwo years ago, she went to school in New York\u201d, where \u201ctwo year ago\u201d is the time modifying constituent for the verb went and \u201cNew York\u201d is the location modifying constituent of went.", 
        "211": "an inability to mention all tokens in the input, followed by fluency mistakes, as illustrated above.", 
        "212": "Attachment errors are less frequent, which supports our claim that the model is robust to graph linearization, and can successfully encode long range dependency information between concepts.", 
        "213": "9 Conclusions  We applied sequence-to-sequence models to the tasks of AMR parsing and AMR generation, by carefully preprocessing the graph representation and scaling our models via pretraining on millions of unlabeled sentences sourced from Gigaword corpus.", 
        "214": "Crucially, we avoid relying on resources such as knowledge bases and externally trained parsers.", 
        "215": "We achieve competitive results for the parsing task (SMATCH 62.1) and state-of-theart performance for generation (BLEU 33.8).", 
        "216": "For future work, we would like to extend our work to different meaning representations such as the Minimal Recursion Semantics (MRS; Copestake et al.", 
        "217": "(2005)).", 
        "218": "This formalism tackles certain linguistic phenomena differently from AMR (e.g., negation, and co-reference), contains explicit annotation on concepts for number, tense and case, and finally handles multiple languages10 (Bender, 2014).", 
        "219": "Taking a step further, we would like to apply our models on Semantics-Based Machine Translation using MRS as an intermediate representation between pairs of languages, and investigate the added benefit compared to directly translating the surface strings, especially in the case of distant language pairs such as English and Japanese (Siegel, 2000).", 
        "220": "Acknowledgments  The research was supported in part by DARPA under the DEFT program through AFRL (FA875013-2-0019) and the CwC program through ARO (W911NF-15-1-0543), the ARO (W911NF-16-10121), the NSF (IIS-1252835, IIS-1562364, IIS1524371), an Allen Distinguished Investigator Award, and gifts by Google and Facebook.", 
        "221": "The authors thank Rik Koncel-Kedziorski and the UW NLP group for helpful discussions, and the anonymous reviewers for their thorough and helpful comments.", 
        "222": "10A list of actively maintained languages can be found here: http://moin.delph-in.net/ GrammarCatalogue\nlimit :arg0 ( treaty :arg0-of ( control :arg1 arms ) ) :arg1 ( number :arg1 ( weapon :mod conventional :arg1-of ( deploy :arg2 ( relative-pos :op1 loc_0 :dir west ) :arg1-of possible ) ) )\nSYS: the arms control treaty limits the number of conventional weapons that can be deployed west of Ural Mountains .", 
        "223": "REF: the arms control treaty limits the number of conventional weapons that can be deployed west of the Ural Mountains ."
    }, 
    "document_id": "P17-1014.pdf.json"
}
