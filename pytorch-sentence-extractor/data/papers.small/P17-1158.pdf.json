{
    "abstract_sentences": {
        "1": "Network embedding (NE) is playing a critical role in network analysis, due to its ability to represent vertices with efficient low-dimensional embedding vectors.", 
        "2": "However, existing NE models aim to learn a fixed context-free embedding for each vertex and neglect the diverse roles when interacting with other vertices.", 
        "3": "In this paper, we assume that one vertex usually shows different aspects when interacting with different neighbor vertices, and should own different embeddings respectively.", 
        "4": "Therefore, we present ContextAware Network Embedding (CANE), a novel NE model to address this issue.", 
        "5": "CANE learns context-aware embeddings for vertices with mutual attention mechanism and is expected to model the semantic relationships between vertices more precisely.", 
        "6": "In experiments, we compare our model with existing NE models on three real-world datasets.", 
        "7": "Experimental results show that CANE achieves significant improvement than state-of-the-art methods on link prediction and comparable performance on vertex classification.", 
        "8": "The source code and datasets can be obtained from https://github.com/ thunlp/CANE."
    }, 
    "body_sentences": {
        "1": "  Proceedings of the 55th Annual Meeting of the Association for Computational Linguistics, pages 1722\u20131731 Vancouver, Canada, July 30 - August 4, 2017. c\u00a92017 Association for Computational Linguistics\nhttps://doi.org/10.18653/v1/P17-1158  1 Introduction  Network embedding (NE), i.e., network representation learning (NRL), aims to map vertices of a network into a low-dimensional space according to their structural roles in the network.", 
        "2": "NE provides an efficient and effective way to represent\n\u2217 Indicates equal contribution \u2020Corresponding Author: Z. Liu (liuzy@tsinghua.edu.cn)\nand manage large-scale networks, alleviating the computation and sparsity issues of conventional symbol-based representations.", 
        "3": "Hence, NE is attracting many research interests in recent years (Perozzi et al., 2014; Tang et al., 2015; Grover and Leskovec, 2016), and achieves promising performance on many network analysis tasks including link prediction, vertex classification, and community detection.", 
        "4": "In real-world social networks, it is intuitive that one vertex may demonstrate various aspects when interacting with different neighbor vertices.", 
        "5": "For example, a researcher usually collaborates with various partners on diverse research topics (as illustrated in Fig.", 
        "6": "1), a social-media user contacts with various friends sharing distinct interests, and a web page links to multiple pages for different purposes.", 
        "7": "However, most existing NE methods only arrange one single embedding vector to each vertex, and give rise to the following two invertible issues: (1) These methods cannot flexibly cope with the aspect transition of a vertex when interacting with different neighbors.", 
        "8": "(2) In these models, a vertex tends to force the embeddings of its\n1722\nneighbors close to each other, which may be not the case all the time.", 
        "9": "For example, the left user and right user in Fig.", 
        "10": "1, share less common interests, but are learned to be close to each other since they both link to the middle person.", 
        "11": "This will accordingly make vertex embeddings indiscriminative.", 
        "12": "To address these issues, we aim to propose a Context-Aware Network Embedding (CANE) framework for modeling relationships between vertices precisely.", 
        "13": "More specifically, we present CANE on information networks, where each vertex also contains rich external information such as text, labels or other meta-data, and the significance of context is more critical for NE in this scenario.", 
        "14": "Without loss of generality, we implement CANE on text-based information networks in this paper, which can easily extend to other types of information networks.", 
        "15": "In conventional NE models, each vertex is represented as a static embedding vector, denoted as context-free embedding.", 
        "16": "On the contrary, CANE assigns dynamic embeddings to a vertex according to different neighbors it interacts with, named as context-aware embedding.", 
        "17": "Take a vertex u and its neighbor vertex v for example.", 
        "18": "The contextfree embedding of u remains unchanged when interacting with different neighbors.", 
        "19": "On the contrary, the context-aware embedding of u is dynamic when confronting different neighbors.", 
        "20": "When u interacting with v, their context embeddings concerning each other are derived from their text information, Su and Sv respectively.", 
        "21": "For each vertex, we can easily use neural models, such as convolutional neural networks (Blunsom et al., 2014; Johnson and Zhang, 2014; Kim, 2014) and recurrent neural networks (Kiros et al., 2015; Tai et al., 2015), to build context-free text-based embedding.", 
        "22": "In order to realize context-aware textbased embeddings, we introduce the selective attention scheme and build mutual attention between u and v into these neural models.", 
        "23": "The mutual attention is expected to guide neural models to emphasize those words that are focused by its neighbor vertices and eventually obtain contextaware embeddings.", 
        "24": "Both context-free embeddings and contextaware embeddings of each vertex can be efficiently learned together via concatenation using existing NE methods such as DeepWalk (Perozzi et al., 2014), LINE (Tang et al., 2015) and\nnode2vec (Grover and Leskovec, 2016).", 
        "25": "We conduct experiments on three real-world datasets of different areas.", 
        "26": "Experimental results on link prediction reveal the effectiveness of our framework as compared to other state-of-the-art methods.", 
        "27": "The results suggest that context-aware embeddings are critical for network analysis, in particular for those tasks concerning about complicated interactions between vertices such as link prediction.", 
        "28": "We also explore the performance of our framework via vertex classification and case studies, which again confirms the flexibility and superiority of our models.", 
        "29": "2 Related Work  With the rapid growth of large-scale social networks, network embedding, i.e.", 
        "30": "network representation learning has been proposed as a critical technique for network analysis tasks.", 
        "31": "In recent years, there have been a large number of NE models proposed to learn efficient vertex embeddings (Tang and Liu, 2009; Cao et al., 2015; Wang et al., 2016; Tu et al., 2016a).", 
        "32": "For example, DeepWalk (Perozzi et al., 2014) performs random walks over networks and introduces an efficient word representation learning model, SkipGram (Mikolov et al., 2013a), to learn network embeddings.", 
        "33": "LINE (Tang et al., 2015) optimizes the joint and conditional probabilities of edges in large-scale networks to learn vertex representations.", 
        "34": "Node2vec (Grover and Leskovec, 2016) modifies the random walk strategy in DeepWalk into biased random walks to explore the network structure more efficiently.", 
        "35": "Nevertheless, most of these NE models only encode the structural information into vertex embeddings, without considering heterogeneous information accompanied with vertices in real-world social networks.", 
        "36": "To address this issue, researchers make great efforts to incorporate heterogeneous information into conventional NE models.", 
        "37": "For instance, Yang et al.", 
        "38": "(2015) present text-associated DeepWalk (TADW) to improve matrix factorization based DeepWalk with text information.", 
        "39": "Tu et al.", 
        "40": "(2016b) propose max-margin DeepWalk (MMDW) to learn discriminative network representations by utilizing labeling information of vertices.", 
        "41": "Chen et al.", 
        "42": "(2016) introduce groupenhanced network embedding (GENE) to integrate existing group information in NE.", 
        "43": "Sun et al.", 
        "44": "(2016) regard text content as a special kind\nof vertices, and propose context-enhanced network embedding (CENE) through leveraging both structural and textural information to learn network embeddings.", 
        "45": "To the best of our knowledge, all existing NE models focus on learning context-free embeddings, but ignore the diverse roles when a vertex interacts with others.", 
        "46": "In contrast, we assume that a vertex has different embeddings according to which vertex it interacts with, and propose CANE to learn context-aware vertex embeddings.", 
        "47": "3 Problem Formulation  We first give basic notations and definitions in this work.", 
        "48": "Suppose there is an information network G = (V,E, T ), where V is the set of vertices, E \u2286 V \u00d7V are edges between vertices, and T denotes the text information of vertices.", 
        "49": "Each edge eu,v \u2208 E represents the relationship between two vertices (u, v), with an associated weight wu,v.", 
        "50": "Here, the text information of a specific vertex v \u2208 V is represented as a word sequence Sv = (w1, w2, .", 
        "51": ".", 
        "52": ".", 
        "53": ", wnv), where nv = |Sv|.", 
        "54": "NRL aims to learn a low-dimensional embedding v \u2208 Rd for each vertex v \u2208 V according to its network structure and associated information, e.g.", 
        "55": "text and labels.", 
        "56": "Note that, d |V | is the dimension of representation space.", 
        "57": "Definition 1.", 
        "58": "Context-free Embeddings: Conventional NRL models learn context-free embedding for each vertex.", 
        "59": "It means the embedding of a vertex is fixed and won\u2019t change with respect to its context information (i.e., another vertex it interacts with).", 
        "60": "Definition 2.", 
        "61": "Context-aware Embeddings: Different from existing NRL models that learn context-free embeddings, CANE learns various embeddings for a vertex according to its different contexts.", 
        "62": "Specifically, for an edge eu,v, CANE learns context-aware embeddings v(u) and u(v).", 
        "63": "4 The Method    4.1 Overall Framework  To take full use of both network structure and associated text information, we propose two types of embeddings for a vertex v, i.e., structurebased embedding vs and text-based embedding vt. Structure-based embedding can capture the information in the network structure, while textbased embedding can capture the textual meanings lying in the associated text information.", 
        "64": "With\nthese embeddings, we can simply concatenate them and obtain the vertex embeddings as v = vs \u2295 vt, where \u2295 indicates the concatenation operation.", 
        "65": "Note that, the text-based embedding vt can be either context-free or context-aware, which will be introduced detailedly in section 4.4 and 4.5 respectively.", 
        "66": "When vt is context-aware, the overall vertex embeddings v will be context-aware as well.", 
        "67": "With above definitions, CANE aims to maximize the overall objective of edges as follows:\nL = \u2211\ne\u2208E L(e).", 
        "68": "(1)\nHere, the objective of each edge L(e) consists of two parts as follows:\nL(e) = Ls(e) + Lt(e), (2)\nwhere Ls(e) denotes the structure-based objective and Lt(e) represents the text-based objective.", 
        "69": "In the following part, we give the detailed introduction to the two objectives respectively.", 
        "70": "4.2 Structure-based Objective  Without loss of generality, we assume the network is directed, as an undirected edge can be considered as two directed edges with opposite directions and equal weights.", 
        "71": "Thus, the structure-based objective aims to measure the log-likelihood of a directed edge using the structure-based embeddings as\nLs(e) = wu,v log p(v s|us).", 
        "72": "(3)\nFollowing LINE (Tang et al., 2015), we define the conditional probability of v generated by u in Eq.", 
        "73": "(3) as\np(vs|us) = exp(u s \u00b7 vs)\u2211\nz\u2208V exp(u s \u00b7 zs) .", 
        "74": "(4)  4.3 Text-based Objective  Vertices in real-world social networks usually accompany with associated text information.", 
        "75": "Therefore, we propose the text-based objective to take advantage of these text information, as well as learn text-based embeddings for vertices.", 
        "76": "The text-based objective Lt(e) can be defined with various measurements.", 
        "77": "To be compatible with Ls(e), we define Lt(e) as follows:\nLt(e) = \u03b1 \u00b7Ltt(e) + \u03b2 \u00b7Lts(e) + \u03b3 \u00b7Lst(e), (5)\nwhere \u03b1, \u03b2 and \u03b3 control the weights of various parts, and\nLtt(e) = wu,v log p(v t|ut), Lts(e) = wu,v log p(v t|us), Lst(e) = wu,v log p(v s|ut).", 
        "78": "(6)\nThe conditional probabilities in Eq.", 
        "79": "(6) map the two types of vertex embeddings into the same representation space, but do not enforce them to be identical for the consideration of their own characteristics.", 
        "80": "Similarly, we employ softmax function for calculating the probabilities, as in Eq.", 
        "81": "(4).", 
        "82": "The structure-based embeddings are regarded as parameters, the same as in conventional NE models.", 
        "83": "But for text-based embeddings, we intend to obtain them from associated text information of vertices.", 
        "84": "Besides, the text-based embeddings can be obtained either in context-free ways or contextaware ones.", 
        "85": "In the following sections, we will give detailed introduction respectively.", 
        "86": "4.4 Context-Free Text Embedding  There has been a variety of neural models to obtain text embeddings from a word sequence, such as convolutional neural networks (CNN) (Blunsom et al., 2014; Johnson and Zhang, 2014; Kim, 2014) and recurrent neural networks (RNN) (Kiros et al., 2015; Tai et al., 2015).", 
        "87": "In this work, we investigate different neural networks for text modeling, including CNN, Bidirectional RNN (Schuster and Paliwal, 1997) and GRU (Cho et al., 2014), and employ the best performed CNN, which can capture the local semantic dependency among words.", 
        "88": "Taking the word sequence of a vertex as input, CNN obtains the text-based embedding through three layers, i.e.", 
        "89": "looking-up, convolution and pooling.", 
        "90": "Looking-up.", 
        "91": "Given a word sequence S = (w1, w2, .", 
        "92": ".", 
        "93": ".", 
        "94": ", wn), the looking-up layer transforms each word wi \u2208 S into its corresponding word embedding wi \u2208 Rd\u2032 and obtains embedding sequence as S = (w1,w2, .", 
        "95": ".", 
        "96": ".", 
        "97": ",wn).", 
        "98": "Here, d\u2032 indicates the dimension of word embeddings.", 
        "99": "Convolution.", 
        "100": "After looking-up, the convolution layer extracts local features of input embedding sequence S. To be specific, it performs convolution operation over a sliding window of length l using a convolution matrix C \u2208 Rd\u00d7(l\u00d7d\u2032) as follows:\nxi = C \u00b7 Si:i+l\u22121 + b, (7)\nwhere Si:i+l\u22121 denotes the concatenation of word embeddings within the i-th window and b is the bias vector.", 
        "101": "Note that, we add zero padding vectors (Hu et al., 2014) at the edge of the sentence.", 
        "102": "Max-pooling.", 
        "103": "To obtain the text embedding vt, we operate max-pooling and non-linear transformation over {xi0, .", 
        "104": ".", 
        "105": ".", 
        "106": ",xin} as follows:\nri = tanh(max(x i 0, .", 
        "107": ".", 
        "108": ".", 
        "109": ",x i n)), (8)\nAt last, we encode the text information of a vertex with CNN and obtain its text-based embedding vt = [r1, .", 
        "110": ".", 
        "111": ".", 
        "112": ", rd]\nT .", 
        "113": "As vt is irrelevant to the other vertices it interacts with, we name it as contextfree text embedding.", 
        "114": "4.5 Context-Aware Text Embedding  As stated before, we assume that a specific vertex plays different roles when interacting with others vertices.", 
        "115": "In other words, each vertex should have its own points of focus about a specific vertex, which leads to its context-aware text embeddings.", 
        "116": "To achieve this, we employ mutual attention to obtain context-aware text embedding.", 
        "117": "It enables the pooling layer in CNN to be aware of the vertex pair in an edge, in a way that text information from a vertex can directly affect the text embedding of the other vertex, and vice versa.", 
        "118": "In Fig.", 
        "119": "2, we give an illustration of the generating process of context-aware text embedding.", 
        "120": "Given an edge eu,v with two corresponding text sequences Su and Sv, we can get the matrices P \u2208 Rd\u00d7m and Q \u2208 Rd\u00d7n through convolution layer.", 
        "121": "Here, m and n represent the lengths of Su and Sv respectively.", 
        "122": "By introducing an attentive matrix A \u2208 Rd\u00d7d, we compute the correlation matrix F \u2208 Rm\u00d7n as follows:\nF = tanh(PTAQ).", 
        "123": "(9)\nNote that, each element Fi,j in F represents the pair-wise correlation score between two hidden vectors, i.e., Pi and Qj .", 
        "124": "After that, we conduct pooling operations along rows and columns of F to generate the importance vectors, named as row-pooling and column pooling respectively.", 
        "125": "According to our experiments, mean-pooling performs better than max-pooling.", 
        "126": "Thus, we employ mean-pooling operation as follows:\ngpi = mean(Fi,1, .", 
        "127": ".", 
        "128": ".", 
        "129": ",Fi,n), gqi = mean(F1,i, .", 
        "130": ".", 
        "131": ".", 
        "132": ",Fm,i).", 
        "133": "(10)\nThe importance vectors of P and Q are obtained as gp = [gp1 , .", 
        "134": ".", 
        "135": ".", 
        "136": ", g p m]T and gq = [gq1, .", 
        "137": ".", 
        "138": ".", 
        "139": ", g q n]T .", 
        "140": "Next, we employ softmax function to transform importance vectors gp and gq to attention vectors ap and aq.", 
        "141": "For instance, the i-th element of ap is formalized as follows:\napi = exp(gpi )\u2211\nj\u2208[1,m] exp(g p j ) .", 
        "142": "(11)\nAt last, the context-aware text embeddings of u and v are computed as\nut(v) = Pa p, vt(u) = Qa q.", 
        "143": "(12)\nNow, given an edge (u, v), we can obtain the context-aware embeddings of vertices with their structure embeddings and context-aware text embeddings as u(v) = us\u2295ut(v) and v(u) = vs\u2295vt(u).", 
        "144": "4.6 Optimization of CANE  According to Eq.", 
        "145": "(3) and Eq.", 
        "146": "(6), CANE aims to maximize several conditional probabilities between u \u2208 {us,ut(v)} and v \u2208 {vs,vt(u)}.", 
        "147": "It\nis intuitive that optimizing the conditional probability using softmax function is computationally expensive.", 
        "148": "Thus, we employ negative sampling (Mikolov et al., 2013b) and transform the objective into the following form:\nlog \u03c3(uT \u00b7v)+ k\u2211\ni=1\nEz\u223cP (v)[log \u03c3(\u2212uT \u00b7z)], (13)\nwhere k is the number of negative samples and \u03c3 represents the sigmoid function.", 
        "149": "P (v) \u221d dv3/4 denotes the distribution of vertices, where dv is the out-degree of v.\nAfterward, we employ Adam (Kingma and Ba, 2015) to optimize the transformed objective.", 
        "150": "Note that, CANE is exactly capable of zero-shot scenarios, by generating text embeddings of new vertices with well-trained CNN.", 
        "151": "5 Experiments  To investigate the effectiveness of CANE on modeling relationships between vertices, we conduct experiments of link prediction on several realworld datasets.", 
        "152": "Besides, we also employ vertex classification to verify whether context-aware embeddings of a vertex can compose a high-quality context-free embedding in return.", 
        "153": "5.1 Datasets  We select three real-world network datasets as follows:\nCora1 is a typical paper citation network constructed by (McCallum et al., 2000).", 
        "154": "After filtering out papers without text information, there are 2, 277 machine learning papers in this network, which are divided into 7 categories.", 
        "155": "HepTh2 (High Energy Physics Theory) is another citation network from arXiv3 released by (Leskovec et al., 2005).", 
        "156": "We filter out papers without abstract information and retain 1, 038 papers at last.", 
        "157": "1https://people.cs.umass.edu/\u223cmccallum/data.html 2https://snap.stanford.edu/data/cit-HepTh.html 3https://arxiv.org/\nZhihu4 is the largest online Q&A website in China.", 
        "158": "Users follow each other and answer questions on this site.", 
        "159": "We randomly crawl 10, 000 active users from Zhihu, and take the descriptions of their concerned topics as text information.", 
        "160": "The detailed statistics are listed in Table 1.", 
        "161": "5.2 Baselines  We employ the following methods as baselines: Structure-only: MMB (Airoldi et al., 2008) (Mixed Membership Stochastic Blockmodel) is a conventional graphical model of relational data.", 
        "162": "It allows each vertex to randomly select a different \u201dtopic\u201d when forming an edge.", 
        "163": "DeepWalk (Perozzi et al., 2014) performs random walks over networks and employ Skip-Gram model (Mikolov et al., 2013a) to learn vertex embeddings.", 
        "164": "LINE (Tang et al., 2015) learns vertex embeddings in large-scale networks using first-order and second-order proximities.", 
        "165": "Node2vec (Grover and Leskovec, 2016) proposes a biased random walk algorithm based on DeepWalk to explore neighborhood architecture more efficiently.", 
        "166": "Structure and Text: Naive Combination: We simply concatenate the best-performed structure-based embeddings with CNN based embeddings to represent the vertices.", 
        "167": "TADW (Yang et al., 2015) employs matrix factorization to incorporate text features of vertices into network embeddings.", 
        "168": "CENE (Sun et al., 2016) leverages both structure and textural information by regarding text content as a special kind of vertices, and optimizes the probabilities of heterogeneous links.", 
        "169": "4https://www.zhihu.com/  5.3 Evaluation Metrics and Experiment Settings  For link prediction, we adopt a standard evaluation metric AUC (Hanley and McNeil, 1982), which represents the probability that vertices in a random unobserved link are more similar than those in a random nonexistent link.", 
        "170": "For vertex classification, we employ L2regularized logistic regression (L2R-LR) (Fan et al., 2008) to train classifiers, and evaluate the classification accuracies of various methods.", 
        "171": "To be fair, we set the embedding dimension to 200 for all methods.", 
        "172": "In LINE, we set the number of negative samples to 5; we learn the 100 dimensional first-order and second-order embeddings respectively, and concatenate them to form the 200 dimensional embeddings.", 
        "173": "In node2vec, we employ grid search and select the best-performed hyper-parameters for training.", 
        "174": "We also apply grid search to set the hyper-parameters \u03b1, \u03b2 and \u03b3 in CANE.", 
        "175": "Besides, we set the number of negative samples k to 1 in CANE to speed up the training process.", 
        "176": "To demonstrate the effectiveness of considering attention mechanism and two types of objectives in Eqs.", 
        "177": "(3) and (6), we design three versions of CANE for evaluation, i.e., CANE with text only, CANE without attention and CANE.", 
        "178": "5.4 Link Prediction  As shown in Table 2, Table 3 and Table 4, we evaluate the AUC values while removing different ratios of edges on Cora, HepTh and Zhihu respectively.", 
        "179": "Note that, when we only keep 5% edges for training, most vertices are isolated, which results in the poor and meaningless performance of all the methods.", 
        "180": "Thus, we omit the results under this training ratio.", 
        "181": "From these tables, we have the following observations:\n(1) Our proposed CANE consistently achieves significant improvement comparing to all the baselines on all different datasets and different training ratios.", 
        "182": "It indicates the effectiveness of CANE when applied to link prediction task, and verifies that CANE has the capability of modeling relationships between vertices precisely.", 
        "183": "(2) What calls for special attention is that, both CENE and TADW exhibit unstable performance under various training ratios.", 
        "184": "Specifically, CENE performs poorly under small training ratios, because it reserves much more parameters (e.g., convolution kernels and word embeddings) than TADW, which need more data for training.", 
        "185": "Different from CENE, TADW performs much better under small training ratios, because DeepWalk based methods can explore the sparse network structure well through random walks even with limited edges.", 
        "186": "However, it achieves poor performance under large ones, as its simplicity and the limitation of bag-of-words assumption.", 
        "187": "On the contrary, CANE has a stable performance in various situations.", 
        "188": "It demonstrates the flexibility and robustness of CANE.", 
        "189": "(3) By introducing attention mechanism, the learnt context-aware embeddings obtain consider-\nable improvements than the ones without attention.", 
        "190": "It verifies our assumption that a specific vertex should play different roles when interacting with other vertices, and thus benefits the relevant link prediction task.", 
        "191": "To summarize, all the above observations demonstrate that CANE can learn high-quality context-aware embeddings, which are conducive to estimating the relationship between vertices precisely.", 
        "192": "Moreover, the experimental results on link prediction task state the effectiveness and robustness of CANE.", 
        "193": "5.5 Vertex Classification  In CANE, we obtain various embeddings of a vertex according to the vertex it connects to.", 
        "194": "It\u2019s intuitive that the obtained context-aware embeddings are naturally applicable to link prediction task.", 
        "195": "However, network analysis tasks, such as vertex classification and clustering, require a global embedding, rather than several context-aware embeddings for each vertex.", 
        "196": "To demonstrate the capability of CANE to solve these issues, we generate the global embedding of a vertex u by simply averaging all the context-\naware embeddings as follows:\nu = 1\nN\n\u2211\n(u,v)|(v,u)\u2208E u(v),\nwhere N indicates the number of context-aware embeddings of u.", 
        "197": "With the generated global embeddings, we conduct 2-fold cross-validation and report the average accuracy of vertex classification on Cora.", 
        "198": "As shown in Fig.", 
        "199": "3, we observe that:\n(1) CANE achieves comparable performance with state-of-the-art model CENE.", 
        "200": "It states that the learnt context-aware embeddings can transform into high-quality context-free embeddings through simple average operation, which can be further employed to other network analysis tasks.", 
        "201": "(2) With the introduction of mutual attention mechanism, CANE has an encouraging improvement than the one without attention, which is in accordance with the results of link prediction.", 
        "202": "It denotes that CANE is flexible to various network analysis tasks.", 
        "203": "5.6 Case Study  To demonstrate the significance of mutual attention on selecting meaningful features from text information, we visualize the heat maps of two vertex pairs in Fig.", 
        "204": "4.", 
        "205": "Note that, every word in this figure accompanies with various background colors.", 
        "206": "The stronger the background color is, the larger the weight of this word is.", 
        "207": "The weight of each word is calculated according to the attention weights as follows.", 
        "208": "For each vertex pair, we can get the attention weight of each convolution window according to Eq.", 
        "209": "(11).", 
        "210": "To obtain the weights of words, we assign the attention weight to each word in this window, and add the attention weights of a word together as its final weight.", 
        "211": "The proposed attention mechanism makes the relations between vertices explicit and interpretable.", 
        "212": "We select three connected vertices in Cora for example, denoted as A, B and C. From Fig.", 
        "213": "4, we observe that, though there exists citation relations with identical paper A, paper B and C concern about different parts of A.", 
        "214": "The attention weights over A in edge #1 are assigned to \u201creinforcement learning\u201d.", 
        "215": "On the contrary, the weights in edge #2 are assigned to \u201cmachine learning\u2019\u201d, \u201csupervised learning algorithms\u201d and \u201ccomplex stochastic models\u201d.", 
        "216": "Moreover, all these key elements in A can find corresponding words in B and C. It\u2019s intuitive that these key elements give an exact explanation of the citation relations.", 
        "217": "The discovered significant correlations between vertex pairs reflect the effectiveness of mutual attention mechanism, as well as the capability of CANE for modeling relations precisely.", 
        "218": "6 Conclusion and Future Work  In this paper, we propose the concept of ContextAware Network Embedding (CANE) for the first\ntime, which aims to learn various context-aware embeddings for a vertex according to the neighbors it interacts with.", 
        "219": "Specifically, we implement CANE on text-based information networks with proposed mutual attention mechanism, and conduct experiments on several real-world information networks.", 
        "220": "Experimental results on link prediction demonstrate that CANE is effective for modeling the relationship between vertices.", 
        "221": "Besides, the learnt context-aware embeddings can compose high-quality context-free embeddings.", 
        "222": "We will explore the following directions in future:\n(1) We have investigated the effectiveness of CANE on text-based information networks.", 
        "223": "In future, we will strive to implement CANE on a wider variety of information networks with multi-modal data, such as labels, images and so on.", 
        "224": "(2) CANE encodes latent relations between vertices into their context-aware embeddings.", 
        "225": "Furthermore, there usually exist explicit relations in social networks (e.g., families, friends and colleagues relations between social network users), which are expected to be critical to NE.", 
        "226": "Thus, we want to explore how to incorporate and predict these explicit relations between vertices in NE.", 
        "227": "Acknowledgements  This work is supported by the 973 Program (No.", 
        "228": "2014CB340501), the National Natural Science Foundation of China (NSFC No.", 
        "229": "61572273, 61532010, 61661146007), and Tsinghua University Initiative Scientific Research Program (20151080406)."
    }, 
    "document_id": "P17-1158.pdf.json"
}
