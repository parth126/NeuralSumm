{
    "abstract_sentences": {
        "1": "We propose a new dependency parsing scheme which jointly parses a sentence and repairs grammatical errors by extending the non-directional transitionbased formalism of Goldberg and Elhadad (2010) with three additional actions: SUBSTITUTE, DELETE, INSERT.", 
        "2": "Because these actions may cause an infinite loop in derivation, we also introduce simple constraints that ensure the parser termination.", 
        "3": "We evaluate our model with respect to dependency accuracy and grammaticality improvements for ungrammatical sentences, demonstrating the robustness and applicability of our scheme."
    }, 
    "body_sentences": {
        "1": "  Proceedings of the 55th Annual Meeting of the Association for Computational Linguistics (Short Papers), pages 189\u2013195 Vancouver, Canada, July 30 - August 4, 2017. c\u00a92017 Association for Computational Linguistics\nhttps://doi.org/10.18653/v1/P17-2030  1 Introduction  Robustness has always been a desirable property for natural language parsers: humans generate a variety of noisy outputs, such as ungrammatical webpages, speech disfluencies, and the text in language learner\u2019s essays.", 
        "2": "Such non-canonical text contains grammatical errors such as substitutions, insertions, and deletions.", 
        "3": "For example, a nonnative speaker of English might write \u201c*I look in forward hear from you\u201d, where in is inserted, to is deleted, and hearing is substituted incorrectly.", 
        "4": "We propose a novel dependency parsing scheme that jointly parses and repairs ungrammatical sentences with these sorts of errors.", 
        "5": "The parser is based on the non-directional easy-first (EF) parser introduced by Goldberg and Elhadad (2010) (GE herein), which iteratively adds the most probable arc until the parse tree is completed.", 
        "6": "These actions are called ATTACHLEFT and ATTACHRIGHT depending on the direction of the arc.", 
        "7": "We extend the EF parsing scheme to be robust for ungrammatical inputs by correcting grammatical er-  I you  rors with three new actions: SUBSTITUTE, INSERT, and DELETE.", 
        "8": "These new actions do not add an arc between tokens but instead they edit a single token.", 
        "9": "As a result, the parser is able to jointly parse and correct grammatical errors in the input sentence.", 
        "10": "We call this new scheme Error-Repair NonDirectional Easy-First parsing (EREF).", 
        "11": "Since the new actions may greatly increase the search space (e.g., infinite substitutions), we also introduce simple constraints to avoid such issues.", 
        "12": "We first describe the technical details of EREF (\u00a72) and then evaluate our EREF parser with respect to dependency accuracy (robustness) and grammaticality improvements (\u00a73).", 
        "13": "Finally, we\n189\nposition this effort at the intersection of noisy text parsing and grammatical error correction (\u00a74).", 
        "14": "2 Model  Non-directional Easy-first Parsing Let us begin with a brief review of a non-directional easyfirst (EF) parsing scheme proposed by GE, which is the foundation of our proposed scheme described in the following sections.", 
        "15": "The EF parser has a list of partial structures p1, ..., pk (called pending) initialized with sentence tokens w1, ..., wn, and it keeps updating pending through derivations.", 
        "16": "Unlike left-to-right (e.g., shift-reduce) parsing algorithms (Yamada and Matsumoto, 2003; Nivre, 2004), EF iteratively selects the best pair of adjoining tokens and chooses the direction of attachment: ATTACHLEFT or ATTACHRIGHT.", 
        "17": "Once the action is committed, the corresponding dependency arc is added and the child token is removed from pending.", 
        "18": "The first two derivations in Figure 1 depict ATTACHRIGHT and ATTACHLEFT.", 
        "19": "Pseudocode is shown in Algorithm 1 (lines 1, 3-12).", 
        "20": "The parser is trained using the structured perceptron (Collins, 2002) to choose actions to take given a set of features expanded from templates.", 
        "21": "The cost of actions is computed at every step by checking the validity: whether a new arc is included in the gold parse and whether the child already has all its children.", 
        "22": "See GE for further description of feature templates and structured perceptron training.", 
        "23": "Since it is possible that there are multiple valid sequence of actions and it is important to examine a large search space, the parser is allowed to explore (possibly incorrect) actions with a certain probability, termed learning with exploration by Goldberg and Nivre (2013).", 
        "24": "Error-repair variant of EF Error-repair nondirectional easy-first parsing scheme (EREF) is a variant of EF.", 
        "25": "We add three new actions: SUBSTITUTE, DELETE, INSERT as ActsER.", 
        "26": "We do not deal with a swapping action (Nivre, 2009) to deal with word reordering errors, since the errors are even less frequent than other error types (Leacock et al., 2014).", 
        "27": "SUBSTITUTE replaces a token to a grammatically more probable token, DELETE removes an unnecessary token, and INSERT inserts a new token at a designated index.", 
        "28": "These actions are shown in Figure 1 and Algorithm 1 (lines 13-25).", 
        "29": "Because the length of pending decreases as an attachment occurs, the parser\nAlgorithm 1: Error-repair non-directional parsing Input: ungrammatical sentence= w1 ... wn Output: a set of dependency arcs (Arcs),\nrepaired sentence (w\u03021 ... w\u0302m) 1 Acts = { ATTACHLEFT, ATTACHRIGHT } 2 ActsER = { DELETE, INSERT, SUBSTITUTE } 3 Arcs = { } 4 pending = p1...pn \u2190 w1...wn 5 repaired = w\u03021...w\u0302n \u2190 w1...wn 6 while len (pending) > 1 do 7 best \u2190 argmax\nact\u2208Acts\u222aActsER score (act (i))\n8 s.t.", 
        "30": "1 \u2264 i \u2264 len(pending) \u2229 isLegal(act, pending) 9 if best \u2208 Acts then\n10 (parent, child)\u2190 edgeFor(best) 11 Arcs.add((parent, child)) 12 pending.remove(child) 13 else if best = SUBSTITUTE then 14 c = bestCandidate(best, repaired) 15 pending.replace(pi, c) 16 repaired.replace(w\u0302pi.idx, c) 17 else if best = DELETE then 18 pending.remove(pi) 19 repaired.remove(w\u0302pi.idx) 20 Arcs.updateIndex() 21 else if best = INSERT then 22 c = bestCandidate(best, repaired) 23 pending.insert(i, c) 24 repaired.insert(pi.idx, c) 25 Arcs.updateIndex() 26 end 27 return Arcs, repaired\nalso keeps the token indices in repaired (line 5), which holds all tokens in a sentence throughout the parsing process.", 
        "31": "Furthermore, the parser updates token indices in pending and repaired when INSERT or DELETE occurs.", 
        "32": "Technically, when a token at i is deleted/inserted, the parser decrements/increments the indices that are k >= i (before executing the action) in pending, repaired, and parents and children in a (partial) dependency tree (Arcs).", 
        "33": "To find the best candidate for SUBSTITUTE and INSERT efficiently, we restrict candidates to the same part-of-speech or pre-defined candidate list.", 
        "34": "We select the best candidate by comparing each n-gram language model score with the same surrounding context.", 
        "35": "Similar to EF, while training the parser, the cost\nAlgorithm 2: Check validity during training 1 Function isValid(act, repaired, Gold) 2 d before = editDistance(repaired, Gold) 3 repaired + = repaired.apply(act) 4 d after = editDistance(repaired +, Gold) 5 if d before > d after then return true; 6 else return false; 7 end\nfor ActsER is based on validity.", 
        "36": "The validity of the new actions is computed by taking the edit distance (d) between the Gold tokens (w\u22171 ... w \u2217 r ) and the sentence state that the parser stores in repaired (w\u03021 ... w\u0302m).", 
        "37": "When the edit distance after taking an action (d after) is smaller than before (d before), we regard the action as valid (Algorithm 2).", 
        "38": "One serious concern of EREF is that the new actions may cause an infinite loop during parsing (e.g., infinite SUBSTITUTE, or an alternative DELETE and INSERT sequence.).", 
        "39": "To avoid this, we introduce two constraints: (1) edit flag and (2) edit limit.", 
        "40": "Edit flag is assigned for each token as a property, and a parser is not allowed to execute ActsER on a token if its flag is on.", 
        "41": "The flag is turned on when a parser executes ActsER on a token whose flag is off.", 
        "42": "In INSERT action, the flag of the inserted token is activated, while the subsequent token (which gave rise to the INSERT) is not.", 
        "43": "Edit limit is set to be the number of tokens in a sentence, and the parser is not allowed to perform ActsER when the total number of execution of ActsER exceeds the limit.", 
        "44": "These two constraints prevent the parser from falling into an infinite loop as well as parsing in the same order of time complexity as GE.", 
        "45": "We also add the following constraints to avoid unreasonable derivations: (i) a word with a dependent cannot be deleted and (ii) any child words cannot be substituted.", 
        "46": "All the constraints are implemented in the isLegal() function in Algorithm 1 (line 8).", 
        "47": "We note that these constraints not only prevent undesirable derivations but also leads to an efficiency in exploring the search space during training.", 
        "48": "3 Experiment  Data and Evaluation We evaluate EREF with respect to dependency parsing accuracy (Exp1) and grammaticality improvement (Exp2).1\n1Code for the experiments is available at http:// github.com/keisks/error-repair-parsing\nIn the first experiment, as in GE, we train and evaluate our parser on the English dataset from the Penn Treebank (Marcus et al., 1993) with the Penn2Malt conversion program (Sections 2-21 for training, 22 for tuning, and 23 for test).", 
        "49": "We use the PTB for the dependency experiment, since there are no ungrammatical text corpora that has dependency annotation on the corrected texts by human.", 
        "50": "We choose the following most frequent error types that are used in CoNLL 2013 shared task (Ng et al., 2013):\n1.", 
        "51": "Determiner (substitution, deletion, insertion) 2.", 
        "52": "Preposition (substitution, deletion, insertion) 3.", 
        "53": "Noun number (singular vs. plural) 4.", 
        "54": "Verb form (tense and aspect) 5.", 
        "55": "Subject verb agreement\nRegarding the candidate sets for INSERT and SUBSTITUTE actions, following Rozovskaya and Roth (2014), we focus on the most common candidates for each error type, setting the determiner candidates to be {a, an, the, \u03c6 (as deletion)}, preposition candidates to be {on, about, from, for, of, to, at, in, with, by, \u03c6}, and verb forms to be {VB(P|Z|G|D|N)}.", 
        "56": "We build a 5-gram language model on English Gigaword with the KenLM Toolkit (Heafield, 2011) for EREF to select the best candidate.", 
        "57": "We manually inject grammatical errors into PTB with certain error-rates similarly to the GenERRate toolkit by Foster and Andersen (2009), which is designed to create synthetic errors into sentences to improve grammatical error detection.", 
        "58": "We train and tune EREF models with different token-level error injection rates from 5% (E05) to 20% (E20), because language learner corpora have generally around 5% to 15% of token level errors depending on learners\u2019 proficiency (Leacock et al., 2014).", 
        "59": "Since the error injection is stochastic, we train each model with 10 runs and take an average of parser performance on the test set.", 
        "60": "As a baseline, we use the original parser as described by GE, which is equivalent to EREF with training on an error-free corpus (E00).", 
        "61": "Since the EF baseline does not allow error correction during parsing, we pre-process the test data with a grammatical error correction system similar to Rozovskaya and Roth (2014), where a combination of classifiers for each error type corrects grammatical errors.", 
        "62": "For evaluation, we jointly parse and correct grammatical errors in the test set with different\nerror injection rates (from 0% to 20%).", 
        "63": "It is important to note that the number of tokens between the parser output and the oracle may be different because of error injection into the test set and ActsER during parsing.", 
        "64": "To handle this mismatch, we evaluate the dependency accuracy with alignment (Favre et al., 2010) in the spirit of SParseval (Roark et al., 2006), where tokens between a hypothesis and oracle are aligned prior to calculating the dependency accuracy.", 
        "65": "In the second experiment, we use the Treebank of Learner English (TLE) (Berzak et al., 2016) to see the grammaticality improvement in a real scenario.", 
        "66": "TLE contains 5,124 sentences and 2.69 (std 1.9) token errors per sentence.", 
        "67": "The average sentence length is 19.06 (std 9.47).", 
        "68": "TLE also provides dependency labels and POS tags on the raw (ungrammatical) sentences.", 
        "69": "It is important to note that TLE has dependency annotation only for the original ungrammatical sentences, and therefore we do not compute the accuracy of dependency parse in this experiment.", 
        "70": "Since the corpus size is small, we train EREF (E05 to E20) on 100k sentences from Annotated Gigaword (Napoles et al., 2012) and used TLE as a test set.", 
        "71": "Spelling errors are ignored because EREF can use the POS information.", 
        "72": "Grammaticality is evaluated by a regression model (Heilman et al., 2014), which scores grammaticality on the ordinal scale (from 1 to 4).", 
        "73": "Results Table 1 shows the result of unlabeled dependency accuracy (UAS).2 As previously pre-\n2Technically, it is possible to train the model with learning labels simultaneously (LAS), but there is a trade-off between\nSuccessful cases I \u2019m looking forward to [-see-] {+seeing+} you next summer I \u2019ve never [-approve-] {+approved+} his deal There is not {+a+} possibility to travel Failure cases I \u2019ve [-assisted-] {+assisting+} your new musical show I am writing to complain [-about-] {+with+} somethings I hope you liked {+the+} everything I said\nTable 3: Successful and failure examples by EREF.", 
        "74": "The edits are represented by [-deletion-] and {+insertion+}.", 
        "75": "Adjacent pairs of deletion and insertion are considered as substitution.", 
        "76": "sented (Foster, 2007; Cahill, 2015), our experiment also shows that parser performance deteriorated as the error rate in the test corpus increased.", 
        "77": "On the error-free test set (0%), the baseline (EF pipeline) outperforms other EREF models; the accuracy is lower when the parser is trained on noisier data.", 
        "78": "The difference among the models becomes small when the test set has 10% error injection rate.", 
        "79": "As the rate increases further, the trend of parser accuracy reverses.", 
        "80": "When the test set has 15% or higher noise, the E20 is the most accurate parser.", 
        "81": "This trend is presented by the slope of deterioration \u2207 = accuracy20%\u2212accuracy0%20 in Table 1; a parser trained on noisier training data shows smaller decline and more robustness.3 This indicates that the EREF is more robust than the vanilla EF on ungrammatical texts by jointly parsing and correcting errors.", 
        "82": "Table 2 demonstrates the result of grammaticality improvement (1-4 scale) on the TLE corpus, and Table 3 shows successful and failure corrections by EREF.", 
        "83": "Minimally trained models (E05 and E10) show little improvement in grammaticality because the models are too conservative to make edits.", 
        "84": "The models with higher error-injection rates (E15 and E20) achieve 0.1 to 0.3 improvements that are statistically significant.", 
        "85": "There is still room to improve regarding the amount of corrections.", 
        "86": "This is probably because TLE contains a variety of errors (e.g., collocation, punctuation) in addition to the five error types we focus.", 
        "87": "To deal with other error types, we can extend EREF by adding more actions, although it increases the search space.", 
        "88": "From a practical perspective, the level of ungrammaticality should be realized ahead of time.", 
        "89": "This is an issue to be addressed in future research.", 
        "90": "search space and training time.", 
        "91": "The primary goal of this experiment is to see if the EREF is able to detect and correct grammatical errors.", 
        "92": "3Baseline model without preprocessing always underperformed the preprocessed baseline.", 
        "93": "4 Related Work  Our work lies at the intersection of parsing noncanonical texts and grammatical error correction.", 
        "94": "Joint dependency parsing and disfluency detection has been pursued (Rasooli and Tetreault, 2013, 2014; Honnibal and Johnson, 2014; Wu et al., 2015; Yoshikawa et al., 2016), where a parser jointly parses and detects disfluency (e.g., reparandum and interregnum) for a given speech utterance.", 
        "95": "Our work could be considered an extension via adding SUBSTITUTE and INSERT actions, although we depend on easy-first non-directional parsing framework instead of a left-to-right strategy.", 
        "96": "Importantly, the DELETE action is easier to handle than the SUBSTITUTE and INSERT actions, because they bring us challenging issues about a process of candidate word generation and avoiding an infinite loop in derivation.", 
        "97": "We have addressed these issues as explained in \u00a72.", 
        "98": "In terms of the literature from grammatical error correction, this work is closely related to Dahlmeier and Ng (2012), where they show an error correction decoder with the easy-first strategy.", 
        "99": "The decoder iteratively corrects the most probable ungrammatical token by applying different classifiers for each error type.", 
        "100": "The EREF parser also depends on the easy-first strategy to find ungrammatical index to be deleted, inserted, or substituted, but it parses and corrects errors jointly whereas the decoder is designed as a grammatical error correction framework rather than a parser.", 
        "101": "There is a line of work for parsing ungrammatical sentences (e.g., web forum) by adapting an existing parsing scheme on domain specific annotations (Petrov and McDonald, 2012; Cahill, 2015; Berzak et al., 2016; Nagata and Sakaguchi, 2016).", 
        "102": "Although we share an interest with respect to dealing with ungrammatical sentences, EREF focuses on the parsing scheme for repairing grammatical errors instead of adapting a parser with a domain specific annotation scheme.", 
        "103": "More broadly, our work can also be regarded as one of the joint parsing and text normalization tasks such as joint spelling correction and POS tagging (Sakaguchi et al., 2012), word segmentation and POS tagging (Kaji and Kitsuregawa, 2014; Qian et al., 2015).", 
        "104": "5 Conclusions  We have presented an error-repair variant of the non-directional easy-first dependency parser.", 
        "105": "We\nhave introduced three new actions, SUBSTITUTE, INSERT, and DELETE into the parser so that it jointly parses and corrects grammatical errors in a sentence.", 
        "106": "To address the issue of parsing incompletion due to the new actions, we have proposed simple constraints that keep track of editing history for each token and the total number of edits during derivation.", 
        "107": "The experimental result has demonstrated robustness of EREF parsers against EF and grammaticality improvement.", 
        "108": "Our work is positioned at the intersection of noisy text parsing and grammatical error correction.", 
        "109": "The EREF is a flexible formalism not only for grammatical error correction but other tasks with jointly editing and parsing a given sentence.", 
        "110": "Acknowledgments  This work was supported in part by the JHU Human Language Technology Center of Excellence (HLTCOE), and DARPA LORELEI.", 
        "111": "The U.S. Government is authorized to reproduce and distribute reprints for Governmental purposes.", 
        "112": "The views and conclusions contained in this publication are those of the authors and should not be interpreted as representing official policies or endorsements of DARPA or the U.S. Government."
    }, 
    "document_id": "P17-2030.pdf.json"
}
