{
    "abstract_sentences": {
        "1": "Recent work has proposed several generative neural models for constituency parsing that achieve state-of-the-art results.", 
        "2": "Since direct search in these generative models is difficult, they have primarily been used to rescore candidate outputs from base parsers in which decoding is more straightforward.", 
        "3": "We first present an algorithm for direct search in these generative models.", 
        "4": "We then demonstrate that the rescoring results are at least partly due to implicit model combination rather than reranking effects.", 
        "5": "Finally, we show that explicit model combination can improve performance even further, resulting in new state-of-the-art numbers on the PTB of 94.25 F1 when training only on gold data and 94.66 F1 when using external data."
    }, 
    "body_sentences": {
        "1": "  Proceedings of the 55th Annual Meeting of the Association for Computational Linguistics (Short Papers), pages 161\u2013166 Vancouver, Canada, July 30 - August 4, 2017. c\u00a92017 Association for Computational Linguistics\nhttps://doi.org/10.18653/v1/P17-2025  1 Introduction  Recent work on neural constituency parsing (Dyer et al., 2016; Choe and Charniak, 2016) has found multiple cases where generative scoring models for which inference is complex outperform base models for which inference is simpler.", 
        "2": "Let A be a parser that we want to parse with (here one of the generative models), and let B be a base parser that we use to propose candidate parses which are then scored by the less-tractable parser A.", 
        "3": "We denote this cross-scoring setup by B\u2192 A.", 
        "4": "The papers above repeatedly saw that the cross-scoring setup B\u2192 A under which their generative models were applied outperformed the standard singleparser setup B\u2192 B.", 
        "5": "We term this a cross-scoring gain.", 
        "6": "This paper asks two questions.", 
        "7": "First, why do recent discriminative-to-generative cross-scoring se-\n\u2217Equal contribution.", 
        "8": "tups B\u2192 A outperform their base parsers B?", 
        "9": "Perhaps generative models A are simply superior to the base models B and direct generative parsing (A\u2192 A) would be better still if it were feasible.", 
        "10": "If so, we would characterize the cross-scoring gain from B\u2192 B to B\u2192 A as a reranking gain.", 
        "11": "However, it\u2019s also possible that the hybrid system B\u2192 A shows gains merely from subtle model combination effects.", 
        "12": "If so, scoring candidates using some combined score A + B would be even better, which we would characterize as a model combination gain.", 
        "13": "It might even be the case that B is a better parser overall (i.e.", 
        "14": "B\u2192 B outperforms A\u2192 A).", 
        "15": "Of course, many real hybrids will exhibit both reranking and model combination gains.", 
        "16": "In this paper, we present experiments to isolate the degree to which each gain occurs for each of two state-of-the-art generative neural parsing models: the Recurrent Neural Network Grammar generative parser (RG) of Dyer et al.", 
        "17": "(2016), and the LSTM language modeling generative parser (LM) of Choe and Charniak (2016).", 
        "18": "In particular, we present and use a beam-based search procedure with an augmented state space that can search directly in the generative models, allowing us to explore A\u2192 A for these generative parsers A independent of any base parsers.", 
        "19": "Our findings suggest the presence of model combination effects in both generative parsers: when parses found by searching directly in the generative parser are added to a list of candidates from a strong base parser (the RNNG discriminative parser, RD (Dyer et al., 2016)), performance decreases when compared to using just candidates from the base parser, i.e., B \u222a A\u2192 A has lower evaluation performance than B\u2192 A (Section 3.1).", 
        "20": "This result suggests that both generative models benefit from fortuitous search errors in the rescoring setting \u2013 there are trees with higher probability\n161\nunder the generative model than any tree proposed by the base parser, but which would decrease evaluation performance if selected.", 
        "21": "Because of this, we hypothesize that model combination effects between the base and generative models are partially responsible for the high performance of the generative reranking systems, rather than the generative model being generally superior.", 
        "22": "Here we consider our second question: if crossscoring gains are at least partly due to implicit model combination, can we gain even more by combining the models explicitly?", 
        "23": "We find that this is indeed the case: simply taking a weighted average of the scores of both models when selecting a parse from the base parser\u2019s candidate list improves over using only the score of the generative model, in many cases substantially (Section 3.2).", 
        "24": "Using this technique, in combination with ensembling, we obtain new state-of-the-art results on the Penn Treebank: 94.25 F1 when training only on gold parse trees and 94.66 F1 when using external silver data.", 
        "25": "2 Decoding in generative neural models  All of the parsers we investigate in this work (the discriminative parser RD, and the two generative parsers RG and LM, see Section 1) produce parse trees in a depth-first, left-to-right traversal, using the same basic actions: NT(X ), which opens a new constituent with the non-terminal symbol X; SHIFT / GEN(w), which adds a word; and REDUCE, which closes the current constituent.", 
        "26": "We refer to Dyer et al.", 
        "27": "(2016) for a complete description of these actions, and the constraints on them necessary to ensure valid parse trees.1\nThe primary difference between the actions in the discriminative and generative models is that, whereas the discriminative model uses a SHIFT action which is fixed to produce the next word in the sentence, the generative models use GEN(w) to define a distribution over all possible words w in the lexicon.", 
        "28": "This stems from the generative model\u2019s definition of a joint probability p(x, y) over all possible sentences x and parses y.", 
        "29": "To use a generative model as a parser, we are interested in finding the maximum probability parse for a given sentence.", 
        "30": "This is made more complicated by not\n1The action space for LM differs from RG in two ways: 1) LM has separate reduce actions REDUCE(X ) for each nonterminal X , and 2) LM allows any action to have non-zero probability at all times, even those that may be structurally invalid.", 
        "31": "having an explicit representation for p(y|x), as we do in the discriminative setting.", 
        "32": "However, we can start by applying similar approximate search procedures as are used for the discriminative parser, constraining the set of actions such that it is only possible to produce the observed sentence: i.e.", 
        "33": "only allow a GEN(w) action when w is the next terminal in the sentence, and prohibit GEN actions if all terminals have been produced.", 
        "34": "2.1 Action-synchronous beam search  Past work on discriminative neural constituency parsers has shown the effectiveness of beam search with a small beam (Vinyals et al., 2015) or even greedy search, as in the case of RD (Dyer et al., 2016).", 
        "35": "The standard beam search procedure, which we refer to as action-synchronous, maintains a beam of K partially-completed parses that all have the same number of actions taken.", 
        "36": "At each stage, a pool of successors is constructed by extending each candidate in the beam with each of its possible next actions.", 
        "37": "The K highest-probability successors are chosen as the next beam.", 
        "38": "Unfortunately, we find that action-synchronous beam search breaks down for both generative models we explore in this work, failing to find parses that are high scoring under the model.", 
        "39": "This stems from the probabilities of the actions NT(X ) for all labels X almost always being greater than the probability of GEN(w) for the particular word w which must be produced next in a given sentence.", 
        "40": "Qualitatively, the search procedure prefers to open constituents repeatedly up until the maximum number allowed by the model.", 
        "41": "While these long chains of non-terminals will usually have lower probability than the correct sequence at the point where they finally generate the next word, they often have higher probability up until the word is generated, and so they tend to push the correct sequence off the beam before this point is reached.", 
        "42": "This search failure produces very low evaluation performance: with a beam of size K = 100, action-synchronous beam search achieves 29.1 F1 for RG and 27.4 F1 for LM on the development set.", 
        "43": "2.2 Word-synchronous beam search  To deal with this issue, we force partial parse candidates to compete with each other on a wordby-word level, rather than solely on the level of individual actions.", 
        "44": "The word-synchronous beam search we apply is very similar to approximate\ndecoding procedures developed for other generative models (Henderson, 2003; Titov and Henderson, 2010; Buys and Blunsom, 2015) and can be viewed as a simplified version of the procedure used in the generative top-down parsers of Roark (2001) and Charniak (2010).", 
        "45": "In word-synchronous search, we augment the beam state space, identifying beams by tuples (|W |, |Aw|), where |W | is the number of words that have been produced so far in the sentence, and |Aw| is the number of structural actions that have been taken since the last word was produced.", 
        "46": "Intuitively, we want candidates with the same |W | = w to compete against each other.", 
        "47": "For a beam of partial parses in the state (|W | = w, |Aw| = a), we generate a beam of successors by taking all of the next possible actions for each partial parse in the beam.", 
        "48": "If the action is NT(X) or REDUCE, we place the resulting partial parse in the beam for state (|W | = w, |Aw| = a + 1); otherwise, if the action is GEN, we place it in a list for (|W | = w + 1, |Aw| = 0).", 
        "49": "After all partial parses in the beam have been processed, we check to see if there are a sufficient number of partial parses that have produced the next word: if the beam (|W | = w + 1, |Aw| = 0) contains at least Kw partial parses (the word beam size), we prune it to this size and continue search using this beam.", 
        "50": "Otherwise, we continue building candidates for this word by pruning the beam (|W | = w, |Aw| = a + 1) to size Ka (the action beam size), and continuing search from there.", 
        "51": "In practice, we found it to be most effective to use a value for Kw that is a fraction of the value for Ka.", 
        "52": "In all the experiments we present here, we fix Ka = 10 \u00d7 Kw, with Kw ranging from 10 to 100.", 
        "53": "Table 1 shows F1 for decoding in both generative models on the development set, using the top-scoring parse found for a sentence when searching with the given beam size.", 
        "54": "RG has comparatively larger gains in performance between the larger beam sizes, while still underperforming LM, suggesting that more search is necessary in this model.", 
        "55": "3 Experiments  Using the above decoding procedures, we attempt to separate reranking effects from model combination effects through a set of reranking experiments.", 
        "56": "Our base experiments are performed on the Penn Treebank (Marcus et al., 1993), using sections 2-21 for training, section 22 for development, and section 23 for testing.", 
        "57": "For the LSTM generative model (LM), we use the pre-trained model released by Choe and Charniak (2016).", 
        "58": "We train RNNG discriminative (RD) and generative (RG) models, following Dyer et al.", 
        "59": "(2016) by using the same hyperparameter settings, and using pretrained word embeddings from Ling et al.", 
        "60": "(2015) for the discriminative model.", 
        "61": "The automaticallypredicted part-of-speech tags we use as input for RD are the same as those used by Cross and Huang (2016).", 
        "62": "In each experiment, we obtain a set of candidate parses for each sentence by performing beam search in one or more parsers.", 
        "63": "We use actionsynchronous beam search (Section 2.1) with beam size K = 100 for RD and word-synchronous beam (Section 2.2) with Kw = 100 and Ka = 1000 for the generative models RG and LM.", 
        "64": "In the case that we are using only the scores from a single generative model to rescore candidates taken from the discriminative parser, this setup is close to the reranking procedures originally proposed for these generative models.", 
        "65": "For RG, the original work also used RD to produce candidates, but drew samples from it, whereas we use a beam search to approximate its k-best list.", 
        "66": "The LM generative model was originally used to rerank a 50-best list taken from the Charniak parser (Charniak, 2000).", 
        "67": "In comparison, we found higher performance for the LM model when using a candidate list from the RD parser: 93.66 F1 versus 92.79 F1 on the development data.", 
        "68": "This may be attributable to having a stronger set of candidates: with beam size 100, RD has an oracle F1 of 98.2, compared to 95.9 for the 50-best list from the Charniak parser.", 
        "69": "3.1 Augmenting the candidate set  We first experiment with combining the candidate lists from multiple models, which allows us to look for potential model errors and model combination effects.", 
        "70": "Consider the standard reranking setup B\u2192 A, where we search in B to get a set of candidate parses for each sentence, and\nchoose the top scoring candidate from these under A.", 
        "71": "We extend this by also searching directly in A to find high-scoring candidates for each sentence, and combining them with the candidate list proposed by B by taking the union, A \u222a B.", 
        "72": "We then choose the highest scoring candidate from this list under A.", 
        "73": "If A generally prefers parses outside of the candidate list from B, but these decrease evaluation performance (i.e., if B \u222a A\u2192 A is worse than B\u2192 A), this suggests a model combination effect is occurring: A makes errors which are hidden by having a limited candidate list from B.", 
        "74": "This does seem to be the case for both generative models, as shown in Table 2, which presents F1 scores on the development set when varying the models used to produce the candidates and to score them.", 
        "75": "Each row is a different candidate set, where the third row in each table presents results for the augmented candidate sets; each column is a different scoring model, where the third column is the score combination setting described below.", 
        "76": "Going from RD\u2192 RG to the augmented candidate setting RD \u222a RG\u2192 RG decreases performance from 93.45 F1 to 92.78 F1 on the development set.", 
        "77": "This difference is statistically significant at the p < 0.05 level under a paired bootstrap test.", 
        "78": "We see a smaller, but still significant, effect in the case of LM: RD\u2192 LM achieves 93.66, compared to 93.47 for RD \u222a LM\u2192 LM.", 
        "79": "We can also consider the performance of RG\u2192 RG and LM\u2192 LM (where we do not use candidates from RD at all, but return the highestscoring parse from searching directly in one of the generative models) as an indicator of reranking effects: absolute performance is higher for LM (92.20 F1) than for RG (89.55).", 
        "80": "Taken together,\nthese results suggest that model combination contributes to the success of both models, but to a larger extent for RG.", 
        "81": "A reranking effect may be a larger contributor to the success of LM, as this model achieves stronger performance on its own for the described search setting.", 
        "82": "3.2 Score combination  If the cross-scoring setup exhibits an implicit model combination effect, where strong performance results from searching in one model and scoring with the other, we might expect substantial further improvements in performance by explicitly combining the scores of both models.", 
        "83": "To do so, we score each parse by taking a weighted sum of the log-probabilities assigned by both models (Hayashi et al., 2013), using an interpolation parameter which we tune to maximize F1 on the development set.", 
        "84": "These results are given in columns RD + RG and RD + LM in Table 2.", 
        "85": "We find that combining the scores of both models improves on using the score of either model alone, regardless of the source of candidates.", 
        "86": "These improvements are statistically significant in all cases.", 
        "87": "Score combination also more than compensates for the decrease in performance we saw previously when adding in candidates from the generative model: RD \u222a RG\u2192 RD + RG improves upon both RD\u2192 RG and RD \u222a RG\u2192 RG, and the same effect holds for LM.", 
        "88": "3.3 Strengthening model combination  Given the success of model combination between the base model and a single generative model, we also investigate the hypothesis that the generative models are complementary.", 
        "89": "The Model Combination block of Table 3 shows full results on the test set for these experiments, in the PTB column.", 
        "90": "The same trends we observed on the development data, on which the interpolation parameters were tuned, hold here: score combination improves results for all models (row 3 vs. row 2; row 6 vs. row 5), with candidate augmentation from the generative models giving a further increase (rows 4 and 7).2 Combining candidates and scores from all three models (row 9), we obtain 93.94 F1.", 
        "91": "2These increases, from adding score combination and candidate augmentation, are all significant with p < 0.05 in the PTB setting.", 
        "92": "In the +S data setting, all are significant except for the difference between row 5 and row 6.", 
        "93": "Semi-supervised silver data Choe and Charniak (2016) found a substantial increase in performance by training on external data in addition to trees from the Penn Treebank.", 
        "94": "This silver dataset was obtained by parsing the entire New York Times section of the fifth Gigaword corpus using a product of eight Berkeley parsers (Petrov, 2010) and ZPar (Zhu et al., 2013), then retaining 24 million sentences on which both parsers agreed.", 
        "95": "For our experiments we train RD and RG using the same silver dataset.3 The +S column in Table 3 shows these results, where we observe gains over the PTB models in nearly every case.", 
        "96": "As in the PTB training data setting, using all models for candidates and score combinations is best, achieving 94.66 F1 (row 9).", 
        "97": "Ensembling Finally, we compare to another commonly used model combination method: ensembling multiple instances of the same model type trained from different random initializations.", 
        "98": "We train ensembles of 8 copies each of RD and RG in both the PTB and silver data settings, combining scores from models within an ensemble by\n3When training with silver data, we use a 1-to-1 ratio of silver data updates per gold data updates, which we found to give significantly faster convergence times on development set perplexity for RD and RG compared to the 10-to-1 ratio used by Choe and Charniak (2016) for LM.", 
        "99": "averaging the models\u2019 distributions for each action (in beam search as well as rescoring).", 
        "100": "These results are shown in the bottom section, Ensembling, of Table 3.", 
        "101": "Performance when using only the ensembled RD models (row 10) is lower than rescoring a single RD model with score combinations of single models, either RD + RG (row 3) or RD + LM (row 6).", 
        "102": "In the PTB setting, ensembling with score combination achieves the best overall result of 94.25 (row 13).", 
        "103": "In the silver training data setting, while this does improve on the analogous unensembled result (row 8), it is not better than the combination of single models when candidates from the generative models are also included (row 9).", 
        "104": "4 Discussion  Searching directly in the generative models yields results that are partly surprising, as it reveals the presence of parses which the generative models prefer, but which lead to lower performance than the candidates proposed by the base model.", 
        "105": "However, the results are also unsurprising in the sense that explicitly combining scores allows the reranking setup to achieve better performance than implicit combination, which uses only the scores of a single model.", 
        "106": "Additionally, we see support for the hypothesis that the generative models can achieve good results on their own, with the LSTM generative model showing particularly strong and selfcontained performance.", 
        "107": "While this search procedure allows us to explore these generative models, disentangling reranking and model combination effects, the increase in performance from augmenting the candidate lists with the results of the search may not be worth the required computational cost in a practical parser.", 
        "108": "However, we do obtain a gain over state-of-theart results using simple model score combination on only the base candidates, which can be implemented with minimal cost over the basic reranking setup.", 
        "109": "This provides a concrete improvement for these particular generative reranking procedures for parsing.", 
        "110": "More generally, it supports the idea that hybrid systems, which rely on one model to produce a set of candidates and another to determine which candidates are good, should explore combining their scores and candidates when possible.", 
        "111": "Acknowledgments  We would like to thank Adhiguna Kuncoro and Do Kook Choe for their help providing data and answering questions about their work, as well as Jacob Andreas, John DeNero, and the anonymous reviewers for their suggestions.", 
        "112": "DF is supported by an NDSEG fellowship.", 
        "113": "MS is supported by an NSF Graduate Research Fellowship."
    }, 
    "document_id": "P17-2025.pdf.json"
}
